/**
 * S2S api
 * # Rainbow S2S API guide  ## Preamble  ### Introduction  This guide describes a list of API services that are provided by the OT Rainbow S2S portal. This portal is dedicated to S2S features, providing a full REST API for Rainbow features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP verbs GET, DELETE, POST, PUT, etc. are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according to the stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, e.g. “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * OpenAPI spec version: 1.104.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Conversation', 'model/ConversationCreate', 'model/Conversations'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Conversation'), require('../model/ConversationCreate'), require('../model/Conversations'));
  } else {
    // Browser globals (root is window)
    if (!root.S2SApi) {
      root.S2SApi = {};
    }
    root.S2SApi.ConversationApi = factory(root.S2SApi.ApiClient, root.S2SApi.Conversation, root.S2SApi.ConversationCreate, root.S2SApi.Conversations);
  }
}(this, function(ApiClient, Conversation, ConversationCreate, Conversations) {
  'use strict';

  /**
   * Conversation service.
   * @module api/ConversationApi
   * @version 1.104.0
   */

  /**
   * Constructs a new ConversationApi. 
   * @alias module:api/ConversationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Send a chat state
     * Send a conversation state
     * @param {String} cnxId Connection id
     * @param {String} cvId Conversation id
     * @param {module:model/String} state Chatstate value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.conversationChatstateWithHttpInfo = function(cnxId, cvId, state) {
      var postBody = null;

      // verify the required parameter 'cnxId' is set
      if (cnxId === undefined || cnxId === null) {
        throw new Error("Missing the required parameter 'cnxId' when calling conversationChatstate");
      }

      // verify the required parameter 'cvId' is set
      if (cvId === undefined || cvId === null) {
        throw new Error("Missing the required parameter 'cvId' when calling conversationChatstate");
      }

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling conversationChatstate");
      }


      var pathParams = {
        'cnxId': cnxId,
        'cvId': cvId,
        'state': state
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/chatstate/{state}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a chat state
     * Send a conversation state
     * @param {String} cnxId Connection id
     * @param {String} cvId Conversation id
     * @param {module:model/String} state Chatstate value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.conversationChatstate = function(cnxId, cvId, state) {
      return this.conversationChatstateWithHttpInfo(cnxId, cvId, state)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a conversation
     * Create a conversation
     * @param {String} cnxId Connection id
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationCreate} opts.conversationCreate Conversation data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Conversation} and HTTP response
     */
    this.conversationCreateWithHttpInfo = function(cnxId, opts) {
      opts = opts || {};
      var postBody = opts['conversationCreate'];

      // verify the required parameter 'cnxId' is set
      if (cnxId === undefined || cnxId === null) {
        throw new Error("Missing the required parameter 'cnxId' when calling conversationCreate");
      }


      var pathParams = {
        'cnxId': cnxId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Conversation;

      return this.apiClient.callApi(
        '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a conversation
     * Create a conversation
     * @param {String} cnxId Connection id
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationCreate} opts.conversationCreate Conversation data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Conversation}
     */
    this.conversationCreate = function(cnxId, opts) {
      return this.conversationCreateWithHttpInfo(cnxId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a conversation
     * Delete a conversation
     * @param {String} cnxId Connection id
     * @param {String} id Conversation id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.conversationDeleteWithHttpInfo = function(cnxId, id) {
      var postBody = null;

      // verify the required parameter 'cnxId' is set
      if (cnxId === undefined || cnxId === null) {
        throw new Error("Missing the required parameter 'cnxId' when calling conversationDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationDelete");
      }


      var pathParams = {
        'cnxId': cnxId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a conversation
     * Delete a conversation
     * @param {String} cnxId Connection id
     * @param {String} id Conversation id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.conversationDelete = function(cnxId, id) {
      return this.conversationDeleteWithHttpInfo(cnxId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all conversations
     * Get all conversations
     * @param {String} cnxId Connection id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Conversations} and HTTP response
     */
    this.conversationIndexWithHttpInfo = function(cnxId) {
      var postBody = null;

      // verify the required parameter 'cnxId' is set
      if (cnxId === undefined || cnxId === null) {
        throw new Error("Missing the required parameter 'cnxId' when calling conversationIndex");
      }


      var pathParams = {
        'cnxId': cnxId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Conversations;

      return this.apiClient.callApi(
        '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all conversations
     * Get all conversations
     * @param {String} cnxId Connection id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Conversations}
     */
    this.conversationIndex = function(cnxId) {
      return this.conversationIndexWithHttpInfo(cnxId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a conversation
     * Get a conversation
     * @param {String} cnxId Connection id
     * @param {String} id Conversation id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Conversation} and HTTP response
     */
    this.conversationShowWithHttpInfo = function(cnxId, id) {
      var postBody = null;

      // verify the required parameter 'cnxId' is set
      if (cnxId === undefined || cnxId === null) {
        throw new Error("Missing the required parameter 'cnxId' when calling conversationShow");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationShow");
      }


      var pathParams = {
        'cnxId': cnxId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Conversation;

      return this.apiClient.callApi(
        '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a conversation
     * Get a conversation
     * @param {String} cnxId Connection id
     * @param {String} id Conversation id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Conversation}
     */
    this.conversationShow = function(cnxId, id) {
      return this.conversationShowWithHttpInfo(cnxId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
