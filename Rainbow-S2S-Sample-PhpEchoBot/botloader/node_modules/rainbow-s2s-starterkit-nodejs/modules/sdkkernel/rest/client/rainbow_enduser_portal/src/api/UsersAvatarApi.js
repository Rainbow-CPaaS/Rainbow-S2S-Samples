/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteUserAvatarSuccess', 'model/GetAvatarSuccess', 'model/UploadUserAvatarSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteUserAvatarSuccess'), require('../model/GetAvatarSuccess'), require('../model/UploadUserAvatarSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.UsersAvatarApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.DeleteUserAvatarSuccess, root.RainbowEnduserPortal.GetAvatarSuccess, root.RainbowEnduserPortal.UploadUserAvatarSuccess);
  }
}(this, function(ApiClient, DeleteUserAvatarSuccess, GetAvatarSuccess, UploadUserAvatarSuccess) {
  'use strict';

  /**
   * UsersAvatar service.
   * @module api/UsersAvatarApi
   * @version 1.84.0
   */

  /**
   * Constructs a new UsersAvatarApi. 
   * @alias module:api/UsersAvatarApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete user avatar
     * This API can be used to delete avatar image for logged in user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).       When an avatar is deleted, the field `lastAvatarUpdateDate` of the user is set to null.    User vCard is also updated: the `PHOTO` element is removed and the `LASTAVATARUPDATE` element is set to empty.       A presence stanza is sent to user's resources and users being in user's roster. This allow clients to be notified that this user has been updated:        ```html <presence from='3ae059e2a91c40d9bdd7df0eedc911ca@openrainbow.com'>        <x xmlns='vcard-temp:x:update'>            <avatar/>        </x>        <actor xmlns='jabber:iq:configuration'/x>    </presence> ``` 
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteUserAvatarSuccess} and HTTP response
     */
    this.deleteUserAvatarWithHttpInfo = function(userId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserAvatar");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteUserAvatar");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteUserAvatarSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/avatar', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete user avatar
     * This API can be used to delete avatar image for logged in user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).       When an avatar is deleted, the field `lastAvatarUpdateDate` of the user is set to null.    User vCard is also updated: the `PHOTO` element is removed and the `LASTAVATARUPDATE` element is set to empty.       A presence stanza is sent to user's resources and users being in user's roster. This allow clients to be notified that this user has been updated:        ```html <presence from='3ae059e2a91c40d9bdd7df0eedc911ca@openrainbow.com'>        <x xmlns='vcard-temp:x:update'>            <avatar/>        </x>        <actor xmlns='jabber:iq:configuration'/x>    </presence> ``` 
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteUserAvatarSuccess}
     */
    this.deleteUserAvatar = function(userId, accept) {
      return this.deleteUserAvatarWithHttpInfo(userId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user or company avatar
     * This API can be used to retrieve users or companies avatar.    Example: GET https://openrainbow.com/api/avatar/56c5c19f94141765119f896c?size=128       Clients can request avatars in a given size by specifying size query string parameter.    Avatar file can be resized from 1px to its original resolution, with a maximum of 512px:   * If no size option is requested, avatar is returned by default with resolution of 80px. * Max requestable size is 512. If a higher resolution is requested, the default size is returned instead, i.e. 80px. * Original avatars resolution can't be increased. If uploaded avatar size is 128 x 128 px, even is client request avatar with size 256, the original avatar file will be returned (128px).  
     * @param {String} entityId User or Company unique identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size Specify avatar size in pixels (square size x size).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAvatarSuccess} and HTTP response
     */
    this.getAvatarWithHttpInfo = function(entityId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getAvatar");
      }

      var pathParams = {
        'entityId': entityId
      };
      var queryParams = {
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetAvatarSuccess;
      return this.apiClient.callApi(
        '/api/avatar/{entityId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user or company avatar
     * This API can be used to retrieve users or companies avatar.    Example: GET https://openrainbow.com/api/avatar/56c5c19f94141765119f896c?size=128       Clients can request avatars in a given size by specifying size query string parameter.    Avatar file can be resized from 1px to its original resolution, with a maximum of 512px:   * If no size option is requested, avatar is returned by default with resolution of 80px. * Max requestable size is 512. If a higher resolution is requested, the default size is returned instead, i.e. 80px. * Original avatars resolution can't be increased. If uploaded avatar size is 128 x 128 px, even is client request avatar with size 256, the original avatar file will be returned (128px).  
     * @param {String} entityId User or Company unique identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size Specify avatar size in pixels (square size x size).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAvatarSuccess}
     */
    this.getAvatar = function(entityId, opts) {
      return this.getAvatarWithHttpInfo(entityId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload user avatar
     * This API can be used to upload avatar image for logged in user. This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    Rules:   * Avatar file has to be sent directly in http body (no JSon). * Only **jpeg, jpg and png** files are supported. Appropriate content-type has to be set (image/jpeg or image/png). * If user already has an avatar, the existing one is overwritten. * By default, avatar file size is limited to 4194304 bytes (4 MB) (this limit can be changed by integration team in enduser portal config file). * When an avatar is uploaded, the field `lastAvatarUpdateDate` of the user is updated to the current date. * User vCard is also updated: the `PHOTO` element is set with avatar filename (i.e. user id) in base64 and the `LASTAVATARUPDATE` element is set to the current date. * A presence stanza is sent to user's resources and users being in user's roster. This allow clients to be notified that this user has been updated:      ```html <presence from='3ae059e2a91c40d9bdd7df0eedc911ca@openrainbow.com'>        <x xmlns='vcard-temp:x:update'>            <avatar/>        </x>        <actor xmlns='jabber:iq:configuration'/x>    </presence> ```  
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadUserAvatarSuccess} and HTTP response
     */
    this.uploadUserAvatarWithHttpInfo = function(userId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uploadUserAvatar");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UploadUserAvatarSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/avatar', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload user avatar
     * This API can be used to upload avatar image for logged in user. This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    Rules:   * Avatar file has to be sent directly in http body (no JSon). * Only **jpeg, jpg and png** files are supported. Appropriate content-type has to be set (image/jpeg or image/png). * If user already has an avatar, the existing one is overwritten. * By default, avatar file size is limited to 4194304 bytes (4 MB) (this limit can be changed by integration team in enduser portal config file). * When an avatar is uploaded, the field `lastAvatarUpdateDate` of the user is updated to the current date. * User vCard is also updated: the `PHOTO` element is set with avatar filename (i.e. user id) in base64 and the `LASTAVATARUPDATE` element is set to the current date. * A presence stanza is sent to user's resources and users being in user's roster. This allow clients to be notified that this user has been updated:      ```html <presence from='3ae059e2a91c40d9bdd7df0eedc911ca@openrainbow.com'>        <x xmlns='vcard-temp:x:update'>            <avatar/>        </x>        <actor xmlns='jabber:iq:configuration'/x>    </presence> ```  
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadUserAvatarSuccess}
     */
    this.uploadUserAvatar = function(userId) {
      return this.uploadUserAvatarWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
