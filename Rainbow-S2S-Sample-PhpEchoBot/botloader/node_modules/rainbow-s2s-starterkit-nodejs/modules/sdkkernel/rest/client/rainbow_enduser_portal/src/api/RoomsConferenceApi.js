/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetSharedConferenceSuccess', 'model/SendJoinConferenceInvitationEmail', 'model/SendJoinConferenceInvitationEmailSuccess', 'model/SendScheduledMeetingCancelationEmail', 'model/SendScheduledMeetingCancelationEmailSuccess', 'model/ShareConference', 'model/ShareConferenceSuccess', 'model/StopConferenceSharingSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetSharedConferenceSuccess'), require('../model/SendJoinConferenceInvitationEmail'), require('../model/SendJoinConferenceInvitationEmailSuccess'), require('../model/SendScheduledMeetingCancelationEmail'), require('../model/SendScheduledMeetingCancelationEmailSuccess'), require('../model/ShareConference'), require('../model/ShareConferenceSuccess'), require('../model/StopConferenceSharingSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.RoomsConferenceApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.GetSharedConferenceSuccess, root.RainbowEnduserPortal.SendJoinConferenceInvitationEmail, root.RainbowEnduserPortal.SendJoinConferenceInvitationEmailSuccess, root.RainbowEnduserPortal.SendScheduledMeetingCancelationEmail, root.RainbowEnduserPortal.SendScheduledMeetingCancelationEmailSuccess, root.RainbowEnduserPortal.ShareConference, root.RainbowEnduserPortal.ShareConferenceSuccess, root.RainbowEnduserPortal.StopConferenceSharingSuccess);
  }
}(this, function(ApiClient, GetSharedConferenceSuccess, SendJoinConferenceInvitationEmail, SendJoinConferenceInvitationEmailSuccess, SendScheduledMeetingCancelationEmail, SendScheduledMeetingCancelationEmailSuccess, ShareConference, ShareConferenceSuccess, StopConferenceSharingSuccess) {
  'use strict';

  /**
   * RoomsConference service.
   * @module api/RoomsConferenceApi
   * @version 1.84.0
   */

  /**
   * Constructs a new RoomsConferenceApi. 
   * @alias module:api/RoomsConferenceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get shared conference data
     * If the logged in user is not register into the wanted room , a forbidden error is sent. Gives less data than the [GET /api/rainbow/confprovisioning/v1.0/conferences/{confEndpointId}][0]).   [0]: /conf-provision/#api-conferences-GetConference
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} confId Conference unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSharedConferenceSuccess} and HTTP response
     */
    this.getSharedConferenceWithHttpInfo = function(roomId, confId, accept) {
      var postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling getSharedConference");
      }
      // verify the required parameter 'confId' is set
      if (confId === undefined || confId === null) {
        throw new Error("Missing the required parameter 'confId' when calling getSharedConference");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSharedConference");
      }

      var pathParams = {
        'roomId': roomId,
        'confId': confId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSharedConferenceSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/conferences/{confId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get shared conference data
     * If the logged in user is not register into the wanted room , a forbidden error is sent. Gives less data than the [GET /api/rainbow/confprovisioning/v1.0/conferences/{confEndpointId}][0]).   [0]: /conf-provision/#api-conferences-GetConference
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} confId Conference unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSharedConferenceSuccess}
     */
    this.getSharedConference = function(roomId, confId, accept) {
      return this.getSharedConferenceWithHttpInfo(roomId, confId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Notify users to join a conference
     * Send a notification for users to join a conference. Mainly the notification is a mail indicating the conference phone number. Furthermore an XMPP event could be sent.
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} confId Conference unique identifier
     * @param {module:model/SendJoinConferenceInvitationEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendJoinConferenceInvitationEmailSuccess} and HTTP response
     */
    this.sendJoinConferenceInvitationEmailWithHttpInfo = function(roomId, confId, body) {
      var postBody = body;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling sendJoinConferenceInvitationEmail");
      }
      // verify the required parameter 'confId' is set
      if (confId === undefined || confId === null) {
        throw new Error("Missing the required parameter 'confId' when calling sendJoinConferenceInvitationEmail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendJoinConferenceInvitationEmail");
      }

      var pathParams = {
        'roomId': roomId,
        'confId': confId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendJoinConferenceInvitationEmailSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/conferences/{confId}/invitations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Notify users to join a conference
     * Send a notification for users to join a conference. Mainly the notification is a mail indicating the conference phone number. Furthermore an XMPP event could be sent.
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} confId Conference unique identifier
     * @param {module:model/SendJoinConferenceInvitationEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendJoinConferenceInvitationEmailSuccess}
     */
    this.sendJoinConferenceInvitationEmail = function(roomId, confId, body) {
      return this.sendJoinConferenceInvitationEmailWithHttpInfo(roomId, confId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Notify users cancel conference
     * Send a notification to users that a scheduled meeting is cancelled. The notification is a mail. 
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} confId Conference unique identifier
     * @param {String} accept application/json
     * @param {String} contentType application/json
     * @param {module:model/SendScheduledMeetingCancelationEmail} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noMail Bypass emails delivery. Supply instead all data available to build custom emails
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendScheduledMeetingCancelationEmailSuccess} and HTTP response
     */
    this.sendScheduledMeetingCancelationEmailWithHttpInfo = function(roomId, confId, accept, contentType, body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling sendScheduledMeetingCancelationEmail");
      }
      // verify the required parameter 'confId' is set
      if (confId === undefined || confId === null) {
        throw new Error("Missing the required parameter 'confId' when calling sendScheduledMeetingCancelationEmail");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling sendScheduledMeetingCancelationEmail");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sendScheduledMeetingCancelationEmail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendScheduledMeetingCancelationEmail");
      }

      var pathParams = {
        'roomId': roomId,
        'confId': confId
      };
      var queryParams = {
        'noMail': opts['noMail'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept,
        'content-type': contentType
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendScheduledMeetingCancelationEmailSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/conferences/{confId}/invitations', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Notify users cancel conference
     * Send a notification to users that a scheduled meeting is cancelled. The notification is a mail. 
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} confId Conference unique identifier
     * @param {String} accept application/json
     * @param {String} contentType application/json
     * @param {module:model/SendScheduledMeetingCancelationEmail} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noMail Bypass emails delivery. Supply instead all data available to build custom emails
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendScheduledMeetingCancelationEmailSuccess}
     */
    this.sendScheduledMeetingCancelationEmail = function(roomId, confId, accept, contentType, body, opts) {
      return this.sendScheduledMeetingCancelationEmailWithHttpInfo(roomId, confId, accept, contentType, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Share a conference
     * If the logged in user is not registed into the wanted room a (403) forbidden error is sent.   If the conference end point to add is already registered, a (409) conflict error is sent.   If the conference end point to add is already present in another room, it is detached from this room and attached to the room in the current request.    A message stanza is sent to all users of the room as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's display name shares an end point in the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name: 'conferenceAdd'                 userId: 'userId of the owner of the conference end point' />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {module:model/ShareConference} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ShareConferenceSuccess} and HTTP response
     */
    this.shareConferenceWithHttpInfo = function(roomId, body) {
      var postBody = body;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling shareConference");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling shareConference");
      }

      var pathParams = {
        'roomId': roomId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ShareConferenceSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/conferences', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Share a conference
     * If the logged in user is not registed into the wanted room a (403) forbidden error is sent.   If the conference end point to add is already registered, a (409) conflict error is sent.   If the conference end point to add is already present in another room, it is detached from this room and attached to the room in the current request.    A message stanza is sent to all users of the room as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's display name shares an end point in the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name: 'conferenceAdd'                 userId: 'userId of the owner of the conference end point' />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {module:model/ShareConference} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ShareConferenceSuccess}
     */
    this.shareConference = function(roomId, body) {
      return this.shareConferenceWithHttpInfo(roomId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop sharing a conference
     * Only an active moderator is allowed to remove it from the room. (privilege='moderator', status='active')   If the conference to delete is not registered, a (404) conflict error is sent.      A message stanza is sent to room users as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's display name stop to share an end point in the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name: 'conferenceRemove'                 userId: 'userId of the owner of the conference end point' />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} confId Conference unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} accept application/json
     * @param {String} mediaType {pstnAudio, webrtc} : If not defined a pstnAudio is taken as default value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StopConferenceSharingSuccess} and HTTP response
     */
    this.stopConferenceSharingWithHttpInfo = function(roomId, confId, accept, mediaType) {
      var postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling stopConferenceSharing");
      }
      // verify the required parameter 'confId' is set
      if (confId === undefined || confId === null) {
        throw new Error("Missing the required parameter 'confId' when calling stopConferenceSharing");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling stopConferenceSharing");
      }
      // verify the required parameter 'mediaType' is set
      if (mediaType === undefined || mediaType === null) {
        throw new Error("Missing the required parameter 'mediaType' when calling stopConferenceSharing");
      }

      var pathParams = {
        'roomId': roomId,
        'confId': confId
      };
      var queryParams = {
        'mediaType': mediaType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StopConferenceSharingSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/conferences/{confId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop sharing a conference
     * Only an active moderator is allowed to remove it from the room. (privilege='moderator', status='active')   If the conference to delete is not registered, a (404) conflict error is sent.      A message stanza is sent to room users as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's display name stop to share an end point in the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name: 'conferenceRemove'                 userId: 'userId of the owner of the conference end point' />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} confId Conference unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} accept application/json
     * @param {String} mediaType {pstnAudio, webrtc} : If not defined a pstnAudio is taken as default value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StopConferenceSharingSuccess}
     */
    this.stopConferenceSharing = function(roomId, confId, accept, mediaType) {
      return this.stopConferenceSharingWithHttpInfo(roomId, confId, accept, mediaType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
