/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminDeleteRainbowCatalogsFeaturesSuccess', 'model/AdminDeleteRainbowCatalogsServiceDescriptionSuccess', 'model/AdminDeleteRainbowCatalogsSuccess', 'model/AdminGetDefaultRainbowCatalogSuccess', 'model/AdminGetRainbowCatalogByIdSuccess', 'model/AdminGetRainbowCatalogsServiceDescriptionSuccess', 'model/AdminGetRainbowCatalogsSuccess', 'model/AdminPostRainbowCatalogs', 'model/AdminPostRainbowCatalogsFeaturesSuccess', 'model/AdminPostRainbowCatalogsServiceDescriptionSuccess', 'model/AdminPostRainbowCatalogsSuccess', 'model/AdminPutRainbowCatalogs', 'model/AdminPutRainbowCatalogsDefaultSuccess', 'model/AdminPutRainbowCatalogsSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminDeleteRainbowCatalogsFeaturesSuccess'), require('../model/AdminDeleteRainbowCatalogsServiceDescriptionSuccess'), require('../model/AdminDeleteRainbowCatalogsSuccess'), require('../model/AdminGetDefaultRainbowCatalogSuccess'), require('../model/AdminGetRainbowCatalogByIdSuccess'), require('../model/AdminGetRainbowCatalogsServiceDescriptionSuccess'), require('../model/AdminGetRainbowCatalogsSuccess'), require('../model/AdminPostRainbowCatalogs'), require('../model/AdminPostRainbowCatalogsFeaturesSuccess'), require('../model/AdminPostRainbowCatalogsServiceDescriptionSuccess'), require('../model/AdminPostRainbowCatalogsSuccess'), require('../model/AdminPutRainbowCatalogs'), require('../model/AdminPutRainbowCatalogsDefaultSuccess'), require('../model/AdminPutRainbowCatalogsSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.RainbowCatalogsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminDeleteRainbowCatalogsFeaturesSuccess, root.RainbowAdminPortal.AdminDeleteRainbowCatalogsServiceDescriptionSuccess, root.RainbowAdminPortal.AdminDeleteRainbowCatalogsSuccess, root.RainbowAdminPortal.AdminGetDefaultRainbowCatalogSuccess, root.RainbowAdminPortal.AdminGetRainbowCatalogByIdSuccess, root.RainbowAdminPortal.AdminGetRainbowCatalogsServiceDescriptionSuccess, root.RainbowAdminPortal.AdminGetRainbowCatalogsSuccess, root.RainbowAdminPortal.AdminPostRainbowCatalogs, root.RainbowAdminPortal.AdminPostRainbowCatalogsFeaturesSuccess, root.RainbowAdminPortal.AdminPostRainbowCatalogsServiceDescriptionSuccess, root.RainbowAdminPortal.AdminPostRainbowCatalogsSuccess, root.RainbowAdminPortal.AdminPutRainbowCatalogs, root.RainbowAdminPortal.AdminPutRainbowCatalogsDefaultSuccess, root.RainbowAdminPortal.AdminPutRainbowCatalogsSuccess);
  }
}(this, function(ApiClient, AdminDeleteRainbowCatalogsFeaturesSuccess, AdminDeleteRainbowCatalogsServiceDescriptionSuccess, AdminDeleteRainbowCatalogsSuccess, AdminGetDefaultRainbowCatalogSuccess, AdminGetRainbowCatalogByIdSuccess, AdminGetRainbowCatalogsServiceDescriptionSuccess, AdminGetRainbowCatalogsSuccess, AdminPostRainbowCatalogs, AdminPostRainbowCatalogsFeaturesSuccess, AdminPostRainbowCatalogsServiceDescriptionSuccess, AdminPostRainbowCatalogsSuccess, AdminPutRainbowCatalogs, AdminPutRainbowCatalogsDefaultSuccess, AdminPutRainbowCatalogsSuccess) {
  'use strict';

  /**
   * RainbowCatalogs service.
   * @module api/RainbowCatalogsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new RainbowCatalogsApi. 
   * @alias module:api/RainbowCatalogsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a catalog
     * This API can be used to delete a catalog.    Deletion of catalogs is not allowed if this catalog is associated to company(ies).    Deletion of default catalog is not allowed.
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminDeleteRainbowCatalogsSuccess} and HTTP response
     */
    this.adminDeleteRainbowCatalogsWithHttpInfo = function(catalogId, accept) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminDeleteRainbowCatalogs");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminDeleteRainbowCatalogs");
      }

      var pathParams = {
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminDeleteRainbowCatalogsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/{catalogId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a catalog
     * This API can be used to delete a catalog.    Deletion of catalogs is not allowed if this catalog is associated to company(ies).    Deletion of default catalog is not allowed.
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminDeleteRainbowCatalogsSuccess}
     */
    this.adminDeleteRainbowCatalogs = function(catalogId, accept) {
      return this.adminDeleteRainbowCatalogsWithHttpInfo(catalogId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an offer from a catalog
     * This API can be used to remove an offer from a catalog.    Example: DELETE https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/offers/58072f646237427a3687dc90
     * @param {String} offerId Unique identifier of the offer to remove from the catalog.
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminDeleteRainbowCatalogsFeaturesSuccess} and HTTP response
     */
    this.adminDeleteRainbowCatalogsFeaturesWithHttpInfo = function(offerId, catalogId, accept) {
      var postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling adminDeleteRainbowCatalogsFeatures");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminDeleteRainbowCatalogsFeatures");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminDeleteRainbowCatalogsFeatures");
      }

      var pathParams = {
        'offerId': offerId,
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminDeleteRainbowCatalogsFeaturesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/{catalogId}/offers/{offerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove an offer from a catalog
     * This API can be used to remove an offer from a catalog.    Example: DELETE https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/offers/58072f646237427a3687dc90
     * @param {String} offerId Unique identifier of the offer to remove from the catalog.
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminDeleteRainbowCatalogsFeaturesSuccess}
     */
    this.adminDeleteRainbowCatalogsFeatures = function(offerId, catalogId, accept) {
      return this.adminDeleteRainbowCatalogsFeaturesWithHttpInfo(offerId, catalogId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a service description file
     * This API can be used to delete a service description linked to a catalog.    Example: DELETE https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/service-description
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminDeleteRainbowCatalogsServiceDescriptionSuccess} and HTTP response
     */
    this.adminDeleteRainbowCatalogsServiceDescriptionWithHttpInfo = function(catalogId, accept) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminDeleteRainbowCatalogsServiceDescription");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminDeleteRainbowCatalogsServiceDescription");
      }

      var pathParams = {
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminDeleteRainbowCatalogsServiceDescriptionSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/{catalogId}/service-description', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a service description file
     * This API can be used to delete a service description linked to a catalog.    Example: DELETE https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/service-description
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminDeleteRainbowCatalogsServiceDescriptionSuccess}
     */
    this.adminDeleteRainbowCatalogsServiceDescription = function(catalogId, accept) {
      return this.adminDeleteRainbowCatalogsServiceDescriptionWithHttpInfo(catalogId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get default catalog
     * Get the default Rainbow catalog    Default catalog is the catalog which is automatically assigned to newly created companies.       `superadmin` can change the catalog associated to a given company using API [PUT /api/rainbow/admin/v1.0/companies/{companyId}][0].  [0]: #api-companies-PutCompanies
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminGetDefaultRainbowCatalogSuccess} and HTTP response
     */
    this.adminGetDefaultRainbowCatalogWithHttpInfo = function(accept) {
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminGetDefaultRainbowCatalog");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminGetDefaultRainbowCatalogSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/default', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get default catalog
     * Get the default Rainbow catalog    Default catalog is the catalog which is automatically assigned to newly created companies.       `superadmin` can change the catalog associated to a given company using API [PUT /api/rainbow/admin/v1.0/companies/{companyId}][0].  [0]: #api-companies-PutCompanies
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminGetDefaultRainbowCatalogSuccess}
     */
    this.adminGetDefaultRainbowCatalog = function(accept) {
      return this.adminGetDefaultRainbowCatalogWithHttpInfo(accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a catalog
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminGetRainbowCatalogByIdSuccess} and HTTP response
     */
    this.adminGetRainbowCatalogByIdWithHttpInfo = function(catalogId, accept) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminGetRainbowCatalogById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminGetRainbowCatalogById");
      }

      var pathParams = {
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminGetRainbowCatalogByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalog/{catalogId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a catalog
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminGetRainbowCatalogByIdSuccess}
     */
    this.adminGetRainbowCatalogById = function(catalogId, accept) {
      return this.adminGetRainbowCatalogByIdWithHttpInfo(catalogId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all catalogs
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less catalog details in response.    - `small`: id name    - `medium`: id name description isDefault    - `full`: all offer fields
     * @param {String} opts.name Allows to filter catalog list on field name.
     * @param {Boolean} opts.isDefault Allows to filter catalog list on field isDefault.
     * @param {String} opts.offerId Allows to filter catalog list on field offersList (allow to list catalogs having a given offerId in their offersList).
     * @param {Number} opts.limit Allow to specify the number of catalogs to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first catalog to retrieve (first catalog if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort catalog list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting catalog list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminGetRainbowCatalogsSuccess} and HTTP response
     */
    this.adminGetRainbowCatalogsWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminGetRainbowCatalogs");
      }

      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'name': opts['name'],
        'isDefault': opts['isDefault'],
        'offerId': opts['offerId'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminGetRainbowCatalogsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all catalogs
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less catalog details in response.    - `small`: id name    - `medium`: id name description isDefault    - `full`: all offer fields
     * @param {String} opts.name Allows to filter catalog list on field name.
     * @param {Boolean} opts.isDefault Allows to filter catalog list on field isDefault.
     * @param {String} opts.offerId Allows to filter catalog list on field offersList (allow to list catalogs having a given offerId in their offersList).
     * @param {Number} opts.limit Allow to specify the number of catalogs to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first catalog to retrieve (first catalog if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort catalog list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting catalog list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminGetRainbowCatalogsSuccess}
     */
    this.adminGetRainbowCatalogs = function(accept, opts) {
      return this.adminGetRainbowCatalogsWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a service description file
     * This API can be used to get a service description pdf file linked to a catalog.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/service-description
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminGetRainbowCatalogsServiceDescriptionSuccess} and HTTP response
     */
    this.adminGetRainbowCatalogsServiceDescriptionWithHttpInfo = function(catalogId, accept) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminGetRainbowCatalogsServiceDescription");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminGetRainbowCatalogsServiceDescription");
      }

      var pathParams = {
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminGetRainbowCatalogsServiceDescriptionSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/{catalogId}/service-description', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a service description file
     * This API can be used to get a service description pdf file linked to a catalog.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/service-description
     * @param {String} catalogId Catalog unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminGetRainbowCatalogsServiceDescriptionSuccess}
     */
    this.adminGetRainbowCatalogsServiceDescription = function(catalogId, accept) {
      return this.adminGetRainbowCatalogsServiceDescriptionWithHttpInfo(catalogId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a catalog
     * This API can be used to create a catalog.
     * @param {module:model/AdminPostRainbowCatalogs} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostRainbowCatalogsSuccess} and HTTP response
     */
    this.adminPostRainbowCatalogsWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminPostRainbowCatalogs");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminPostRainbowCatalogsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a catalog
     * This API can be used to create a catalog.
     * @param {module:model/AdminPostRainbowCatalogs} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostRainbowCatalogsSuccess}
     */
    this.adminPostRainbowCatalogs = function(body) {
      return this.adminPostRainbowCatalogsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an offer to a catalog
     * This API can be used to add an offer to a catalog.    Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/offers/58072f646237427a3687dc90
     * @param {String} offerId Unique identifier of the offer to add in the catalog.
     * @param {String} catalogId Catalog unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostRainbowCatalogsFeaturesSuccess} and HTTP response
     */
    this.adminPostRainbowCatalogsFeaturesWithHttpInfo = function(offerId, catalogId) {
      var postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling adminPostRainbowCatalogsFeatures");
      }
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminPostRainbowCatalogsFeatures");
      }

      var pathParams = {
        'offerId': offerId,
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminPostRainbowCatalogsFeaturesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/{catalogId}/offers/{offerId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add an offer to a catalog
     * This API can be used to add an offer to a catalog.    Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/offers/58072f646237427a3687dc90
     * @param {String} offerId Unique identifier of the offer to add in the catalog.
     * @param {String} catalogId Catalog unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostRainbowCatalogsFeaturesSuccess}
     */
    this.adminPostRainbowCatalogsFeatures = function(offerId, catalogId) {
      return this.adminPostRainbowCatalogsFeaturesWithHttpInfo(offerId, catalogId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a service description file
     * This API can be used to upload a service description pdf file linked to a catalog.    Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/service-description    Rules:   * Service description file has to be sent directly in http body (no JSon). * Only .pdf format is supported. * By default, pdf file size is limited to 10 MB. * Content-type should be set to 'application/pdf' in request header.  
     * @param {String} catalogId Catalog unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostRainbowCatalogsServiceDescriptionSuccess} and HTTP response
     */
    this.adminPostRainbowCatalogsServiceDescriptionWithHttpInfo = function(catalogId) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminPostRainbowCatalogsServiceDescription");
      }

      var pathParams = {
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminPostRainbowCatalogsServiceDescriptionSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/{catalogId}/service-description', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a service description file
     * This API can be used to upload a service description pdf file linked to a catalog.    Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/catalogs/5984494643af69df7fda80e8/service-description    Rules:   * Service description file has to be sent directly in http body (no JSon). * Only .pdf format is supported. * By default, pdf file size is limited to 10 MB. * Content-type should be set to 'application/pdf' in request header.  
     * @param {String} catalogId Catalog unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostRainbowCatalogsServiceDescriptionSuccess}
     */
    this.adminPostRainbowCatalogsServiceDescription = function(catalogId) {
      return this.adminPostRainbowCatalogsServiceDescriptionWithHttpInfo(catalogId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a catalog
     * This API can be used to update a catalog.
     * @param {String} catalogId Catalog unique identifier.
     * @param {module:model/AdminPutRainbowCatalogs} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPutRainbowCatalogsSuccess} and HTTP response
     */
    this.adminPutRainbowCatalogsWithHttpInfo = function(catalogId, body) {
      var postBody = body;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminPutRainbowCatalogs");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminPutRainbowCatalogs");
      }

      var pathParams = {
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminPutRainbowCatalogsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/{catalogId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a catalog
     * This API can be used to update a catalog.
     * @param {String} catalogId Catalog unique identifier.
     * @param {module:model/AdminPutRainbowCatalogs} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPutRainbowCatalogsSuccess}
     */
    this.adminPutRainbowCatalogs = function(catalogId, body) {
      return this.adminPutRainbowCatalogsWithHttpInfo(catalogId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set a catalog as default
     * This API can be used to change default Rainbow catalog.    The flag isDefault of previous default catalog is set to false, and the flag isDefault of the specified catalog is set to true.    Previous default catalog stays the default catalog for companies having already this catalog as default.
     * @param {String} catalogId Catalog unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPutRainbowCatalogsDefaultSuccess} and HTTP response
     */
    this.adminPutRainbowCatalogsDefaultWithHttpInfo = function(catalogId) {
      var postBody = null;
      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling adminPutRainbowCatalogsDefault");
      }

      var pathParams = {
        'catalogId': catalogId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminPutRainbowCatalogsDefaultSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/catalogs/default/{catalogId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set a catalog as default
     * This API can be used to change default Rainbow catalog.    The flag isDefault of previous default catalog is set to false, and the flag isDefault of the specified catalog is set to true.    Previous default catalog stays the default catalog for companies having already this catalog as default.
     * @param {String} catalogId Catalog unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPutRainbowCatalogsDefaultSuccess}
     */
    this.adminPutRainbowCatalogsDefault = function(catalogId) {
      return this.adminPutRainbowCatalogsDefaultWithHttpInfo(catalogId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
