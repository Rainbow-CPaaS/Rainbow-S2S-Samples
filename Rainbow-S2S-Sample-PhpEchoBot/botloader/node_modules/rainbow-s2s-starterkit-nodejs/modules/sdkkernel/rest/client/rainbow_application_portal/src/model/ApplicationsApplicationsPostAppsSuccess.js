/**
 * Rainbow Application Portal
 * # Rainbow application portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow Application portal. This portal is dedicated to app features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.78.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowApplicationPortal) {
      root.RainbowApplicationPortal = {};
    }
    root.RainbowApplicationPortal.ApplicationsApplicationsPostAppsSuccess = factory(root.RainbowApplicationPortal.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The ApplicationsApplicationsPostAppsSuccess model module.
   * @module model/ApplicationsApplicationsPostAppsSuccess
   * @version 1.78.0
   */

  /**
   * Constructs a new <code>ApplicationsApplicationsPostAppsSuccess</code>.
   * @alias module:model/ApplicationsApplicationsPostAppsSuccess
   * @class
   * @param appId {String} Application unique identifier.
   * @param appSecret {String} Application secret token.
   * @param origin {String} Application origin.
   * @param name {String} Application title.
   * @param latinName {String} Application latin name.
   * @param ownerId {String} Unique identifier of the application owner.
   * @param dateOfCreation {Date} Date of creation of the application.
   * @param dateOfDeploymentRequest {Date} Date of deployment request of the application.
   * @param dateOfDeployment {Date} Date of deployment of the application.
   * @param state {module:model/ApplicationsApplicationsPostAppsSuccess.StateEnum} State of the application.
   * @param type {module:model/ApplicationsApplicationsPostAppsSuccess.TypeEnum} Application type.
   * @param activity {module:model/ApplicationsApplicationsPostAppsSuccess.ActivityEnum} * `A`: AGRICULTURE, FORESTRY AND FISHING * `B`: MINING AND QUARRYING * `C`: MANUFACTURING * `D`: ELECTRICITY, GAS, STEAM AND AIR CONDITIONING SUPPLY * `E`: WATER SUPPLY; SEWERAGE, WASTE MANAGEMENT AND REMEDIATION ACTIVITIES * `F`: CONSTRUCTION * `G`: WHOLESALE AND RETAIL TRADE; REPAIR OF MOTOR VEHICLES AND MOTORCYCLES * `H`: TRANSPORTATION AND STORAGE * `I`: ACCOMMODATION AND FOOD SERVICE ACTIVITIES * `J`: INFORMATION AND COMMUNICATION * `K`: FINANCIAL AND INSURANCE ACTIVITIES * `L`: REAL ESTATE ACTIVITIES * `M`: PROFESSIONAL, SCIENTIFIC AND TECHNICAL ACTIVITIES * `N`: ADMINISTRATIVE AND SUPPORT SERVICE ACTIVITIES * `O`: PUBLIC ADMINISTRATION AND DEFENCE; COMPULSORY SOCIAL SECURITY * `P`: EDUCATION * `Q`: HUMAN HEALTH AND SOCIAL WORK ACTIVITIES * `R`: ARTS, ENTERTAINMENT AND RECREATION * `S`: OTHER SERVICE ACTIVITIES * `T`: ACTIVITIES OF HOUSEHOLDS AS EMPLOYERS; UNDIFFERENTIATED GOODS- AND SERVICES-PRODUCING ACTIVITIES OF HOUSEHOLDS FOR OWN USE * `U`: ACTIVITIES OF EXTRATERRITORIAL ORGANISATIONS AND BODIES 
   * @param env {module:model/ApplicationsApplicationsPostAppsSuccess.EnvEnum} Environnement where the application is deploy.
   */
  var exports = function(appId, appSecret, origin, name, latinName, ownerId, dateOfCreation, dateOfDeploymentRequest, dateOfDeployment, state, type, activity, env) {
    var _this = this;

    _this['appId'] = appId;
    _this['appSecret'] = appSecret;
    _this['origin'] = origin;
    _this['name'] = name;
    _this['latin_name'] = latinName;
    _this['ownerId'] = ownerId;
    _this['dateOfCreation'] = dateOfCreation;
    _this['dateOfDeploymentRequest'] = dateOfDeploymentRequest;
    _this['dateOfDeployment'] = dateOfDeployment;
    _this['state'] = state;
    _this['type'] = type;
    _this['activity'] = activity;
    _this['env'] = env;
  };

  /**
   * Constructs a <code>ApplicationsApplicationsPostAppsSuccess</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ApplicationsApplicationsPostAppsSuccess} obj Optional instance to populate.
   * @return {module:model/ApplicationsApplicationsPostAppsSuccess} The populated <code>ApplicationsApplicationsPostAppsSuccess</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('appId')) {
        obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
      }
      if (data.hasOwnProperty('appSecret')) {
        obj['appSecret'] = ApiClient.convertToType(data['appSecret'], 'String');
      }
      if (data.hasOwnProperty('origin')) {
        obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('latin_name')) {
        obj['latin_name'] = ApiClient.convertToType(data['latin_name'], 'String');
      }
      if (data.hasOwnProperty('ownerId')) {
        obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
      }
      if (data.hasOwnProperty('dateOfCreation')) {
        obj['dateOfCreation'] = ApiClient.convertToType(data['dateOfCreation'], 'Date');
      }
      if (data.hasOwnProperty('dateOfDeploymentRequest')) {
        obj['dateOfDeploymentRequest'] = ApiClient.convertToType(data['dateOfDeploymentRequest'], 'Date');
      }
      if (data.hasOwnProperty('dateOfDeployment')) {
        obj['dateOfDeployment'] = ApiClient.convertToType(data['dateOfDeployment'], 'Date');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('activity')) {
        obj['activity'] = ApiClient.convertToType(data['activity'], 'String');
      }
      if (data.hasOwnProperty('env')) {
        obj['env'] = ApiClient.convertToType(data['env'], 'String');
      }
    }
    return obj;
  }

  /**
   * Application unique identifier.
   * @member {String} appId
   */
  exports.prototype['appId'] = undefined;
  /**
   * Application secret token.
   * @member {String} appSecret
   */
  exports.prototype['appSecret'] = undefined;
  /**
   * Application origin.
   * @member {String} origin
   */
  exports.prototype['origin'] = undefined;
  /**
   * Application title.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Application latin name.
   * @member {String} latin_name
   */
  exports.prototype['latin_name'] = undefined;
  /**
   * Unique identifier of the application owner.
   * @member {String} ownerId
   */
  exports.prototype['ownerId'] = undefined;
  /**
   * Date of creation of the application.
   * @member {Date} dateOfCreation
   */
  exports.prototype['dateOfCreation'] = undefined;
  /**
   * Date of deployment request of the application.
   * @member {Date} dateOfDeploymentRequest
   */
  exports.prototype['dateOfDeploymentRequest'] = undefined;
  /**
   * Date of deployment of the application.
   * @member {Date} dateOfDeployment
   */
  exports.prototype['dateOfDeployment'] = undefined;
  /**
   * State of the application.
   * @member {module:model/ApplicationsApplicationsPostAppsSuccess.StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * Application type.
   * @member {module:model/ApplicationsApplicationsPostAppsSuccess.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * * `A`: AGRICULTURE, FORESTRY AND FISHING * `B`: MINING AND QUARRYING * `C`: MANUFACTURING * `D`: ELECTRICITY, GAS, STEAM AND AIR CONDITIONING SUPPLY * `E`: WATER SUPPLY; SEWERAGE, WASTE MANAGEMENT AND REMEDIATION ACTIVITIES * `F`: CONSTRUCTION * `G`: WHOLESALE AND RETAIL TRADE; REPAIR OF MOTOR VEHICLES AND MOTORCYCLES * `H`: TRANSPORTATION AND STORAGE * `I`: ACCOMMODATION AND FOOD SERVICE ACTIVITIES * `J`: INFORMATION AND COMMUNICATION * `K`: FINANCIAL AND INSURANCE ACTIVITIES * `L`: REAL ESTATE ACTIVITIES * `M`: PROFESSIONAL, SCIENTIFIC AND TECHNICAL ACTIVITIES * `N`: ADMINISTRATIVE AND SUPPORT SERVICE ACTIVITIES * `O`: PUBLIC ADMINISTRATION AND DEFENCE; COMPULSORY SOCIAL SECURITY * `P`: EDUCATION * `Q`: HUMAN HEALTH AND SOCIAL WORK ACTIVITIES * `R`: ARTS, ENTERTAINMENT AND RECREATION * `S`: OTHER SERVICE ACTIVITIES * `T`: ACTIVITIES OF HOUSEHOLDS AS EMPLOYERS; UNDIFFERENTIATED GOODS- AND SERVICES-PRODUCING ACTIVITIES OF HOUSEHOLDS FOR OWN USE * `U`: ACTIVITIES OF EXTRATERRITORIAL ORGANISATIONS AND BODIES 
   * @member {module:model/ApplicationsApplicationsPostAppsSuccess.ActivityEnum} activity
   */
  exports.prototype['activity'] = undefined;
  /**
   * Environnement where the application is deploy.
   * @member {module:model/ApplicationsApplicationsPostAppsSuccess.EnvEnum} env
   */
  exports.prototype['env'] = undefined;


  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "new"
     * @const
     */
    "new": "new",
    /**
     * value: "active"
     * @const
     */
    "active": "active",
    /**
     * value: "blocked"
     * @const
     */
    "blocked": "blocked",
    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",
    /**
     * value: "stopped"
     * @const
     */
    "stopped": "stopped"  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "web"
     * @const
     */
    "web": "web",
    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",
    /**
     * value: "desktop"
     * @const
     */
    "desktop": "desktop",
    /**
     * value: "server"
     * @const
     */
    "server": "server",
    /**
     * value: "bot"
     * @const
     */
    "bot": "bot",
    /**
     * value: "iot"
     * @const
     */
    "iot": "iot",
    /**
     * value: "admin"
     * @const
     */
    "admin": "admin"  };

  /**
   * Allowed values for the <code>activity</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ActivityEnum = {
    /**
     * value: "A"
     * @const
     */
    "A": "A",
    /**
     * value: "B"
     * @const
     */
    "B": "B",
    /**
     * value: "C"
     * @const
     */
    "C": "C",
    /**
     * value: "D"
     * @const
     */
    "D": "D",
    /**
     * value: "E"
     * @const
     */
    "E": "E",
    /**
     * value: "F"
     * @const
     */
    "F": "F",
    /**
     * value: "G"
     * @const
     */
    "G": "G",
    /**
     * value: "H"
     * @const
     */
    "H": "H",
    /**
     * value: "I"
     * @const
     */
    "I": "I",
    /**
     * value: "J"
     * @const
     */
    "J": "J",
    /**
     * value: "K"
     * @const
     */
    "K": "K",
    /**
     * value: "L"
     * @const
     */
    "L": "L",
    /**
     * value: "M"
     * @const
     */
    "M": "M",
    /**
     * value: "N"
     * @const
     */
    "N": "N",
    /**
     * value: "O"
     * @const
     */
    "O": "O",
    /**
     * value: "P"
     * @const
     */
    "P": "P",
    /**
     * value: "Q"
     * @const
     */
    "Q": "Q",
    /**
     * value: "R"
     * @const
     */
    "R": "R",
    /**
     * value: "S"
     * @const
     */
    "S": "S",
    /**
     * value: "T"
     * @const
     */
    "T": "T",
    /**
     * value: "U"
     * @const
     */
    "U": "U"  };

  /**
   * Allowed values for the <code>env</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EnvEnum = {
    /**
     * value: "not_deployed"
     * @const
     */
    "not_deployed": "not_deployed",
    /**
     * value: "in_deployment"
     * @const
     */
    "in_deployment": "in_deployment",
    /**
     * value: "deployed"
     * @const
     */
    "deployed": "deployed"  };


  return exports;
}));


