/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminPutRainbowOffersProvisioningNeeded'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AdminPutRainbowOffersProvisioningNeeded'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.AdminPutRainbowOffers = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminPutRainbowOffersProvisioningNeeded);
  }
}(this, function(ApiClient, AdminPutRainbowOffersProvisioningNeeded) {
  'use strict';



  /**
   * The AdminPutRainbowOffers model module.
   * @module model/AdminPutRainbowOffers
   * @version 1.82.0
   */

  /**
   * Constructs a new <code>AdminPutRainbowOffers</code>.
   * @alias module:model/AdminPutRainbowOffers
   * @class
   * @param profileId {String} Id of the profile linked to this offer.
   */
  var exports = function(profileId) {
    var _this = this;

    _this['profileId'] = profileId;
  };

  /**
   * Constructs a <code>AdminPutRainbowOffers</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AdminPutRainbowOffers} obj Optional instance to populate.
   * @return {module:model/AdminPutRainbowOffers} The populated <code>AdminPutRainbowOffers</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('technicalDescription')) {
        obj['technicalDescription'] = ApiClient.convertToType(data['technicalDescription'], 'String');
      }
      if (data.hasOwnProperty('profileId')) {
        obj['profileId'] = ApiClient.convertToType(data['profileId'], 'String');
      }
      if (data.hasOwnProperty('canBeSold')) {
        obj['canBeSold'] = ApiClient.convertToType(data['canBeSold'], 'Boolean');
      }
      if (data.hasOwnProperty('businessModel')) {
        obj['businessModel'] = ApiClient.convertToType(data['businessModel'], 'String');
      }
      if (data.hasOwnProperty('businessSpecific')) {
        obj['businessSpecific'] = ApiClient.convertToType(data['businessSpecific'], ['String']);
      }
      if (data.hasOwnProperty('autoSubscribe')) {
        obj['autoSubscribe'] = ApiClient.convertToType(data['autoSubscribe'], 'Boolean');
      }
      if (data.hasOwnProperty('isExclusive')) {
        obj['isExclusive'] = ApiClient.convertToType(data['isExclusive'], 'Boolean');
      }
      if (data.hasOwnProperty('provisioningNeeded')) {
        obj['provisioningNeeded'] = ApiClient.convertToType(data['provisioningNeeded'], [AdminPutRainbowOffersProvisioningNeeded]);
      }
      if (data.hasOwnProperty('zuoraOfferId')) {
        obj['zuoraOfferId'] = ApiClient.convertToType(data['zuoraOfferId'], 'String');
      }
      if (data.hasOwnProperty('zuoraProductRatePlanId')) {
        obj['zuoraProductRatePlanId'] = ApiClient.convertToType(data['zuoraProductRatePlanId'], 'String');
      }
      if (data.hasOwnProperty('zuoraProductRatePlanChargeId')) {
        obj['zuoraProductRatePlanChargeId'] = ApiClient.convertToType(data['zuoraProductRatePlanChargeId'], 'String');
      }
      if (data.hasOwnProperty('sapReference')) {
        obj['sapReference'] = ApiClient.convertToType(data['sapReference'], 'String');
      }
      if (data.hasOwnProperty('offerReference')) {
        obj['offerReference'] = ApiClient.convertToType(data['offerReference'], 'String');
      }
      if (data.hasOwnProperty('isPrepaid')) {
        obj['isPrepaid'] = ApiClient.convertToType(data['isPrepaid'], 'Boolean');
      }
      if (data.hasOwnProperty('prepaidDuration')) {
        obj['prepaidDuration'] = ApiClient.convertToType(data['prepaidDuration'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Offer name.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Offer description.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Offer technical description.    `technicalDescription` must be unique.
   * @member {String} technicalDescription
   */
  exports.prototype['technicalDescription'] = undefined;
  /**
   * Id of the profile linked to this offer.
   * @member {String} profileId
   */
  exports.prototype['profileId'] = undefined;
  /**
   * Indicates if the offer can be sold to customers.    Some offers will not be sold (Essential, Beta, ...).    If canBeSold is true, zuoraOfferId, zuoraProductRatePlanId and zuoraProductRatePlanChargeId have to be set.
   * @member {Boolean} canBeSold
   * @default false
   */
  exports.prototype['canBeSold'] = false;
  /**
   * Indicates the business model associated to this offer (number of users, usage, ...)   * `nb_users`: Licencing business model. Offers having this business model are billed according to the number of users bought for it. This should be the business model for Business and Enterprise offers. * `usage`: Offers having this business model are billed based on service consumption (whatever the number of users assigned to the subscription of this offer). This should be the business model for Conference offer. * `flat_fee`: Offers having this business model are billed based on a flat fee (same price each month for the company which subscribe to this offer). This should be the business model for some specific business offers like HDS. * `none`: no business model. Should be used for offers which are not sold (like Essential, Beta, ...).  
   * @member {module:model/AdminPutRainbowOffers.BusinessModelEnum} businessModel
   * @default 'none'
   */
  exports.prototype['businessModel'] = 'none';
  /**
   * Indicates if the offer is related to specific(s) business (for verticals like HDS)   * `NONE`: This offer can be used if the company does not have a businessSpecific field. * `HDS`: This offer can only used if the company have a businessSpecific HDS (HealthCare).  
   * @member {Array.<String>} businessSpecific
   */
  exports.prototype['businessSpecific'] = undefined;
  /**
   * Indicates if the offer has to be automatically subscribed at company creation.
   * @member {Boolean} autoSubscribe
   * @default false
   */
  exports.prototype['autoSubscribe'] = false;
  /**
   * Indicates if the offer is exclusive for assignation to a user profile (if the user has already an exclusive offer assigned, it won't be possible to assign a second exclusive offer).
   * @member {Boolean} isExclusive
   * @default false
   */
  exports.prototype['isExclusive'] = false;
  /**
   * Array of Objects which indicates if account must be provisioned on other components when subscribing to this offer.
   * @member {Array.<module:model/AdminPutRainbowOffersProvisioningNeeded>} provisioningNeeded
   */
  exports.prototype['provisioningNeeded'] = undefined;
  /**
   * ID of the related offer in Zuora (if offer can be sold)
   * @member {String} zuoraOfferId
   */
  exports.prototype['zuoraOfferId'] = undefined;
  /**
   * ID of the ProductRatePlanId to use when creating a subscription for the related offer in Zuora (if offer can be sold)
   * @member {String} zuoraProductRatePlanId
   */
  exports.prototype['zuoraProductRatePlanId'] = undefined;
  /**
   * ID of the ProductRatePlanChargeId to use when creating a subscription for the related offer in Zuora (if offer can be sold)
   * @member {String} zuoraProductRatePlanChargeId
   */
  exports.prototype['zuoraProductRatePlanChargeId'] = undefined;
  /**
   * Reference of the offer on SAP side.
   * @member {String} sapReference
   */
  exports.prototype['sapReference'] = undefined;
  /**
   * Key used for referencing the offer. Well know offer References are: RB-Essential, RB-Business, RB-Enterprise, RB-Conference.
   * @member {String} offerReference
   */
  exports.prototype['offerReference'] = undefined;
  /**
   * Indicates if the offer is a prepaid offer
   * @member {Boolean} isPrepaid
   */
  exports.prototype['isPrepaid'] = undefined;
  /**
   * Prepaid offer duration (in month). Mandatory if isPrepaid has been set
   * @member {Number} prepaidDuration
   */
  exports.prototype['prepaidDuration'] = undefined;


  /**
   * Allowed values for the <code>businessModel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.BusinessModelEnum = {
    /**
     * value: "nb_users"
     * @const
     */
    "nb_users": "nb_users",
    /**
     * value: "usage"
     * @const
     */
    "usage": "usage",
    /**
     * value: "flat_fee"
     * @const
     */
    "flat_fee": "flat_fee",
    /**
     * value: "none"
     * @const
     */
    "none": "none"  };


  return exports;
}));


