/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminPostAcceptLinkEcToBpRequestSuccess', 'model/AdminPostDeclineLinkEcToBpRequestSuccess', 'model/AdminPostLinkEcToBpRequest', 'model/AdminPostLinkEcToBpRequestSuccess', 'model/GetLinkECToBPRequestByIdSuccess', 'model/GetLinkECToBPRequestsSuccess', 'model/PostCancelLinkEcToBpRequestByIdSuccess', 'model/ResendLinkEcToBpRequestById', 'model/ResendLinkEcToBpRequestByIdSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminPostAcceptLinkEcToBpRequestSuccess'), require('../model/AdminPostDeclineLinkEcToBpRequestSuccess'), require('../model/AdminPostLinkEcToBpRequest'), require('../model/AdminPostLinkEcToBpRequestSuccess'), require('../model/GetLinkECToBPRequestByIdSuccess'), require('../model/GetLinkECToBPRequestsSuccess'), require('../model/PostCancelLinkEcToBpRequestByIdSuccess'), require('../model/ResendLinkEcToBpRequestById'), require('../model/ResendLinkEcToBpRequestByIdSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.LinkEcToBpRequestsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminPostAcceptLinkEcToBpRequestSuccess, root.RainbowAdminPortal.AdminPostDeclineLinkEcToBpRequestSuccess, root.RainbowAdminPortal.AdminPostLinkEcToBpRequest, root.RainbowAdminPortal.AdminPostLinkEcToBpRequestSuccess, root.RainbowAdminPortal.GetLinkECToBPRequestByIdSuccess, root.RainbowAdminPortal.GetLinkECToBPRequestsSuccess, root.RainbowAdminPortal.PostCancelLinkEcToBpRequestByIdSuccess, root.RainbowAdminPortal.ResendLinkEcToBpRequestById, root.RainbowAdminPortal.ResendLinkEcToBpRequestByIdSuccess);
  }
}(this, function(ApiClient, AdminPostAcceptLinkEcToBpRequestSuccess, AdminPostDeclineLinkEcToBpRequestSuccess, AdminPostLinkEcToBpRequest, AdminPostLinkEcToBpRequestSuccess, GetLinkECToBPRequestByIdSuccess, GetLinkECToBPRequestsSuccess, PostCancelLinkEcToBpRequestByIdSuccess, ResendLinkEcToBpRequestById, ResendLinkEcToBpRequestByIdSuccess) {
  'use strict';

  /**
   * LinkEcToBpRequests service.
   * @module api/LinkEcToBpRequestsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new LinkEcToBpRequestsApi. 
   * @alias module:api/LinkEcToBpRequestsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Accept a request
     * This API allows to accept a request received by bp admins of a BP company (request sent by bp_admin or company_admin using API [POST /api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests][0]). Request must be in status pending. Otherwise accept request will be rejected with a 409 Conflict error The `companyId` provided in URL should be the BP companyId. Otherwise, accept request will be rejected with a 400 Bad Request error. Once accepted, requesting company's `bpId` is updated with the id of the BP company. If company requested to be BP IR (requestedToBeBpIr=true), requesting company's `isBP` and `bpType` are updated to true and `IR`. If request was done to be BP IR by an admin only `company_admin`, this admin will be promoted to `bp_admin` and `bp_finance` of the requesting company. When a bp_admin accepts a request, EC company administrators and BP company administrators are notified with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"update\" id='582048dfe2e68a79f4979624'       status='accepted' type='received' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/573b46a305a4c22a19b216ce/bp-link/requests/5819ed7c9547b313509237d6/accept  [0]: /admin/#api-link_EC_to_BP_requests-admin_PostLinkEcToBpRequest
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostAcceptLinkEcToBpRequestSuccess} and HTTP response
     */
    this.adminPostAcceptLinkEcToBpRequestWithHttpInfo = function(companyId, requestId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling adminPostAcceptLinkEcToBpRequest");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling adminPostAcceptLinkEcToBpRequest");
      }

      var pathParams = {
        'companyId': companyId,
        'requestId': requestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminPostAcceptLinkEcToBpRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests/{requestId}/accept', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept a request
     * This API allows to accept a request received by bp admins of a BP company (request sent by bp_admin or company_admin using API [POST /api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests][0]). Request must be in status pending. Otherwise accept request will be rejected with a 409 Conflict error The `companyId` provided in URL should be the BP companyId. Otherwise, accept request will be rejected with a 400 Bad Request error. Once accepted, requesting company's `bpId` is updated with the id of the BP company. If company requested to be BP IR (requestedToBeBpIr=true), requesting company's `isBP` and `bpType` are updated to true and `IR`. If request was done to be BP IR by an admin only `company_admin`, this admin will be promoted to `bp_admin` and `bp_finance` of the requesting company. When a bp_admin accepts a request, EC company administrators and BP company administrators are notified with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"update\" id='582048dfe2e68a79f4979624'       status='accepted' type='received' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/573b46a305a4c22a19b216ce/bp-link/requests/5819ed7c9547b313509237d6/accept  [0]: /admin/#api-link_EC_to_BP_requests-admin_PostLinkEcToBpRequest
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostAcceptLinkEcToBpRequestSuccess}
     */
    this.adminPostAcceptLinkEcToBpRequest = function(companyId, requestId) {
      return this.adminPostAcceptLinkEcToBpRequestWithHttpInfo(companyId, requestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Decline a request
     * This API allows to decline a request received by bp admins of a BP company (request sent by bp_admin or company_admin using API [POST /api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests][0]). Request must be in status pending or failed. Otherwise decline request will be rejected with a 409 Conflict error The `companyId` provided in URL should be the BP companyId. Otherwise, decline request will be rejected with a 400 Bad Request error. When a bp_admin declines a request, EC company administrators and BP company administrators are notified with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"update\" id='582048dfe2e68a79f4979624'       status='declined' type='received' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/573b46a305a4c22a19b216ce/bp-link/requests/5819ed7c9547b313509237d6/decline  [0]: /admin/#api-link_EC_to_BP_requests-admin_PostLinkEcToBpRequest
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostDeclineLinkEcToBpRequestSuccess} and HTTP response
     */
    this.adminPostDeclineLinkEcToBpRequestWithHttpInfo = function(companyId, requestId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling adminPostDeclineLinkEcToBpRequest");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling adminPostDeclineLinkEcToBpRequest");
      }

      var pathParams = {
        'companyId': companyId,
        'requestId': requestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminPostDeclineLinkEcToBpRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests/{requestId}/decline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Decline a request
     * This API allows to decline a request received by bp admins of a BP company (request sent by bp_admin or company_admin using API [POST /api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests][0]). Request must be in status pending or failed. Otherwise decline request will be rejected with a 409 Conflict error The `companyId` provided in URL should be the BP companyId. Otherwise, decline request will be rejected with a 400 Bad Request error. When a bp_admin declines a request, EC company administrators and BP company administrators are notified with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"update\" id='582048dfe2e68a79f4979624'       status='declined' type='received' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/573b46a305a4c22a19b216ce/bp-link/requests/5819ed7c9547b313509237d6/decline  [0]: /admin/#api-link_EC_to_BP_requests-admin_PostLinkEcToBpRequest
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostDeclineLinkEcToBpRequestSuccess}
     */
    this.adminPostDeclineLinkEcToBpRequest = function(companyId, requestId) {
      return this.adminPostDeclineLinkEcToBpRequestWithHttpInfo(companyId, requestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a request to link EC to BP
     * This API can be used by admin (`superadmin`, `bp_admin`, `organization_admin`, `company_admin`) to create a request to link an End customer company to a BP company. All company administrators of the provided end customer and BP companyId are notified about the created request with an email notification (only BP company admins) and with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"create\" id='57cd5922d341df5812bbcb72'      status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/AdminPostLinkEcToBpRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostLinkEcToBpRequestSuccess} and HTTP response
     */
    this.adminPostLinkEcToBpRequestWithHttpInfo = function(companyId, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling adminPostLinkEcToBpRequest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminPostLinkEcToBpRequest");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminPostLinkEcToBpRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a request to link EC to BP
     * This API can be used by admin (`superadmin`, `bp_admin`, `organization_admin`, `company_admin`) to create a request to link an End customer company to a BP company. All company administrators of the provided end customer and BP companyId are notified about the created request with an email notification (only BP company admins) and with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"create\" id='57cd5922d341df5812bbcb72'      status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/AdminPostLinkEcToBpRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostLinkEcToBpRequestSuccess}
     */
    this.adminPostLinkEcToBpRequest = function(companyId, body) {
      return this.adminPostLinkEcToBpRequestWithHttpInfo(companyId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a request
     * This API can be used by `admin` users to get a request he sent/received to link an end customer company to a BP. Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests/5819ed7c9547b313509237d6
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLinkECToBPRequestByIdSuccess} and HTTP response
     */
    this.getLinkECToBPRequestByIdWithHttpInfo = function(companyId, requestId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getLinkECToBPRequestById");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getLinkECToBPRequestById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getLinkECToBPRequestById");
      }

      var pathParams = {
        'companyId': companyId,
        'requestId': requestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetLinkECToBPRequestByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests/{requestId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a request
     * This API can be used by `admin` users to get a request he sent/received to link an end customer company to a BP. Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests/5819ed7c9547b313509237d6
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLinkECToBPRequestByIdSuccess}
     */
    this.getLinkECToBPRequestById = function(companyId, requestId, accept) {
      return this.getLinkECToBPRequestByIdWithHttpInfo(companyId, requestId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all requests
     * This API can be used by `admin` users to list requests they sent/received to link End customer company to BP company. Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests?status=pending Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests?status=accepted&status=auto-accepted
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.status List all Requests having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less request details in response. 'small': '_id requestingCompanyId requestedCompanyId requestingAdminId status', 'medium': '_id requestingCompanyId requestingCompanyName requestedCompanyId requestedCompanyName requestingAdminId requestingAdminLoginEmail status lastNotificationDate requestDate acceptationDate declinationDate', // All fields 'full': all fields
     * @param {Number} opts.limit Allow to specify the number of requests to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first request to retrieve (first request if not specified, i.e. offset=0). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort request list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting request list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLinkECToBPRequestsSuccess} and HTTP response
     */
    this.getLinkECToBPRequestsWithHttpInfo = function(companyId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getLinkECToBPRequests");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getLinkECToBPRequests");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
        'status': opts['status'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetLinkECToBPRequestsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all requests
     * This API can be used by `admin` users to list requests they sent/received to link End customer company to BP company. Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests?status=pending Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests?status=accepted&status=auto-accepted
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.status List all Requests having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less request details in response. 'small': '_id requestingCompanyId requestedCompanyId requestingAdminId status', 'medium': '_id requestingCompanyId requestingCompanyName requestedCompanyId requestedCompanyName requestingAdminId requestingAdminLoginEmail status lastNotificationDate requestDate acceptationDate declinationDate', // All fields 'full': all fields
     * @param {Number} opts.limit Allow to specify the number of requests to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first request to retrieve (first request if not specified, i.e. offset=0). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort request list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting request list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLinkECToBPRequestsSuccess}
     */
    this.getLinkECToBPRequests = function(companyId, accept, opts) {
      return this.getLinkECToBPRequestsWithHttpInfo(companyId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel a request
     * This API can be used by admin (`superadmin`, `bp_admin`, `organization_admin`, `company_admin`) to cancel a request already sent to link his company to BP company. Request must be pending, declined or failed (otherwise error 409 is returned). The `companyId` provided in URL should be the requesting companyId. Otherwise, cancel request will be rejected with a 400 Bad Request error. Once request has been canceled, it will not be possible to accept or decline it anymore. All admins are notified with an XMPP message that the request has been canceled:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"update\" id='57cd5922d341df5812bbcb72'      status='canceled' type='sent' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests/5819ed7c9547b313509237d6/cancel
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostCancelLinkEcToBpRequestByIdSuccess} and HTTP response
     */
    this.postCancelLinkEcToBpRequestByIdWithHttpInfo = function(companyId, requestId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling postCancelLinkEcToBpRequestById");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling postCancelLinkEcToBpRequestById");
      }

      var pathParams = {
        'companyId': companyId,
        'requestId': requestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PostCancelLinkEcToBpRequestByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests/{requestId}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a request
     * This API can be used by admin (`superadmin`, `bp_admin`, `organization_admin`, `company_admin`) to cancel a request already sent to link his company to BP company. Request must be pending, declined or failed (otherwise error 409 is returned). The `companyId` provided in URL should be the requesting companyId. Otherwise, cancel request will be rejected with a 400 Bad Request error. Once request has been canceled, it will not be possible to accept or decline it anymore. All admins are notified with an XMPP message that the request has been canceled:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"update\" id='57cd5922d341df5812bbcb72'      status='canceled' type='sent' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests/5819ed7c9547b313509237d6/cancel
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostCancelLinkEcToBpRequestByIdSuccess}
     */
    this.postCancelLinkEcToBpRequestById = function(companyId, requestId) {
      return this.postCancelLinkEcToBpRequestByIdWithHttpInfo(companyId, requestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Re-send a request
     * This API can be used by admin (`superadmin`, `bp_admin`, `organization_admin`, `company_admin`) to re-send a request already sent to link his company to BP company. If request is canceled, declined or failed, it is set back to pending and then re-sent. If request is accepted or auto-accepted, error 409 is returned. The `companyId` provided in URL should be the requesting companyId (e.g. end customer company). Otherwise, re-send request will be rejected with a 400 Bad Request error. Request company (BP company) administrators receive a new email notification. All admins are notified with an XMPP message that the request has been re-sent:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"re-send\" id='57cd5922d341df5812bbcb72'       status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests/5819ed7c9547b313509237d6/re-send
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @param {module:model/ResendLinkEcToBpRequestById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResendLinkEcToBpRequestByIdSuccess} and HTTP response
     */
    this.resendLinkEcToBpRequestByIdWithHttpInfo = function(companyId, requestId, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling resendLinkEcToBpRequestById");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling resendLinkEcToBpRequestById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resendLinkEcToBpRequestById");
      }

      var pathParams = {
        'companyId': companyId,
        'requestId': requestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResendLinkEcToBpRequestByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/bp-link/requests/{requestId}/re-send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Re-send a request
     * This API can be used by admin (`superadmin`, `bp_admin`, `organization_admin`, `company_admin`) to re-send a request already sent to link his company to BP company. If request is canceled, declined or failed, it is set back to pending and then re-sent. If request is accepted or auto-accepted, error 409 is returned. The `companyId` provided in URL should be the requesting companyId (e.g. end customer company). Otherwise, re-send request will be rejected with a 400 Bad Request error. Request company (BP company) administrators receive a new email notification. All admins are notified with an XMPP message that the request has been re-sent:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <linkectobprequest action=\"re-send\" id='57cd5922d341df5812bbcb72'       status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ``` Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/bp-link/requests/5819ed7c9547b313509237d6/re-send
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} requestId Link End customer to BP request unique identifier (like 5819ed7c9547b313509237d6)
     * @param {module:model/ResendLinkEcToBpRequestById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResendLinkEcToBpRequestByIdSuccess}
     */
    this.resendLinkEcToBpRequestById = function(companyId, requestId, body) {
      return this.resendLinkEcToBpRequestByIdWithHttpInfo(companyId, requestId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
