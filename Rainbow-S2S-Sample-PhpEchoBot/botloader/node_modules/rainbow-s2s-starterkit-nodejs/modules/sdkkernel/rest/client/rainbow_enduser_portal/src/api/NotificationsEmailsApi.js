/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SendOfflineUserConnectionRequestByEmail', 'model/SendOfflineUserConnectionRequestByEmailSuccess', 'model/SendResetPasswordEmail', 'model/SendResetPasswordEmailSuccess', 'model/SendSelfRegisterEmail', 'model/SendSelfRegisterEmailSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SendOfflineUserConnectionRequestByEmail'), require('../model/SendOfflineUserConnectionRequestByEmailSuccess'), require('../model/SendResetPasswordEmail'), require('../model/SendResetPasswordEmailSuccess'), require('../model/SendSelfRegisterEmail'), require('../model/SendSelfRegisterEmailSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.NotificationsEmailsApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.SendOfflineUserConnectionRequestByEmail, root.RainbowEnduserPortal.SendOfflineUserConnectionRequestByEmailSuccess, root.RainbowEnduserPortal.SendResetPasswordEmail, root.RainbowEnduserPortal.SendResetPasswordEmailSuccess, root.RainbowEnduserPortal.SendSelfRegisterEmail, root.RainbowEnduserPortal.SendSelfRegisterEmailSuccess);
  }
}(this, function(ApiClient, SendOfflineUserConnectionRequestByEmail, SendOfflineUserConnectionRequestByEmailSuccess, SendResetPasswordEmail, SendResetPasswordEmailSuccess, SendSelfRegisterEmail, SendSelfRegisterEmailSuccess) {
  'use strict';

  /**
   * NotificationsEmails service.
   * @module api/NotificationsEmailsApi
   * @version 1.84.0
   */

  /**
   * Constructs a new NotificationsEmailsApi. 
   * @alias module:api/NotificationsEmailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Ask a user offline to connect again via an email
     * This API allows to warn a user to answer to an IM, when this other user is to slow to answer. We have to wait a while before sending this email. (default: 15 days. Rainbow parameter) We have also to wait a while between two attempts. (default: 7 days. Rainbow parameter) These parameters are available through user's settings API.
     * @param {module:model/SendOfflineUserConnectionRequestByEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendOfflineUserConnectionRequestByEmailSuccess} and HTTP response
     */
    this.sendOfflineUserConnectionRequestByEmailWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendOfflineUserConnectionRequestByEmail");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendOfflineUserConnectionRequestByEmailSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/notifications/emails/offline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Ask a user offline to connect again via an email
     * This API allows to warn a user to answer to an IM, when this other user is to slow to answer. We have to wait a while before sending this email. (default: 15 days. Rainbow parameter) We have also to wait a while between two attempts. (default: 7 days. Rainbow parameter) These parameters are available through user's settings API.
     * @param {module:model/SendOfflineUserConnectionRequestByEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendOfflineUserConnectionRequestByEmailSuccess}
     */
    this.sendOfflineUserConnectionRequestByEmail = function(body) {
      return this.sendOfflineUserConnectionRequestByEmailWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset-password email
     * This API allows to send a reset-password email to a user. A temporary user token is generated and send in the email body. This token is required in the reset password validation workflow (see documentation of related API: (PUT /api/rainbow/enduser/v1.0/users/:userId/reset-password) for more information).**Note: A rainbow user with the role 'guest' can't reset his password**
     * @param {module:model/SendResetPasswordEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendResetPasswordEmailSuccess} and HTTP response
     */
    this.sendResetPasswordEmailWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendResetPasswordEmail");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendResetPasswordEmailSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/notifications/emails/reset-password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reset-password email
     * This API allows to send a reset-password email to a user. A temporary user token is generated and send in the email body. This token is required in the reset password validation workflow (see documentation of related API: (PUT /api/rainbow/enduser/v1.0/users/:userId/reset-password) for more information).**Note: A rainbow user with the role 'guest' can't reset his password**
     * @param {module:model/SendResetPasswordEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendResetPasswordEmailSuccess}
     */
    this.sendResetPasswordEmail = function(body) {
      return this.sendResetPasswordEmailWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Self-register email
     * This API allows to send a self-register email to a user. A temporary user token is generated and send in the email body. This token is required in the self register validation workflow (see documentation of related API: ([POST /api/rainbow/enduser/v1.0/users/self-register][0]) for more information).  [0]: #api-enduser_users-enduser_SelfRegisterUsers
     * @param {module:model/SendSelfRegisterEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendSelfRegisterEmailSuccess} and HTTP response
     */
    this.sendSelfRegisterEmailWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendSelfRegisterEmail");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendSelfRegisterEmailSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/notifications/emails/self-register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Self-register email
     * This API allows to send a self-register email to a user. A temporary user token is generated and send in the email body. This token is required in the self register validation workflow (see documentation of related API: ([POST /api/rainbow/enduser/v1.0/users/self-register][0]) for more information).  [0]: #api-enduser_users-enduser_SelfRegisterUsers
     * @param {module:model/SendSelfRegisterEmail} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendSelfRegisterEmailSuccess}
     */
    this.sendSelfRegisterEmail = function(body) {
      return this.sendSelfRegisterEmailWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
