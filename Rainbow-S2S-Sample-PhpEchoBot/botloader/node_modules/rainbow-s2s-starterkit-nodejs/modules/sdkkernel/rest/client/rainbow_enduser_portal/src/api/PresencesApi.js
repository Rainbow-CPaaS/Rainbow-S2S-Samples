/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AcceptPresenceSharingSuccess', 'model/CancelSubmittedPresenceSharingRequestSuccess', 'model/DeclinePresenceSharingRequestSuccess', 'model/GetPresenceSharingRequestSuccess', 'model/GetReceivedPresenceSharingRequestsSuccess', 'model/GetSentPresenceSharingRequestsSuccess', 'model/SendPresenceSharingRequest', 'model/SendPresenceSharingRequestSuccess', 'model/StopPresenceSharingSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AcceptPresenceSharingSuccess'), require('../model/CancelSubmittedPresenceSharingRequestSuccess'), require('../model/DeclinePresenceSharingRequestSuccess'), require('../model/GetPresenceSharingRequestSuccess'), require('../model/GetReceivedPresenceSharingRequestsSuccess'), require('../model/GetSentPresenceSharingRequestsSuccess'), require('../model/SendPresenceSharingRequest'), require('../model/SendPresenceSharingRequestSuccess'), require('../model/StopPresenceSharingSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.PresencesApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.AcceptPresenceSharingSuccess, root.RainbowEnduserPortal.CancelSubmittedPresenceSharingRequestSuccess, root.RainbowEnduserPortal.DeclinePresenceSharingRequestSuccess, root.RainbowEnduserPortal.GetPresenceSharingRequestSuccess, root.RainbowEnduserPortal.GetReceivedPresenceSharingRequestsSuccess, root.RainbowEnduserPortal.GetSentPresenceSharingRequestsSuccess, root.RainbowEnduserPortal.SendPresenceSharingRequest, root.RainbowEnduserPortal.SendPresenceSharingRequestSuccess, root.RainbowEnduserPortal.StopPresenceSharingSuccess);
  }
}(this, function(ApiClient, AcceptPresenceSharingSuccess, CancelSubmittedPresenceSharingRequestSuccess, DeclinePresenceSharingRequestSuccess, GetPresenceSharingRequestSuccess, GetReceivedPresenceSharingRequestsSuccess, GetSentPresenceSharingRequestsSuccess, SendPresenceSharingRequest, SendPresenceSharingRequestSuccess, StopPresenceSharingSuccess) {
  'use strict';

  /**
   * Presences service.
   * @module api/PresencesApi
   * @version 1.84.0
   */

  /**
   * Constructs a new PresencesApi. 
   * @alias module:api/PresencesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Accept to share my presence with somebody of my network
     * This API can be used to accept the request from another Rainbow user of my network, to share XMPP presence.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Once the proposal is accepted:   * The roster of the two users is updated to take in account the presence sharing. * The presence request is updated in the database * Both users are notified with an XMPP message that the presence sharing has been accepted.    For requesting user, type is `sent`.    For requested user, type is `received`.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='accepted' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/accept
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AcceptPresenceSharingSuccess} and HTTP response
     */
    this.acceptPresenceSharingWithHttpInfo = function(userId, presenceReqId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling acceptPresenceSharing");
      }
      // verify the required parameter 'presenceReqId' is set
      if (presenceReqId === undefined || presenceReqId === null) {
        throw new Error("Missing the required parameter 'presenceReqId' when calling acceptPresenceSharing");
      }

      var pathParams = {
        'userId': userId,
        'presenceReqId': presenceReqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AcceptPresenceSharingSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences/{presenceReqId}/accept', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept to share my presence with somebody of my network
     * This API can be used to accept the request from another Rainbow user of my network, to share XMPP presence.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Once the proposal is accepted:   * The roster of the two users is updated to take in account the presence sharing. * The presence request is updated in the database * Both users are notified with an XMPP message that the presence sharing has been accepted.    For requesting user, type is `sent`.    For requested user, type is `received`.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='accepted' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/accept
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AcceptPresenceSharingSuccess}
     */
    this.acceptPresenceSharing = function(userId, presenceReqId) {
      return this.acceptPresenceSharingWithHttpInfo(userId, presenceReqId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel a presence request submitted to a user of my network
     * This API can be used by a user to cancel a submitted request to share the XMPP presence with another user of his network.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)   * Presence request can only be canceled when it is pending and belongs to the logged in user. * It is removed in the database * Requesting and requested user are notified with an XMPP message that the presence request has been declined.       Requesting and requested user are notified with an XMPP message that the presence request has been canceled.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='sent' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    The asked user is also notified that the presence request has been canceled with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='received' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/cancel
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CancelSubmittedPresenceSharingRequestSuccess} and HTTP response
     */
    this.cancelSubmittedPresenceSharingRequestWithHttpInfo = function(userId, presenceReqId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling cancelSubmittedPresenceSharingRequest");
      }
      // verify the required parameter 'presenceReqId' is set
      if (presenceReqId === undefined || presenceReqId === null) {
        throw new Error("Missing the required parameter 'presenceReqId' when calling cancelSubmittedPresenceSharingRequest");
      }

      var pathParams = {
        'userId': userId,
        'presenceReqId': presenceReqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CancelSubmittedPresenceSharingRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences/{presenceReqId}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a presence request submitted to a user of my network
     * This API can be used by a user to cancel a submitted request to share the XMPP presence with another user of his network.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)   * Presence request can only be canceled when it is pending and belongs to the logged in user. * It is removed in the database * Requesting and requested user are notified with an XMPP message that the presence request has been declined.       Requesting and requested user are notified with an XMPP message that the presence request has been canceled.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='sent' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    The asked user is also notified that the presence request has been canceled with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='received' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/cancel
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CancelSubmittedPresenceSharingRequestSuccess}
     */
    this.cancelSubmittedPresenceSharingRequest = function(userId, presenceReqId) {
      return this.cancelSubmittedPresenceSharingRequestWithHttpInfo(userId, presenceReqId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Decline to share my presence with somebody of my network
     * This API can be used to decline the request from another Rainbow user of my network, to share XMPP presence.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)   * Presence request can only be declined when it is pending and submitted to the logged in user. * It is removed in the database * Requesting and requested user are notified with an XMPP message that the presence request has been declined.    The logged in user is notified that the presence request has been declined (multi-device purpose) with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='received' status='declined' xmlns='jabber:iq:configuration'/>     </message> ```    The requesting user get the message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='sent' status='declined' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/decline
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeclinePresenceSharingRequestSuccess} and HTTP response
     */
    this.declinePresenceSharingRequestWithHttpInfo = function(userId, presenceReqId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling declinePresenceSharingRequest");
      }
      // verify the required parameter 'presenceReqId' is set
      if (presenceReqId === undefined || presenceReqId === null) {
        throw new Error("Missing the required parameter 'presenceReqId' when calling declinePresenceSharingRequest");
      }

      var pathParams = {
        'userId': userId,
        'presenceReqId': presenceReqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeclinePresenceSharingRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences/{presenceReqId}/decline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Decline to share my presence with somebody of my network
     * This API can be used to decline the request from another Rainbow user of my network, to share XMPP presence.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)   * Presence request can only be declined when it is pending and submitted to the logged in user. * It is removed in the database * Requesting and requested user are notified with an XMPP message that the presence request has been declined.    The logged in user is notified that the presence request has been declined (multi-device purpose) with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='received' status='declined' xmlns='jabber:iq:configuration'/>     </message> ```    The requesting user get the message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='sent' status='declined' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/decline
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeclinePresenceSharingRequestSuccess}
     */
    this.declinePresenceSharingRequest = function(userId, presenceReqId) {
      return this.declinePresenceSharingRequestWithHttpInfo(userId, presenceReqId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get presence request between two users
     * This API can be used to get a presence request, sent or received, by or from another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       The user can only retrieve presence request for which he is the submitter or the receiver.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPresenceSharingRequestSuccess} and HTTP response
     */
    this.getPresenceSharingRequestWithHttpInfo = function(userId, presenceReqId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPresenceSharingRequest");
      }
      // verify the required parameter 'presenceReqId' is set
      if (presenceReqId === undefined || presenceReqId === null) {
        throw new Error("Missing the required parameter 'presenceReqId' when calling getPresenceSharingRequest");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getPresenceSharingRequest");
      }

      var pathParams = {
        'userId': userId,
        'presenceReqId': presenceReqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetPresenceSharingRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences/{presenceReqId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get presence request between two users
     * This API can be used to get a presence request, sent or received, by or from another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       The user can only retrieve presence request for which he is the submitter or the receiver.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPresenceSharingRequestSuccess}
     */
    this.getPresenceSharingRequest = function(userId, presenceReqId, accept) {
      return this.getPresenceSharingRequestWithHttpInfo(userId, presenceReqId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all presence requests received from users of my network
     * This API can be used to retrieve the list of presence requests received by the user from other users of his network.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)    By default results are sorted by the 'requestDate' field.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/5703d4829ccf39843c7ef89b/presences/received?status=pending
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all presence requests having the provided status(es) When the presence request is canceled or declined, it is deleted in the database, then `canceled` an `declined` status are not available.
     * @param {String} opts.format Allows to retrieve more or less presence request details in response. > - `small`: id, fromUserId, toUserId, status, requestDate > - `medium`: id, fromUserId, toUserId, status, requestDate, acceptationDate > - `full`: all presence request fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReceivedPresenceSharingRequestsSuccess} and HTTP response
     */
    this.getReceivedPresenceSharingRequestsWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getReceivedPresenceSharingRequests");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getReceivedPresenceSharingRequests");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'sortField': opts['sortField'],
        'status': opts['status'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetReceivedPresenceSharingRequestsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences/received', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all presence requests received from users of my network
     * This API can be used to retrieve the list of presence requests received by the user from other users of his network.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)    By default results are sorted by the 'requestDate' field.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/5703d4829ccf39843c7ef89b/presences/received?status=pending
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all presence requests having the provided status(es) When the presence request is canceled or declined, it is deleted in the database, then `canceled` an `declined` status are not available.
     * @param {String} opts.format Allows to retrieve more or less presence request details in response. > - `small`: id, fromUserId, toUserId, status, requestDate > - `medium`: id, fromUserId, toUserId, status, requestDate, acceptationDate > - `full`: all presence request fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReceivedPresenceSharingRequestsSuccess}
     */
    this.getReceivedPresenceSharingRequests = function(userId, accept, opts) {
      return this.getReceivedPresenceSharingRequestsWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all presence requests sent to users of my network
     * This API can be used to retrieve the list of presence requests sent by the user to other users of his network.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)    By default results are sorted by the 'requestDate' field.       Example 1: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/sent?status=pending
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all invitations having the provided status(es) When the presence request is canceled or declined, it is deleted in the database, then `canceled` an `declined` status are not available.
     * @param {String} opts.format Allows to retrieve more or less presence request details in response. > - `small`: id, fromUserId, toUserId, status, requestDate > - `medium`: id, fromUserId, toUserId, status, requestDate, acceptationDate > - `full`: all presence request fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSentPresenceSharingRequestsSuccess} and HTTP response
     */
    this.getSentPresenceSharingRequestsWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSentPresenceSharingRequests");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSentPresenceSharingRequests");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'sortField': opts['sortField'],
        'status': opts['status'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSentPresenceSharingRequestsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences/sent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all presence requests sent to users of my network
     * This API can be used to retrieve the list of presence requests sent by the user to other users of his network.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)    By default results are sorted by the 'requestDate' field.       Example 1: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/sent?status=pending
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all invitations having the provided status(es) When the presence request is canceled or declined, it is deleted in the database, then `canceled` an `declined` status are not available.
     * @param {String} opts.format Allows to retrieve more or less presence request details in response. > - `small`: id, fromUserId, toUserId, status, requestDate > - `medium`: id, fromUserId, toUserId, status, requestDate, acceptationDate > - `full`: all presence request fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSentPresenceSharingRequestsSuccess}
     */
    this.getSentPresenceSharingRequests = function(userId, accept, opts) {
      return this.getSentPresenceSharingRequestsWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a presence requests to a users of my network
     * This API allows logged in user to ask another user of his network to share their XMPP presence.    Requesting and requested user are notified with an XMPP message that the presence request has been submitted.       Requesting user receives the following message.        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"create\" type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```    Requested user is also notified that a presence request is pending with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"create\" type='received' status='pending' xmlns='jabber:iq:configuration'/>     </message> ``` 
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/SendPresenceSharingRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendPresenceSharingRequestSuccess} and HTTP response
     */
    this.sendPresenceSharingRequestWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling sendPresenceSharingRequest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendPresenceSharingRequest");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendPresenceSharingRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a presence requests to a users of my network
     * This API allows logged in user to ask another user of his network to share their XMPP presence.    Requesting and requested user are notified with an XMPP message that the presence request has been submitted.       Requesting user receives the following message.        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"create\" type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```    Requested user is also notified that a presence request is pending with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"create\" type='received' status='pending' xmlns='jabber:iq:configuration'/>     </message> ``` 
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/SendPresenceSharingRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendPresenceSharingRequestSuccess}
     */
    this.sendPresenceSharingRequest = function(userId, body) {
      return this.sendPresenceSharingRequestWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop sharing my presence with somebody of my network
     * This API can be used to stop sharing XMPP presence after having accepted the request from another Rainbow user of my network, to share my presence.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Once the proposal is accepted:   * The roster of the two users is updated to take in account the stop of presence sharing. * The presence request is deleted in the database * Both users are notified with an XMPP message that the presence sharing has been interrupted.    For requesting user, type is `sent`.    For requested user, type is `received`.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='received' status='interrupted' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/accept
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StopPresenceSharingSuccess} and HTTP response
     */
    this.stopPresenceSharingWithHttpInfo = function(userId, presenceReqId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stopPresenceSharing");
      }
      // verify the required parameter 'presenceReqId' is set
      if (presenceReqId === undefined || presenceReqId === null) {
        throw new Error("Missing the required parameter 'presenceReqId' when calling stopPresenceSharing");
      }

      var pathParams = {
        'userId': userId,
        'presenceReqId': presenceReqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StopPresenceSharingSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/presences/{presenceReqId}/interrupt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop sharing my presence with somebody of my network
     * This API can be used to stop sharing XMPP presence after having accepted the request from another Rainbow user of my network, to share my presence.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Once the proposal is accepted:   * The roster of the two users is updated to take in account the stop of presence sharing. * The presence request is deleted in the database * Both users are notified with an XMPP message that the presence sharing has been interrupted.    For requesting user, type is `sent`.    For requested user, type is `received`.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <presencehandshake id='57cd5922d341df5812bbcb72' action=\"delete\" type='received' status='interrupted' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/presences/57cd5922d341df5812bbcb72/accept
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} presenceReqId PresenceReq unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StopPresenceSharingSuccess}
     */
    this.stopPresenceSharing = function(userId, presenceReqId) {
      return this.stopPresenceSharingWithHttpInfo(userId, presenceReqId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
