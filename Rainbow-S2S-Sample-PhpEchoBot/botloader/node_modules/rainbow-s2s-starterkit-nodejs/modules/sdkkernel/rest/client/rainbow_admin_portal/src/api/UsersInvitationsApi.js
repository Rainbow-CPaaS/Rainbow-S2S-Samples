/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminUsersTagFailedSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminUsersTagFailedSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.UsersInvitationsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminUsersTagFailedSuccess);
  }
}(this, function(ApiClient, AdminUsersTagFailedSuccess) {
  'use strict';

  /**
   * UsersInvitations service.
   * @module api/UsersInvitationsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new UsersInvitationsApi. 
   * @alias module:api/UsersInvitationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Tag as failed a user invitation
     * This API can be used to tag an invitation sent by another Rainbow user as 'failed'.    This API can only be used by a superadmin    Only invitations with the status 'pending' and the type 'registration' can be tagged.       Inviting user is notified with an XMPP message that the invitation has been failed.    The XMPP message is the following:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <userinvite id='57cd5922d341df5812bbcb72' action=\"update\"      type='sent' status='failed' xmlns='jabber:iq:configuration'/> </message> ```       Inviting user can know that some invitations are tagged as failed by API [GET /api/rainbow/enduser/v1.0/users/{userId}/invitations/sent(?status=pending|accepted|auto-accepted|declined|failed)][0]).  [0]: /enduser/#api-invitations-enduser_users_GetSentInvites
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminUsersTagFailedSuccess} and HTTP response
     */
    this.adminUsersTagFailedWithHttpInfo = function(userId, invitationId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersTagFailed");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling adminUsersTagFailed");
      }

      var pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminUsersTagFailedSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/users/{userId}/invitations/{invitationId}/failed', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Tag as failed a user invitation
     * This API can be used to tag an invitation sent by another Rainbow user as 'failed'.    This API can only be used by a superadmin    Only invitations with the status 'pending' and the type 'registration' can be tagged.       Inviting user is notified with an XMPP message that the invitation has been failed.    The XMPP message is the following:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <userinvite id='57cd5922d341df5812bbcb72' action=\"update\"      type='sent' status='failed' xmlns='jabber:iq:configuration'/> </message> ```       Inviting user can know that some invitations are tagged as failed by API [GET /api/rainbow/enduser/v1.0/users/{userId}/invitations/sent(?status=pending|accepted|auto-accepted|declined|failed)][0]).  [0]: /enduser/#api-invitations-enduser_users_GetSentInvites
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminUsersTagFailedSuccess}
     */
    this.adminUsersTagFailed = function(userId, invitationId) {
      return this.adminUsersTagFailedWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
