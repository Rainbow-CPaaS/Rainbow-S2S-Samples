/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminCompaniesDeleteBannerSuccess', 'model/AdminCompaniesGetBannerSuccess', 'model/AdminCompaniesPostBannerSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminCompaniesDeleteBannerSuccess'), require('../model/AdminCompaniesGetBannerSuccess'), require('../model/AdminCompaniesPostBannerSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.CompaniesBannerApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminCompaniesDeleteBannerSuccess, root.RainbowAdminPortal.AdminCompaniesGetBannerSuccess, root.RainbowAdminPortal.AdminCompaniesPostBannerSuccess);
  }
}(this, function(ApiClient, AdminCompaniesDeleteBannerSuccess, AdminCompaniesGetBannerSuccess, AdminCompaniesPostBannerSuccess) {
  'use strict';

  /**
   * CompaniesBanner service.
   * @module api/CompaniesBannerApi
   * @version 1.82.0
   */

  /**
   * Constructs a new CompaniesBannerApi. 
   * @alias module:api/CompaniesBannerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete company's banner
     * This API can be used to delete avatar image for a given companyId.       Only a superadmin is allowed to handle avatars for 'Default' and 'Terminated' companies.
     * @param {String} companyId Company for which list of administrators is requested
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminCompaniesDeleteBannerSuccess} and HTTP response
     */
    this.adminCompaniesDeleteBannerWithHttpInfo = function(companyId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling adminCompaniesDeleteBanner");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminCompaniesDeleteBanner");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminCompaniesDeleteBannerSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/banner', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete company's banner
     * This API can be used to delete avatar image for a given companyId.       Only a superadmin is allowed to handle avatars for 'Default' and 'Terminated' companies.
     * @param {String} companyId Company for which list of administrators is requested
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminCompaniesDeleteBannerSuccess}
     */
    this.adminCompaniesDeleteBanner = function(companyId, accept) {
      return this.adminCompaniesDeleteBannerWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get company's banner
     * This API can be used to retrieve company's banner in addition to the logo retrieved via /api/avatar/{companyId}.    Example: GET https://openrainbow.com/api/banner/56c5c19f94141765119f896c?size=128       Clients can request banners in a given size by specifying size query string parameter.    Banner file can be resized from 1px to its original resolution:   * If no size option is requested, banner is returned by default with resolution of 80px. * Max requestable size is 2048. **If a higher resolution is requested, the default size is returned instead, i.e. 80px.** * Original banner resolution can't be increased. If uploaded banner size is 128 x 128 px, even is client request banner with size 256, the original avatar file will be returned (128px).  
     * @param {String} companyId Company for which list of administrators is requested
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size Specify avatar size in pixels (square size x size).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminCompaniesGetBannerSuccess} and HTTP response
     */
    this.adminCompaniesGetBannerWithHttpInfo = function(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling adminCompaniesGetBanner");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminCompaniesGetBannerSuccess;
      return this.apiClient.callApi(
        '/api/banner/{companyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get company's banner
     * This API can be used to retrieve company's banner in addition to the logo retrieved via /api/avatar/{companyId}.    Example: GET https://openrainbow.com/api/banner/56c5c19f94141765119f896c?size=128       Clients can request banners in a given size by specifying size query string parameter.    Banner file can be resized from 1px to its original resolution:   * If no size option is requested, banner is returned by default with resolution of 80px. * Max requestable size is 2048. **If a higher resolution is requested, the default size is returned instead, i.e. 80px.** * Original banner resolution can't be increased. If uploaded banner size is 128 x 128 px, even is client request banner with size 256, the original avatar file will be returned (128px).  
     * @param {String} companyId Company for which list of administrators is requested
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size Specify avatar size in pixels (square size x size).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminCompaniesGetBannerSuccess}
     */
    this.adminCompaniesGetBanner = function(companyId, opts) {
      return this.adminCompaniesGetBannerWithHttpInfo(companyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload company's banner
     * This API can be used to upload banner image for a given companyId       Rules:   * Banner file has to be sent directly in http body (no JSon). * Only **jpeg, jpg and png** files are supported. Appropriate content-type has to be set (image/jpeg or image/png). * If company already has a banner, the existing one is overwritten. * By default, banner file size is limited to 10485760 bytes (10 MB) (this limit can be changed by integration team in admin portal config file). * When a banner is uploaded, the field `lastBannerUpdateDate` of the company is updated to the current date.  Only a superadmin is allowed to handle banner for 'Default' and 'Terminated' companies.
     * @param {String} companyId Company for which list of administrators is requested
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminCompaniesPostBannerSuccess} and HTTP response
     */
    this.adminCompaniesPostBannerWithHttpInfo = function(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling adminCompaniesPostBanner");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminCompaniesPostBannerSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/banner', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload company's banner
     * This API can be used to upload banner image for a given companyId       Rules:   * Banner file has to be sent directly in http body (no JSon). * Only **jpeg, jpg and png** files are supported. Appropriate content-type has to be set (image/jpeg or image/png). * If company already has a banner, the existing one is overwritten. * By default, banner file size is limited to 10485760 bytes (10 MB) (this limit can be changed by integration team in admin portal config file). * When a banner is uploaded, the field `lastBannerUpdateDate` of the company is updated to the current date.  Only a superadmin is allowed to handle banner for 'Default' and 'Terminated' companies.
     * @param {String} companyId Company for which list of administrators is requested
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminCompaniesPostBannerSuccess}
     */
    this.adminCompaniesPostBanner = function(companyId) {
      return this.adminCompaniesPostBannerWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
