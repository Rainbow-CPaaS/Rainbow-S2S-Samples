/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RainbowAdminPortal);
  }
}(this, function(expect, RainbowAdminPortal) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PhoneNumbersAnalyzeSuccess', function() {
    it('should create an instance of PhoneNumbersAnalyzeSuccess', function() {
      // uncomment below and update the code to test PhoneNumbersAnalyzeSuccess
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be.a(RainbowAdminPortal.PhoneNumbersAnalyzeSuccess);
    });

    it('should have the property inputPhoneNumber (base name: "inputPhoneNumber")', function() {
      // uncomment below and update the code to test the property inputPhoneNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property inputCountryCode (base name: "inputCountryCode")', function() {
      // uncomment below and update the code to test the property inputCountryCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property checkedCountryCode (base name: "checkedCountryCode")', function() {
      // uncomment below and update the code to test the property checkedCountryCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property parseAndKeepRawInput (base name: "parseAndKeepRawInput")', function() {
      // uncomment below and update the code to test the property parseAndKeepRawInput
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property isPossibleNumber (base name: "isPossibleNumber")', function() {
      // uncomment below and update the code to test the property isPossibleNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property isPossibleNumberWithReason (base name: "isPossibleNumberWithReason")', function() {
      // uncomment below and update the code to test the property isPossibleNumberWithReason
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property isValidNumber (base name: "isValidNumber")', function() {
      // uncomment below and update the code to test the property isValidNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property isValidNumberForRegion (base name: "isValidNumberForRegion")', function() {
      // uncomment below and update the code to test the property isValidNumberForRegion
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getRegionCodeForNumber (base name: "getRegionCodeForNumber")', function() {
      // uncomment below and update the code to test the property getRegionCodeForNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getNumberType (base name: "getNumberType")', function() {
      // uncomment below and update the code to test the property getNumberType
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property e164 (base name: "e164")', function() {
      // uncomment below and update the code to test the property e164
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property international (base name: "international")', function() {
      // uncomment below and update the code to test the property international
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property national (base name: "national")', function() {
      // uncomment below and update the code to test the property national
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property rfc3966 (base name: "rfc3966")', function() {
      // uncomment below and update the code to test the property rfc3966
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property canBeInternationallyDialled (base name: "canBeInternationallyDialled")', function() {
      // uncomment below and update the code to test the property canBeInternationallyDialled
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getLengthOfGeographicalAreaCode (base name: "getLengthOfGeographicalAreaCode")', function() {
      // uncomment below and update the code to test the property getLengthOfGeographicalAreaCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getLengthOfNationalDestinationCode (base name: "getLengthOfNationalDestinationCode")', function() {
      // uncomment below and update the code to test the property getLengthOfNationalDestinationCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property isNumberGeographical (base name: "isNumberGeographical")', function() {
      // uncomment below and update the code to test the property isNumberGeographical
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getNationalSignificantNumber (base name: "getNationalSignificantNumber")', function() {
      // uncomment below and update the code to test the property getNationalSignificantNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getCountryCodeForRegion (base name: "getCountryCodeForRegion")', function() {
      // uncomment below and update the code to test the property getCountryCodeForRegion
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getRegionCodeForCountryCode (base name: "getRegionCodeForCountryCode")', function() {
      // uncomment below and update the code to test the property getRegionCodeForCountryCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getRegionCodesForCountryCode (base name: "getRegionCodesForCountryCode")', function() {
      // uncomment below and update the code to test the property getRegionCodesForCountryCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property isAlphaNumber (base name: "isAlphaNumber")', function() {
      // uncomment below and update the code to test the property isAlphaNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property maybeStripExtension (base name: "maybeStripExtension")', function() {
      // uncomment below and update the code to test the property maybeStripExtension
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasNationalNumber (base name: "hasNationalNumber")', function() {
      // uncomment below and update the code to test the property hasNationalNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property nationalNumberCount (base name: "nationalNumberCount")', function() {
      // uncomment below and update the code to test the property nationalNumberCount
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getNationalNumber (base name: "getNationalNumber")', function() {
      // uncomment below and update the code to test the property getNationalNumber
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasCountryCode (base name: "hasCountryCode")', function() {
      // uncomment below and update the code to test the property hasCountryCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property countryCodeCount (base name: "countryCodeCount")', function() {
      // uncomment below and update the code to test the property countryCodeCount
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property getCountryCode (base name: "getCountryCode")', function() {
      // uncomment below and update the code to test the property getCountryCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasExtension (base name: "hasExtension")', function() {
      // uncomment below and update the code to test the property hasExtension
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasItalianLeadingZero (base name: "hasItalianLeadingZero")', function() {
      // uncomment below and update the code to test the property hasItalianLeadingZero
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasNumberOfLeadingZeros (base name: "hasNumberOfLeadingZeros")', function() {
      // uncomment below and update the code to test the property hasNumberOfLeadingZeros
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasRawInput (base name: "hasRawInput")', function() {
      // uncomment below and update the code to test the property hasRawInput
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasCountryCodeSource (base name: "hasCountryCodeSource")', function() {
      // uncomment below and update the code to test the property hasCountryCodeSource
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

    it('should have the property hasPreferredDomesticCarrierCode (base name: "hasPreferredDomesticCarrierCode")', function() {
      // uncomment below and update the code to test the property hasPreferredDomesticCarrierCode
      //var instance = new RainbowAdminPortal.PhoneNumbersAnalyzeSuccess();
      //expect(instance).to.be();
    });

  });

}));
