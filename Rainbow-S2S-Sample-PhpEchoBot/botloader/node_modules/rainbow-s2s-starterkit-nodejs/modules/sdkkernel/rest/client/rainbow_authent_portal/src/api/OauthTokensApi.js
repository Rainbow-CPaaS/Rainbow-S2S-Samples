/**
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * OpenAPI spec version: 1.104.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteOAuthTokenSuccess', 'model/GetOAuthTokenByIdSuccess', 'model/GetOAuthTokenSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteOAuthTokenSuccess'), require('../model/GetOAuthTokenByIdSuccess'), require('../model/GetOAuthTokenSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAuthenticationPortal) {
      root.RainbowAuthenticationPortal = {};
    }
    root.RainbowAuthenticationPortal.OauthTokensApi = factory(root.RainbowAuthenticationPortal.ApiClient, root.RainbowAuthenticationPortal.DeleteOAuthTokenSuccess, root.RainbowAuthenticationPortal.GetOAuthTokenByIdSuccess, root.RainbowAuthenticationPortal.GetOAuthTokenSuccess);
  }
}(this, function(ApiClient, DeleteOAuthTokenSuccess, GetOAuthTokenByIdSuccess, GetOAuthTokenSuccess) {
  'use strict';

  /**
   * OauthTokens service.
   * @module api/OauthTokensApi
   * @version 1.104.0
   */

  /**
   * Constructs a new OauthTokensApi. 
   * @alias module:api/OauthTokensApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete an OAuth token
     * This API allows users to revoke OAuth token they have previously granted for applications. &lt;br/&gt; &lt;br/&gt; Once an OAuth token is revoked, the application for which this token has been issued will no longer be able to use Rainbow APIs in the name of the user.
     * @param {String} tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteOAuthTokenSuccess} and HTTP response
     */
    this.deleteOAuthTokenWithHttpInfo = function(tokenId, accept) {
      var postBody = null;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteOAuthToken");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteOAuthToken");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteOAuthTokenSuccess;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/oauth/tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an OAuth token
     * This API allows users to revoke OAuth token they have previously granted for applications. &lt;br/&gt; &lt;br/&gt; Once an OAuth token is revoked, the application for which this token has been issued will no longer be able to use Rainbow APIs in the name of the user.
     * @param {String} tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteOAuthTokenSuccess}
     */
    this.deleteOAuthToken = function(tokenId, accept) {
      return this.deleteOAuthTokenWithHttpInfo(tokenId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all OAuth token
     * This API allows users to list all OAuth tokens they have generated. &lt;br/&gt; &lt;br/&gt; An OAuth token is generated when an application logs a user using OAuth 2.0 protocol. An OAuth token gives the possibility for the application to use Rainbow APIs in the name of the user (delegation).
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (default to &#39;small&#39;)
     * @param {Number} opts.limit Allow to specify the number of OAuth tokens to retrieve. (default to 100.0)
     * @param {Number} opts.offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned.
     * @param {String} opts.sortField Sort OAuth tokens list based on the given field. (default to &#39;appName&#39;)
     * @param {module:model/Number} opts.sortOrder Specify order when sorting OAuth tokens list. (default to 1.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOAuthTokenSuccess} and HTTP response
     */
    this.getOAuthTokenWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOAuthToken");
      }


      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetOAuthTokenSuccess;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/oauth/tokens', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all OAuth token
     * This API allows users to list all OAuth tokens they have generated. &lt;br/&gt; &lt;br/&gt; An OAuth token is generated when an application logs a user using OAuth 2.0 protocol. An OAuth token gives the possibility for the application to use Rainbow APIs in the name of the user (delegation).
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (default to &#39;small&#39;)
     * @param {Number} opts.limit Allow to specify the number of OAuth tokens to retrieve. (default to 100.0)
     * @param {Number} opts.offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned.
     * @param {String} opts.sortField Sort OAuth tokens list based on the given field. (default to &#39;appName&#39;)
     * @param {module:model/Number} opts.sortOrder Specify order when sorting OAuth tokens list. (default to 1.0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOAuthTokenSuccess}
     */
    this.getOAuthToken = function(accept, opts) {
      return this.getOAuthTokenWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an OAuth token
     * This API allows users to get an OAuth token.
     * @param {String} tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOAuthTokenByIdSuccess} and HTTP response
     */
    this.getOAuthTokenByIdWithHttpInfo = function(tokenId, accept) {
      var postBody = null;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getOAuthTokenById");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOAuthTokenById");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetOAuthTokenByIdSuccess;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/oauth/tokens/{tokenId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an OAuth token
     * This API allows users to get an OAuth token.
     * @param {String} tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOAuthTokenByIdSuccess}
     */
    this.getOAuthTokenById = function(tokenId, accept) {
      return this.getOAuthTokenByIdWithHttpInfo(tokenId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
