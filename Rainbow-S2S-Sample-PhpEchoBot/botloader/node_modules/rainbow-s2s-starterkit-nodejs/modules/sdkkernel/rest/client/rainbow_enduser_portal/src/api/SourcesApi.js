/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateSource', 'model/CreateSourceSuccess', 'model/DeleteSourceSuccess', 'model/GetAllSourcesByUserIdSuccess', 'model/GetSourceDataSuccess', 'model/UpdateSourceData', 'model/UpdateSourceDataSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateSource'), require('../model/CreateSourceSuccess'), require('../model/DeleteSourceSuccess'), require('../model/GetAllSourcesByUserIdSuccess'), require('../model/GetSourceDataSuccess'), require('../model/UpdateSourceData'), require('../model/UpdateSourceDataSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.SourcesApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.CreateSource, root.RainbowEnduserPortal.CreateSourceSuccess, root.RainbowEnduserPortal.DeleteSourceSuccess, root.RainbowEnduserPortal.GetAllSourcesByUserIdSuccess, root.RainbowEnduserPortal.GetSourceDataSuccess, root.RainbowEnduserPortal.UpdateSourceData, root.RainbowEnduserPortal.UpdateSourceDataSuccess);
  }
}(this, function(ApiClient, CreateSource, CreateSourceSuccess, DeleteSourceSuccess, GetAllSourcesByUserIdSuccess, GetSourceDataSuccess, UpdateSourceData, UpdateSourceDataSuccess) {
  'use strict';

  /**
   * Sources service.
   * @module api/SourcesApi
   * @version 1.84.0
   */

  /**
   * Constructs a new SourcesApi. 
   * @alias module:api/SourcesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a source
     * A client could have one or more mobile devices as a source of contacts with his contacts stored in.    Also a source of contacts could be Microsoft Outlook / Linkedin or Facebook.    Contacts could be used for constructing recommendation rules.       SourceId must be unique for a given user.
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/CreateSource} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSourceSuccess} and HTTP response
     */
    this.createSourceWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createSource");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSource");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSourceSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/sources', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a source
     * A client could have one or more mobile devices as a source of contacts with his contacts stored in.    Also a source of contacts could be Microsoft Outlook / Linkedin or Facebook.    Contacts could be used for constructing recommendation rules.       SourceId must be unique for a given user.
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/CreateSource} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSourceSuccess}
     */
    this.createSource = function(userId, body) {
      return this.createSourceWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a source
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} sourceId Source unique identifier (like 56c4aebe31d144d947e385db)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSourceSuccess} and HTTP response
     */
    this.deleteSourceWithHttpInfo = function(userId, sourceId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteSource");
      }
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling deleteSource");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteSource");
      }

      var pathParams = {
        'userId': userId,
        'sourceId': sourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteSourceSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/sources/{sourceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a source
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} sourceId Source unique identifier (like 56c4aebe31d144d947e385db)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSourceSuccess}
     */
    this.deleteSource = function(userId, sourceId, accept) {
      return this.deleteSourceWithHttpInfo(userId, sourceId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all sources by userId
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less source details in response. > - `small`: id, sourceId > - `medium`: id, sourceId, os > - `full`: all source fields
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAllSourcesByUserIdSuccess} and HTTP response
     */
    this.getAllSourcesByUserIdWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAllSourcesByUserId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllSourcesByUserId");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'format': opts['format'],
        'sortField': opts['sortField'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetAllSourcesByUserIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/sources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all sources by userId
     * @param {String} userId User unique identifier (like 56c5c19f94141765119f896c)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less source details in response. > - `small`: id, sourceId > - `medium`: id, sourceId, os > - `full`: all source fields
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAllSourcesByUserIdSuccess}
     */
    this.getAllSourcesByUserId = function(userId, accept, opts) {
      return this.getAllSourcesByUserIdWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a source data
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} sourceId Source unique identifier (like 56c4aebe31d144d947e385db)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSourceDataSuccess} and HTTP response
     */
    this.getSourceDataWithHttpInfo = function(userId, sourceId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getSourceData");
      }
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling getSourceData");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSourceData");
      }

      var pathParams = {
        'userId': userId,
        'sourceId': sourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSourceDataSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/sources/{sourceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a source data
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} sourceId Source unique identifier (like 56c4aebe31d144d947e385db)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSourceDataSuccess}
     */
    this.getSourceData = function(userId, sourceId, accept) {
      return this.getSourceDataWithHttpInfo(userId, sourceId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a source data
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} sourceId Source unique identifier (like 56c4aebe31d144d947e385d
     * @param {module:model/UpdateSourceData} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSourceDataSuccess} and HTTP response
     */
    this.updateSourceDataWithHttpInfo = function(userId, sourceId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateSourceData");
      }
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling updateSourceData");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSourceData");
      }

      var pathParams = {
        'userId': userId,
        'sourceId': sourceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateSourceDataSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/sources/{sourceId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a source data
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} sourceId Source unique identifier (like 56c4aebe31d144d947e385d
     * @param {module:model/UpdateSourceData} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSourceDataSuccess}
     */
    this.updateSourceData = function(userId, sourceId, body) {
      return this.updateSourceDataWithHttpInfo(userId, sourceId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
