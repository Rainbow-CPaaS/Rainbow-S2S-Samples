/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RegisterMyselfPhoneNumbers', 'model/UpdateUserEmails'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./RegisterMyselfPhoneNumbers'), require('./UpdateUserEmails'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.RegisterMyself = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.RegisterMyselfPhoneNumbers, root.RainbowEnduserPortal.UpdateUserEmails);
  }
}(this, function(ApiClient, RegisterMyselfPhoneNumbers, UpdateUserEmails) {
  'use strict';



  /**
   * The RegisterMyself model module.
   * @module model/RegisterMyself
   * @version 1.84.0
   */

  /**
   * Constructs a new <code>RegisterMyself</code>.
   * @alias module:model/RegisterMyself
   * @class
   * @param loginEmail {String} User email address (used for login).    Must be unique (409 error is returned if a user already exists with the same email address).
   * @param password {String} User password.    Rules: more than 8 characters, at least 1 capital letter, 1 number, 1 special character.
   */
  var exports = function(loginEmail, password) {
    var _this = this;

    _this['loginEmail'] = loginEmail;
    _this['password'] = password;
  };

  /**
   * Constructs a <code>RegisterMyself</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RegisterMyself} obj Optional instance to populate.
   * @return {module:model/RegisterMyself} The populated <code>RegisterMyself</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('loginEmail')) {
        obj['loginEmail'] = ApiClient.convertToType(data['loginEmail'], 'String');
      }
      if (data.hasOwnProperty('password')) {
        obj['password'] = ApiClient.convertToType(data['password'], 'String');
      }
      if (data.hasOwnProperty('temporaryToken')) {
        obj['temporaryToken'] = ApiClient.convertToType(data['temporaryToken'], 'String');
      }
      if (data.hasOwnProperty('invitationId')) {
        obj['invitationId'] = ApiClient.convertToType(data['invitationId'], 'String');
      }
      if (data.hasOwnProperty('joinCompanyInvitationId')) {
        obj['joinCompanyInvitationId'] = ApiClient.convertToType(data['joinCompanyInvitationId'], 'String');
      }
      if (data.hasOwnProperty('openInviteId')) {
        obj['openInviteId'] = ApiClient.convertToType(data['openInviteId'], 'String');
      }
      if (data.hasOwnProperty('isInitialized')) {
        obj['isInitialized'] = ApiClient.convertToType(data['isInitialized'], 'Boolean');
      }
      if (data.hasOwnProperty('firstName')) {
        obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
      }
      if (data.hasOwnProperty('lastName')) {
        obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
      }
      if (data.hasOwnProperty('nickName')) {
        obj['nickName'] = ApiClient.convertToType(data['nickName'], 'String');
      }
      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('jobTitle')) {
        obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
      }
      if (data.hasOwnProperty('emails')) {
        obj['emails'] = UpdateUserEmails.constructFromObject(data['emails']);
      }
      if (data.hasOwnProperty('phoneNumbers')) {
        obj['phoneNumbers'] = RegisterMyselfPhoneNumbers.constructFromObject(data['phoneNumbers']);
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('language')) {
        obj['language'] = ApiClient.convertToType(data['language'], 'String');
      }
      if (data.hasOwnProperty('timezone')) {
        obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
      }
      if (data.hasOwnProperty('visibility')) {
        obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
      }
    }
    return obj;
  }

  /**
   * User email address (used for login).    Must be unique (409 error is returned if a user already exists with the same email address).
   * @member {String} loginEmail
   */
  exports.prototype['loginEmail'] = undefined;
  /**
   * User password.    Rules: more than 8 characters, at least 1 capital letter, 1 number, 1 special character.
   * @member {String} password
   */
  exports.prototype['password'] = undefined;
  /**
   * User temporary token (obtained from [POST /api/rainbow/enduser/v1.0/notifications/emails/self-register][0] API) (do not use if invitationId or joinCompanyInvitationId is specified).  [0]: #api-enduser_notifications_emails-EmailSelfRegister
   * @member {String} temporaryToken
   */
  exports.prototype['temporaryToken'] = undefined;
  /**
   * User invitation unique identifier (like 569ce8c8f9336c471b98eda4) (obtained from [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user][0] API) (do not use if temporaryToken or joinCompanyInvitationId is specified).  [0]: #api-enduser_notifications_emails-enduser_InviteByEndUser
   * @member {String} invitationId
   */
  exports.prototype['invitationId'] = undefined;
  /**
   * Join company invitation unique identifier (like 5819ed7c9547b313509237d6) (obtained from [POST /api/rainbow/admin/v1.0/companies/:companyId/join-companies/invitations][0] API) (do not use if temporaryToken or invitationId is specified).  [0]: /admin/#api-join_company_invitations-admin_PostJoinCompanyInvite
   * @member {String} joinCompanyInvitationId
   */
  exports.prototype['joinCompanyInvitationId'] = undefined;
  /**
   * A Rainbow user is sharing with co-workers an unique URL to join a meeting. This URL is used by somebody not yet a Rainbow user (doesn't have a Rainbow account). Some explanations about this use case:   * Each user has a personal UUID. In the api documentation, this UUID is called **openInviteId**. It can be generated on demand. * The public URL is based on this openInviteId (ex: https://web.openrainbow.com/#/invite?invitationId=0fc06e0ce4a849fcbe214ae5e1107417&scenario=public-url) * Refer to /api/rainbow/enduser/v1.0/users/:userId/open-invites/xxxx API(s) to manage the openInviteId  
   * @member {String} openInviteId
   */
  exports.prototype['openInviteId'] = undefined;
  /**
   * Is user initialized
   * @member {Boolean} isInitialized
   * @default false
   */
  exports.prototype['isInitialized'] = false;
  /**
   * User first name
   * @member {String} firstName
   */
  exports.prototype['firstName'] = undefined;
  /**
   * User last name
   * @member {String} lastName
   */
  exports.prototype['lastName'] = undefined;
  /**
   * User nickName
   * @member {String} nickName
   */
  exports.prototype['nickName'] = undefined;
  /**
   * User title (honorifics title, like Mr, Mrs, Sir, Lord, Lady, Dr, Prof,...)
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * User job title
   * @member {String} jobTitle
   */
  exports.prototype['jobTitle'] = undefined;
  /**
   * @member {module:model/UpdateUserEmails} emails
   */
  exports.prototype['emails'] = undefined;
  /**
   * @member {module:model/RegisterMyselfPhoneNumbers} phoneNumbers
   */
  exports.prototype['phoneNumbers'] = undefined;
  /**
   * User country (ISO 3166-1 alpha3 format)
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * When country is 'USA' or 'CAN', a state can be defined. Else it is not managed.    USA states code list: `AA`:\"Armed Forces America\", `AE`:\"Armed Forces\", `AP`:\"Armed Forces Pacific\", `AK`:\"Alaska\", `AL`:\"Alabama\", `AR`:\"Arkansas\", `AZ`:\"Arizona\", `CA`:\"California\", `CO`:\"Colorado\", `CT`:\"Connecticut\", `DC`:\"Washington DC\", `DE`:\"Delaware\", `FL`:\"Florida\", `GA`:\"Georgia\", `GU`:\"Guam\", `HI`:\"Hawaii\", `IA`:\"Iowa\", `ID`:\"Idaho\", `IL`:\"Illinois\", `IN`:\"Indiana\", `KS`:\"Kansas\", `KY`:\"Kentucky\", `LA`:\"Louisiana\", `MA`:\"Massachusetts\", `MD`:\"Maryland\", `ME`:\"Maine\", `MI`:\"Michigan\", `MN`:\"Minnesota\", `MO`:\"Missouri\", `MS`:\"Mississippi\", `MT`:\"Montana\", `NC`:\"North Carolina\", `ND`:\"North Dakota\", `NE`:\"Nebraska\", `NH`:\"New Hampshire\", `NJ`:\"New Jersey\", `NM`:\"New Mexico\", `NV`:\"Nevada\", `NY`:\"New York\", `OH`:\"Ohio\", `OK`:\"Oklahoma\", `OR`:\"Oregon\", `PA`:\"Pennsylvania\", `PR`:\"Puerto Rico\", `RI`:\"Rhode Island\", `SC`:\"South Carolina\", `SD`:\"South Dakota\", `TN`:\"Tennessee\", `TX`:\"Texas\", `UT`:\"Utah\", `VA`:\"Virginia\", `VI`:\"Virgin Islands\", `VT`:\"Vermont\", `WA`:\"Washington\", `WI`:\"Wisconsin\", `WV`:\"West Virginia\", `WY`:\"Wyoming\"    Canada states code list: `AB`: \"Alberta\", `BC`: \"British Columbia\", `MB`: \"Manitoba\", `NB`: \"New Brunswick\", `NL`: \"Newfoundland and Labrador\", `NS`: \"Nova Scotia\", `NT`: \"Northwest Territories\", `NU`: \"Nunavut\", `ON`: \"Ontario\", `PE`: \"Prince Edward Island\", `QC`: \"Quebec\", `SK`: \"Saskatchewan\", `YT`: \"Yukon\" 
   * @member {module:model/RegisterMyself.StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * User language       Language format is composed of locale using format `ISO 639-1`, with optionally the regional variation using `ISO 3166‑1 alpha-2` (separated by hyphen).    Locale part is in lowercase, regional part is in uppercase. Examples: en, en-US, fr, fr-FR, fr-CA, es-ES, es-MX, ...    More information about the format can be found on this [link][0].  [0]: https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes
   * @member {String} language
   */
  exports.prototype['language'] = undefined;
  /**
   * User timezone name       Allowed values: one of the timezone names defined in [IANA tz database][0]   Timezone name are composed as follow: `Area/Location` (ex: Europe/Paris, America/New_York,...)  [0]: https://www.iana.org/time-zones
   * @member {String} timezone
   */
  exports.prototype['timezone'] = undefined;
  /**
   * User visibility (define if users can be searched of not, overwrite visibility setting at company level)
   * @member {module:model/RegisterMyself.VisibilityEnum} visibility
   */
  exports.prototype['visibility'] = undefined;


  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "null"
     * @const
     */
    "null": "null",
    /**
     * value: "AA"
     * @const
     */
    "AA": "AA",
    /**
     * value: "AE"
     * @const
     */
    "AE": "AE",
    /**
     * value: "AP"
     * @const
     */
    "AP": "AP",
    /**
     * value: "AK"
     * @const
     */
    "AK": "AK",
    /**
     * value: "AL"
     * @const
     */
    "AL": "AL",
    /**
     * value: "AR"
     * @const
     */
    "AR": "AR",
    /**
     * value: "AZ"
     * @const
     */
    "AZ": "AZ",
    /**
     * value: "CA"
     * @const
     */
    "CA": "CA",
    /**
     * value: "CO"
     * @const
     */
    "CO": "CO",
    /**
     * value: "CT"
     * @const
     */
    "CT": "CT",
    /**
     * value: "DC"
     * @const
     */
    "DC": "DC",
    /**
     * value: "DE"
     * @const
     */
    "DE": "DE",
    /**
     * value: "FL"
     * @const
     */
    "FL": "FL",
    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",
    /**
     * value: "GU"
     * @const
     */
    "GU": "GU",
    /**
     * value: "HI"
     * @const
     */
    "HI": "HI",
    /**
     * value: "IA"
     * @const
     */
    "IA": "IA",
    /**
     * value: "ID"
     * @const
     */
    "ID": "ID",
    /**
     * value: "IL"
     * @const
     */
    "IL": "IL",
    /**
     * value: "IN"
     * @const
     */
    "IN": "IN",
    /**
     * value: "KS"
     * @const
     */
    "KS": "KS",
    /**
     * value: "KY"
     * @const
     */
    "KY": "KY",
    /**
     * value: "LA"
     * @const
     */
    "LA": "LA",
    /**
     * value: "MA"
     * @const
     */
    "MA": "MA",
    /**
     * value: "MD"
     * @const
     */
    "MD": "MD",
    /**
     * value: "ME"
     * @const
     */
    "ME": "ME",
    /**
     * value: "MI"
     * @const
     */
    "MI": "MI",
    /**
     * value: "MN"
     * @const
     */
    "MN": "MN",
    /**
     * value: "MO"
     * @const
     */
    "MO": "MO",
    /**
     * value: "MS"
     * @const
     */
    "MS": "MS",
    /**
     * value: "MT"
     * @const
     */
    "MT": "MT",
    /**
     * value: "NC"
     * @const
     */
    "NC": "NC",
    /**
     * value: "ND"
     * @const
     */
    "ND": "ND",
    /**
     * value: "NE"
     * @const
     */
    "NE": "NE",
    /**
     * value: "NH"
     * @const
     */
    "NH": "NH",
    /**
     * value: "NJ"
     * @const
     */
    "NJ": "NJ",
    /**
     * value: "NM"
     * @const
     */
    "NM": "NM",
    /**
     * value: "NV"
     * @const
     */
    "NV": "NV",
    /**
     * value: "NY"
     * @const
     */
    "NY": "NY",
    /**
     * value: "OH"
     * @const
     */
    "OH": "OH",
    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",
    /**
     * value: "OR"
     * @const
     */
    "OR": "OR",
    /**
     * value: "PA"
     * @const
     */
    "PA": "PA",
    /**
     * value: "PR"
     * @const
     */
    "PR": "PR",
    /**
     * value: "RI"
     * @const
     */
    "RI": "RI",
    /**
     * value: "SC"
     * @const
     */
    "SC": "SC",
    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",
    /**
     * value: "TN"
     * @const
     */
    "TN": "TN",
    /**
     * value: "TX"
     * @const
     */
    "TX": "TX",
    /**
     * value: "UT"
     * @const
     */
    "UT": "UT",
    /**
     * value: "VA"
     * @const
     */
    "VA": "VA",
    /**
     * value: "VI"
     * @const
     */
    "VI": "VI",
    /**
     * value: "VT"
     * @const
     */
    "VT": "VT",
    /**
     * value: "WA"
     * @const
     */
    "WA": "WA",
    /**
     * value: "WI"
     * @const
     */
    "WI": "WI",
    /**
     * value: "WV"
     * @const
     */
    "WV": "WV",
    /**
     * value: "WY"
     * @const
     */
    "WY": "WY",
    /**
     * value: "AB"
     * @const
     */
    "AB": "AB",
    /**
     * value: "BC"
     * @const
     */
    "BC": "BC",
    /**
     * value: "MB"
     * @const
     */
    "MB": "MB",
    /**
     * value: "NB"
     * @const
     */
    "NB": "NB",
    /**
     * value: "NL"
     * @const
     */
    "NL": "NL",
    /**
     * value: "NS"
     * @const
     */
    "NS": "NS",
    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",
    /**
     * value: "NU"
     * @const
     */
    "NU": "NU",
    /**
     * value: "ON"
     * @const
     */
    "ON": "ON",
    /**
     * value: "PE"
     * @const
     */
    "PE": "PE",
    /**
     * value: "QC"
     * @const
     */
    "QC": "QC",
    /**
     * value: "SK"
     * @const
     */
    "SK": "SK",
    /**
     * value: "YT"
     * @const
     */
    "YT": "YT"  };

  /**
   * Allowed values for the <code>visibility</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VisibilityEnum = {
    /**
     * value: "public"
     * @const
     */
    "public": "public",
    /**
     * value: "private"
     * @const
     */
    "private": "private",
    /**
     * value: "none"
     * @const
     */
    "none": "none"  };


  return exports;
}));


