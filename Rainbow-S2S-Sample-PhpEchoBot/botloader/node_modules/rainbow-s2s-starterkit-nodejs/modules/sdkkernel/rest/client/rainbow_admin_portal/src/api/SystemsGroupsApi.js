/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteSystemsFromGroupIdSuccess', 'model/DeleteSystemsGroupIdSuccess', 'model/GetSystemsGroupIdSuccess', 'model/GetSystemsGroupsSuccess', 'model/PostSystemsGroups', 'model/PostSystemsGroupsSuccess', 'model/PutSystemsGroupIdSuccess', 'model/PutSystemsGroupNameId', 'model/PutSystemsGroupNameIdSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteSystemsFromGroupIdSuccess'), require('../model/DeleteSystemsGroupIdSuccess'), require('../model/GetSystemsGroupIdSuccess'), require('../model/GetSystemsGroupsSuccess'), require('../model/PostSystemsGroups'), require('../model/PostSystemsGroupsSuccess'), require('../model/PutSystemsGroupIdSuccess'), require('../model/PutSystemsGroupNameId'), require('../model/PutSystemsGroupNameIdSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.SystemsGroupsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.DeleteSystemsFromGroupIdSuccess, root.RainbowAdminPortal.DeleteSystemsGroupIdSuccess, root.RainbowAdminPortal.GetSystemsGroupIdSuccess, root.RainbowAdminPortal.GetSystemsGroupsSuccess, root.RainbowAdminPortal.PostSystemsGroups, root.RainbowAdminPortal.PostSystemsGroupsSuccess, root.RainbowAdminPortal.PutSystemsGroupIdSuccess, root.RainbowAdminPortal.PutSystemsGroupNameId, root.RainbowAdminPortal.PutSystemsGroupNameIdSuccess);
  }
}(this, function(ApiClient, DeleteSystemsFromGroupIdSuccess, DeleteSystemsGroupIdSuccess, GetSystemsGroupIdSuccess, GetSystemsGroupsSuccess, PostSystemsGroups, PostSystemsGroupsSuccess, PutSystemsGroupIdSuccess, PutSystemsGroupNameId, PutSystemsGroupNameIdSuccess) {
  'use strict';

  /**
   * SystemsGroups service.
   * @module api/SystemsGroupsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new SystemsGroupsApi. 
   * @alias module:api/SystemsGroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Remove a system from a group
     * Remove system to a group. If the system doesn't exist in the group, an error is raised (404 Not found)    A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    Waiting for a real use case, it is possible to federate inside the same group, systems belonging to companies under the same organization.
     * @param {String} systemId System unique identifier
     * @param {String} groupId SystemsGroup unique identifier
     * @param {String} accept application/json
     * @param {String} contentType application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSystemsFromGroupIdSuccess} and HTTP response
     */
    this.deleteSystemsFromGroupIdWithHttpInfo = function(systemId, groupId, accept, contentType) {
      var postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling deleteSystemsFromGroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteSystemsFromGroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteSystemsFromGroupId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteSystemsFromGroupId");
      }

      var pathParams = {
        'systemId': systemId,
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept,
        'content-type': contentType
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteSystemsFromGroupIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/{systemId}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a system from a group
     * Remove system to a group. If the system doesn't exist in the group, an error is raised (404 Not found)    A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    Waiting for a real use case, it is possible to federate inside the same group, systems belonging to companies under the same organization.
     * @param {String} systemId System unique identifier
     * @param {String} groupId SystemsGroup unique identifier
     * @param {String} accept application/json
     * @param {String} contentType application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSystemsFromGroupIdSuccess}
     */
    this.deleteSystemsFromGroupId = function(systemId, groupId, accept, contentType) {
      return this.deleteSystemsFromGroupIdWithHttpInfo(systemId, groupId, accept, contentType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a systems group
     * Delete a systems groups.
     * @param {String} groupId SystemsGroup unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSystemsGroupIdSuccess} and HTTP response
     */
    this.deleteSystemsGroupIdWithHttpInfo = function(groupId, accept) {
      var postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteSystemsGroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteSystemsGroupId");
      }

      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteSystemsGroupIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/groups/{groupId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a systems group
     * Delete a systems groups.
     * @param {String} groupId SystemsGroup unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSystemsGroupIdSuccess}
     */
    this.deleteSystemsGroupId = function(groupId, accept) {
      return this.deleteSystemsGroupIdWithHttpInfo(groupId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get systems group data
     * A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.       According with api permission, the response is not the same.    - Superadmin, Support and organization_admin must see all Systems inside the group.    - bp_admin, company_admin may see Systems hosted by sites under his company.    - site_admin only see systems of his site, inside the group>.
     * @param {String} groupId SystemsGroup unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemsGroupIdSuccess} and HTTP response
     */
    this.getSystemsGroupIdWithHttpInfo = function(groupId, accept) {
      var postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getSystemsGroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSystemsGroupId");
      }

      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSystemsGroupIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/groups/{groupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get systems group data
     * A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.       According with api permission, the response is not the same.    - Superadmin, Support and organization_admin must see all Systems inside the group.    - bp_admin, company_admin may see Systems hosted by sites under his company.    - site_admin only see systems of his site, inside the group>.
     * @param {String} groupId SystemsGroup unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemsGroupIdSuccess}
     */
    this.getSystemsGroupId = function(groupId, accept) {
      return this.getSystemsGroupIdWithHttpInfo(groupId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all systems groups
     * Get all systems groups.    A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    According with api permission, the response is not the same.    - Superadmin and Support see all SystemsGroups    - bp_admin, organization_admin and company_admin may see several SystemsGroups, **but some systems could be hidden for company_admin**.    - site_admin only see SystemsGroups hosting some systems of his site, **but some systems could be hidden as they are hosted by another site**.
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Allows to filter groups list on the given keyword(s) on field name. The filtering is **not case insensitive** and on partial name match: all groups containing the provided name value will be returned (whatever the position of the match). Ex: if filtering is done on comp, group with the following names are match the filter 'My Group', 'Group', 'A Group 1', 'Group of', ...
     * @param {String} opts.format Should allow to retrieve more or less group details in response. But in fact whatever the choice:    - `small`: _id, name, companies, systems (all SystemsGroup fields)    - `medium`: all SystemsGroup fields    - `full`: all SystemsGroup fields
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first company to retrieve (first company if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort company list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting company list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemsGroupsSuccess} and HTTP response
     */
    this.getSystemsGroupsWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSystemsGroups");
      }

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSystemsGroupsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all systems groups
     * Get all systems groups.    A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    According with api permission, the response is not the same.    - Superadmin and Support see all SystemsGroups    - bp_admin, organization_admin and company_admin may see several SystemsGroups, **but some systems could be hidden for company_admin**.    - site_admin only see SystemsGroups hosting some systems of his site, **but some systems could be hidden as they are hosted by another site**.
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Allows to filter groups list on the given keyword(s) on field name. The filtering is **not case insensitive** and on partial name match: all groups containing the provided name value will be returned (whatever the position of the match). Ex: if filtering is done on comp, group with the following names are match the filter 'My Group', 'Group', 'A Group 1', 'Group of', ...
     * @param {String} opts.format Should allow to retrieve more or less group details in response. But in fact whatever the choice:    - `small`: _id, name, companies, systems (all SystemsGroup fields)    - `medium`: all SystemsGroup fields    - `full`: all SystemsGroup fields
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first company to retrieve (first company if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort company list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting company list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemsGroupsSuccess}
     */
    this.getSystemsGroups = function(accept, opts) {
      return this.getSystemsGroupsWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a systems group
     * A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    Waiting for a real use case, it is possible to federate inside the same group, systems belonging to companies under the same organization.    It's not possible to include multi-tenant systems (isCentrex = true) inside a systems group.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A multi-tenant system can't be set inside a systems group. That does not make sense.
     * @param {module:model/PostSystemsGroups} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostSystemsGroupsSuccess} and HTTP response
     */
    this.postSystemsGroupsWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSystemsGroups");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostSystemsGroupsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a systems group
     * A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    Waiting for a real use case, it is possible to federate inside the same group, systems belonging to companies under the same organization.    It's not possible to include multi-tenant systems (isCentrex = true) inside a systems group.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A multi-tenant system can't be set inside a systems group. That does not make sense.
     * @param {module:model/PostSystemsGroups} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostSystemsGroupsSuccess}
     */
    this.postSystemsGroups = function(body) {
      return this.postSystemsGroupsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new system to a group
     * Add a new system to a group. If the system already exists in the group or inside another one, an error is raised (409 Conflict)    A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    Waiting for a real use case, it is possible to federate inside the same group, systems belonging to companies under the same organization.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A multi-tenant system can't be set inside a systems group. That does not make sense.
     * @param {String} systemId System unique identifier
     * @param {String} groupId SystemsGroup unique identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutSystemsGroupIdSuccess} and HTTP response
     */
    this.putSystemsGroupIdWithHttpInfo = function(systemId, groupId) {
      var postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling putSystemsGroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling putSystemsGroupId");
      }

      var pathParams = {
        'systemId': systemId,
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PutSystemsGroupIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/{systemId}/groups/{groupId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a new system to a group
     * Add a new system to a group. If the system already exists in the group or inside another one, an error is raised (409 Conflict)    A systems group is a logical set of systems (pabx), sharing the same dial plan and linked through a private network.    Systems belonging to this group may either belonging to the same Site, or belonging from several sites under the same company.    Waiting for a real use case, it is possible to federate inside the same group, systems belonging to companies under the same organization.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A multi-tenant system can't be set inside a systems group. That does not make sense.
     * @param {String} systemId System unique identifier
     * @param {String} groupId SystemsGroup unique identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutSystemsGroupIdSuccess}
     */
    this.putSystemsGroupId = function(systemId, groupId) {
      return this.putSystemsGroupIdWithHttpInfo(systemId, groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a systems group
     * Only allow a systems group renaming.
     * @param {String} groupId SystemsGroup unique identifier
     * @param {module:model/PutSystemsGroupNameId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutSystemsGroupNameIdSuccess} and HTTP response
     */
    this.putSystemsGroupNameIdWithHttpInfo = function(groupId, body) {
      var postBody = body;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling putSystemsGroupNameId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSystemsGroupNameId");
      }

      var pathParams = {
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PutSystemsGroupNameIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/systems/groups/{groupId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a systems group
     * Only allow a systems group renaming.
     * @param {String} groupId SystemsGroup unique identifier
     * @param {module:model/PutSystemsGroupNameId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutSystemsGroupNameIdSuccess}
     */
    this.putSystemsGroupNameId = function(groupId, body) {
      return this.putSystemsGroupNameIdWithHttpInfo(groupId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
