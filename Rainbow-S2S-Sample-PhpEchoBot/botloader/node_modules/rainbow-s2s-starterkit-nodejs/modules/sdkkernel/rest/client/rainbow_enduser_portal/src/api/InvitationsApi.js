/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AcceptUserInvitationSuccess', 'model/CancelUserInvitationSuccess', 'model/CreateUserBulkInvitations', 'model/CreateUserBulkInvitationsSuccess', 'model/CreateUserInvitation', 'model/CreateUserInvitationSuccess', 'model/DeclineUserInvitationSuccess', 'model/DeleteUserInvitationSuccess', 'model/GetAllReceivedInvitationSuccess', 'model/GetAllSentInvitionSuccess', 'model/GetUserInvitationSuccess', 'model/ResendUserInvitation', 'model/ResendUserInvitationSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AcceptUserInvitationSuccess'), require('../model/CancelUserInvitationSuccess'), require('../model/CreateUserBulkInvitations'), require('../model/CreateUserBulkInvitationsSuccess'), require('../model/CreateUserInvitation'), require('../model/CreateUserInvitationSuccess'), require('../model/DeclineUserInvitationSuccess'), require('../model/DeleteUserInvitationSuccess'), require('../model/GetAllReceivedInvitationSuccess'), require('../model/GetAllSentInvitionSuccess'), require('../model/GetUserInvitationSuccess'), require('../model/ResendUserInvitation'), require('../model/ResendUserInvitationSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.InvitationsApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.AcceptUserInvitationSuccess, root.RainbowEnduserPortal.CancelUserInvitationSuccess, root.RainbowEnduserPortal.CreateUserBulkInvitations, root.RainbowEnduserPortal.CreateUserBulkInvitationsSuccess, root.RainbowEnduserPortal.CreateUserInvitation, root.RainbowEnduserPortal.CreateUserInvitationSuccess, root.RainbowEnduserPortal.DeclineUserInvitationSuccess, root.RainbowEnduserPortal.DeleteUserInvitationSuccess, root.RainbowEnduserPortal.GetAllReceivedInvitationSuccess, root.RainbowEnduserPortal.GetAllSentInvitionSuccess, root.RainbowEnduserPortal.GetUserInvitationSuccess, root.RainbowEnduserPortal.ResendUserInvitation, root.RainbowEnduserPortal.ResendUserInvitationSuccess);
  }
}(this, function(ApiClient, AcceptUserInvitationSuccess, CancelUserInvitationSuccess, CreateUserBulkInvitations, CreateUserBulkInvitationsSuccess, CreateUserInvitation, CreateUserInvitationSuccess, DeclineUserInvitationSuccess, DeleteUserInvitationSuccess, GetAllReceivedInvitationSuccess, GetAllSentInvitionSuccess, GetUserInvitationSuccess, ResendUserInvitation, ResendUserInvitationSuccess) {
  'use strict';

  /**
   * Invitations service.
   * @module api/InvitationsApi
   * @version 1.84.0
   */

  /**
   * Constructs a new InvitationsApi. 
   * @alias module:api/InvitationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Accept a user invitation
     * This API can be used to accept an invitation sent by another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Once invitation is accepted, invited and inviting user will be in each other roster and will be mutually visible (search API, GET users, GET users/:userId, ...).       Inviting and invited user are both notified with an XMPP message that the invitation has been accepted.    For inviting user, type is `sent`.    For invited user, type is `received`.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='accepted' xmlns='jabber:iq:configuration'/>     </message> ```       Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72/accept
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AcceptUserInvitationSuccess} and HTTP response
     */
    this.acceptUserInvitationWithHttpInfo = function(userId, invitationId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling acceptUserInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling acceptUserInvitation");
      }

      var pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AcceptUserInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/{invitationId}/accept', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept a user invitation
     * This API can be used to accept an invitation sent by another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Once invitation is accepted, invited and inviting user will be in each other roster and will be mutually visible (search API, GET users, GET users/:userId, ...).       Inviting and invited user are both notified with an XMPP message that the invitation has been accepted.    For inviting user, type is `sent`.    For invited user, type is `received`.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='accepted' xmlns='jabber:iq:configuration'/>     </message> ```       Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72/accept
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AcceptUserInvitationSuccess}
     */
    this.acceptUserInvitation = function(userId, invitationId) {
      return this.acceptUserInvitationWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel a user invitation
     * This API can be used to cancel an invitation sent to a user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Invitation can only be canceled if it is pending.    If invited user exists in Rainbow, he can't use the canceled invitation anymore to accept inviting user visibility request.    If invited user does not have a Rainbow account, he can still use the invitationId of a canceled invitation to register in Rainbow (this validates his email address) but once registered he won't be added to invited user's roster.       Invited user is notified with an XMPP message that the invitation has been canceled.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='sent' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    If invited user exist in Rainbow, he is also notified that the invitation has been canceled with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72/cancel
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CancelUserInvitationSuccess} and HTTP response
     */
    this.cancelUserInvitationWithHttpInfo = function(userId, invitationId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling cancelUserInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling cancelUserInvitation");
      }

      var pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CancelUserInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/{invitationId}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a user invitation
     * This API can be used to cancel an invitation sent to a user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Invitation can only be canceled if it is pending.    If invited user exists in Rainbow, he can't use the canceled invitation anymore to accept inviting user visibility request.    If invited user does not have a Rainbow account, he can still use the invitationId of a canceled invitation to register in Rainbow (this validates his email address) but once registered he won't be added to invited user's roster.       Invited user is notified with an XMPP message that the invitation has been canceled.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='sent' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    If invited user exist in Rainbow, he is also notified that the invitation has been canceled with the following message:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72/cancel
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CancelUserInvitationSuccess}
     */
    this.cancelUserInvitation = function(userId, invitationId) {
      return this.cancelUserInvitationWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create user invitations by bulk
     * This API allows logged in user to send invitations to other users by bulk (up to 100 emails).       The invitations are sent asynchronously. Only synchronous validation is performed on the provided emails (format, ...). The results of this synchronous validation ir returned directly in the response, for all the asynchronous validations the client will not be aware of the errors.    The client will be notified though XMPP notifications for each created invitations.       Same rules applies than for API POST /api/rainbow/enduser/v1.0/users/:userId/invitations, except that only invitation by email is implemented.
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/CreateUserBulkInvitations} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUserBulkInvitationsSuccess} and HTTP response
     */
    this.createUserBulkInvitationsWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserBulkInvitations");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUserBulkInvitations");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateUserBulkInvitationsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/bulk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create user invitations by bulk
     * This API allows logged in user to send invitations to other users by bulk (up to 100 emails).       The invitations are sent asynchronously. Only synchronous validation is performed on the provided emails (format, ...). The results of this synchronous validation ir returned directly in the response, for all the asynchronous validations the client will not be aware of the errors.    The client will be notified though XMPP notifications for each created invitations.       Same rules applies than for API POST /api/rainbow/enduser/v1.0/users/:userId/invitations, except that only invitation by email is implemented.
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/CreateUserBulkInvitations} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUserBulkInvitationsSuccess}
     */
    this.createUserBulkInvitations = function(userId, body) {
      return this.createUserBulkInvitationsWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a user invitation
     * This API allows logged in user to invite another user.       At the end of the process, if invited user accepts the invitation, invited user and inviting user will be searchable mutually and will be in each other rosters.       **Note** It's not possible to invite users having only the role `guest`. (CPAAS user)   From **1.53.0**, a user can be embedded in a chat or conference room, as guest, with limited rights until he finalizes his registration. It is not a user with the role `guest`. This user gets the role `user` and the flag `guestMode` is set to true, waiting for the user finalizes his account. Besides, his `visibility` is 'none'. We can't invite this kind of user to join the logged in network. (HTTP error 403509)   Here are some details about this API and user invitation features.    Users can be invited:   * by `email`:    * If the provided email corresponds to the loginEmail of a Rainbow user, a visibility request is sent (if this Rainbow user is not in logged in user roster).      * An InviteUser entry is stored in database (with a generated invitationId).     * The invited user receive an email with a validation link (containing the invitationId).     * The invited user is notified with an XMPP message (containing the invitationId).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite action=\"create\" id='57cd5922d341df5812bbcb72' type='received' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     * The inviting user is notified with an XMPP message (containing the invitationId) (useful for multi-device).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite action=\"create\" id='57cd5922d341df5812bbcb72' type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     * The list of all visibility requests received by the logged in user (invited user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/received(?status=pending|accepted|auto-accepted|declined)][0]     * The list of all visibility requests sent by the logged in user (inviting user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][1]     * The inviting user can re-send a visibility request notification (only by email) using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][2]     * To accept the visibility request (invited user side), client has to call API [POST /api/rainbow/enduser/v1.0/users/:userId/invitations/:invitationId/accept][3]   Once accepted, invited and inviting user will be in each other roster and will be mutually visible (search API, GET users, GET users/:userId, ...)     * To decline the visibility request (invited user side), client has to call API [POST /api/rainbow/enduser/v1.0/users/:userId/invitations/:invitationId/decline][4]   * If the provided email is not known in Rainbow, an invitation is sent to this email to invite the person to create a Rainbow account      * An InviteUser entry is stored in database (with a generated invitationId).     * The invited user receive an email with a creation link (containing the invitationId).     * The inviting user is notified with an XMPP message (containing the invitationId) (useful for multi-device).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"create\" type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     * The list of all visibility requests sent by the logged in user (inviting user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][1]     * The inviting user can re-send a visibility request notification (only by email) using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][2]     * To create his Rainbow account, the invited user has to use API \"Self register a user\" ([POST /api/rainbow/enduser/v1.0/users/self-register][5]) * by phoneNumber (`invitedPhoneNumber`):    * No match is done on potential existing Rainbow users.   * An InviteUser entry is stored in database (with a generated invitationId).   * No email is sent to invited user. It is **up to clients calling this API to send an SMS to the invited user's phone** (with the invitationId).   * The inviting user is notified with an XMPP message (containing the invitationId) (useful for multi-device).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"create\" type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```   * If the invitedPhoneNumber correspond to a user already existing in Rainbow, he **will not** be able to see the request using the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/received(?status=pending|accepted|auto-accepted|declined)][0], as no match is done between the invitedPhoneNumber and a potential user existing in Rainbow   * The list of all visibility requests sent by the logged in user (inviting user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][1]   * The inviting user can re-send a visibility request notification done by phoneNumber using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][2], however it is still **up to client to send an SMS to the invited user's phone** (the API only updates the field lastNotificationDate). If needed, it is **up to clients to re-send the SMS to the invited user's phone**.   * To create his Rainbow account, the invited user has to use API \"Self register a user\" using the associated invitationId ([POST /api/rainbow/enduser/v1.0/users/self-register][5]) * by Rainbow user id (`invitedUserId`):    * if no user is found with the provided invitedUserId, an error 404 is returned   * otherwise, a visibility request is sent (if this Rainbow user is not in logged in user roster).    Same documentation than existing user invited by email apply (see above).     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/5821f986394c356580c3c86d/invitations  [0]: #api-enduser_invitations-enduser_users_GetReceivedInvites [1]: #api-enduser_invitations-enduser_users_GetSentInvites [2]: #api-enduser_notifications_emails-enduser_ResendInvite [3]: #api-enduser_invitations-enduser_users_AcceptInvites [4]: #api-enduser_invitations-enduser_users_DeclineInvites [5]: #api-enduser_users-enduser_SelfRegisterUsers
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/CreateUserInvitation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateUserInvitationSuccess} and HTTP response
     */
    this.createUserInvitationWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createUserInvitation");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUserInvitation");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateUserInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a user invitation
     * This API allows logged in user to invite another user.       At the end of the process, if invited user accepts the invitation, invited user and inviting user will be searchable mutually and will be in each other rosters.       **Note** It's not possible to invite users having only the role `guest`. (CPAAS user)   From **1.53.0**, a user can be embedded in a chat or conference room, as guest, with limited rights until he finalizes his registration. It is not a user with the role `guest`. This user gets the role `user` and the flag `guestMode` is set to true, waiting for the user finalizes his account. Besides, his `visibility` is 'none'. We can't invite this kind of user to join the logged in network. (HTTP error 403509)   Here are some details about this API and user invitation features.    Users can be invited:   * by `email`:    * If the provided email corresponds to the loginEmail of a Rainbow user, a visibility request is sent (if this Rainbow user is not in logged in user roster).      * An InviteUser entry is stored in database (with a generated invitationId).     * The invited user receive an email with a validation link (containing the invitationId).     * The invited user is notified with an XMPP message (containing the invitationId).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite action=\"create\" id='57cd5922d341df5812bbcb72' type='received' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     * The inviting user is notified with an XMPP message (containing the invitationId) (useful for multi-device).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite action=\"create\" id='57cd5922d341df5812bbcb72' type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     * The list of all visibility requests received by the logged in user (invited user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/received(?status=pending|accepted|auto-accepted|declined)][0]     * The list of all visibility requests sent by the logged in user (inviting user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][1]     * The inviting user can re-send a visibility request notification (only by email) using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][2]     * To accept the visibility request (invited user side), client has to call API [POST /api/rainbow/enduser/v1.0/users/:userId/invitations/:invitationId/accept][3]   Once accepted, invited and inviting user will be in each other roster and will be mutually visible (search API, GET users, GET users/:userId, ...)     * To decline the visibility request (invited user side), client has to call API [POST /api/rainbow/enduser/v1.0/users/:userId/invitations/:invitationId/decline][4]   * If the provided email is not known in Rainbow, an invitation is sent to this email to invite the person to create a Rainbow account      * An InviteUser entry is stored in database (with a generated invitationId).     * The invited user receive an email with a creation link (containing the invitationId).     * The inviting user is notified with an XMPP message (containing the invitationId) (useful for multi-device).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"create\" type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     * The list of all visibility requests sent by the logged in user (inviting user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][1]     * The inviting user can re-send a visibility request notification (only by email) using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][2]     * To create his Rainbow account, the invited user has to use API \"Self register a user\" ([POST /api/rainbow/enduser/v1.0/users/self-register][5]) * by phoneNumber (`invitedPhoneNumber`):    * No match is done on potential existing Rainbow users.   * An InviteUser entry is stored in database (with a generated invitationId).   * No email is sent to invited user. It is **up to clients calling this API to send an SMS to the invited user's phone** (with the invitationId).   * The inviting user is notified with an XMPP message (containing the invitationId) (useful for multi-device).      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"create\" type='sent' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```   * If the invitedPhoneNumber correspond to a user already existing in Rainbow, he **will not** be able to see the request using the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/received(?status=pending|accepted|auto-accepted|declined)][0], as no match is done between the invitedPhoneNumber and a potential user existing in Rainbow   * The list of all visibility requests sent by the logged in user (inviting user side) can be retrieved with the API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][1]   * The inviting user can re-send a visibility request notification done by phoneNumber using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][2], however it is still **up to client to send an SMS to the invited user's phone** (the API only updates the field lastNotificationDate). If needed, it is **up to clients to re-send the SMS to the invited user's phone**.   * To create his Rainbow account, the invited user has to use API \"Self register a user\" using the associated invitationId ([POST /api/rainbow/enduser/v1.0/users/self-register][5]) * by Rainbow user id (`invitedUserId`):    * if no user is found with the provided invitedUserId, an error 404 is returned   * otherwise, a visibility request is sent (if this Rainbow user is not in logged in user roster).    Same documentation than existing user invited by email apply (see above).     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/5821f986394c356580c3c86d/invitations  [0]: #api-enduser_invitations-enduser_users_GetReceivedInvites [1]: #api-enduser_invitations-enduser_users_GetSentInvites [2]: #api-enduser_notifications_emails-enduser_ResendInvite [3]: #api-enduser_invitations-enduser_users_AcceptInvites [4]: #api-enduser_invitations-enduser_users_DeclineInvites [5]: #api-enduser_users-enduser_SelfRegisterUsers
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/CreateUserInvitation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateUserInvitationSuccess}
     */
    this.createUserInvitation = function(userId, body) {
      return this.createUserInvitationWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Decline a user invitation
     * This API can be used to decline an invitation sent by another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Invited user is notified with an XMPP message that the invitation has been declined.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='declined' xmlns='jabber:iq:configuration'/>     </message> ```    Inviting user is not notified and can't know that invited user has declined the invitation (it will still be listed as `pending` by API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][0]).       Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72/decline  [0]: #api-enduser_invitations-enduser_users_GetSentInvites
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeclineUserInvitationSuccess} and HTTP response
     */
    this.declineUserInvitationWithHttpInfo = function(userId, invitationId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling declineUserInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling declineUserInvitation");
      }

      var pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeclineUserInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/{invitationId}/decline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Decline a user invitation
     * This API can be used to decline an invitation sent by another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Invited user is notified with an XMPP message that the invitation has been declined.    The XMPP message is the following:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' action=\"update\" type='received' status='declined' xmlns='jabber:iq:configuration'/>     </message> ```    Inviting user is not notified and can't know that invited user has declined the invitation (it will still be listed as `pending` by API [GET /api/rainbow/enduser/v1.0/users/:userId/invitations/sent(?status=pending|accepted|auto-accepted|declined)][0]).       Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72/decline  [0]: #api-enduser_invitations-enduser_users_GetSentInvites
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeclineUserInvitationSuccess}
     */
    this.declineUserInvitation = function(userId, invitationId) {
      return this.declineUserInvitationWithHttpInfo(userId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user invitation
     * This API can be used to delete an invitation sent to/received from another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       User requesting deletion is notified with an XMPP message that the invitation has been deleted.    The XMPP message is the following:   * If the inviting user deletes the invitation:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"delete\"** **type='sent'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ``` * If the invited user deletes the invitation:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"delete\"** **type='received'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     Note that the invitation is not deleted on server side, it is simply hidden (the same database entry is used for both inviting and invited users). This allows the invitation to be still available to the other user if only one of the inviting / invited user delete the invitation for himself.       Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteUserInvitationSuccess} and HTTP response
     */
    this.deleteUserInvitationWithHttpInfo = function(userId, invitationId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling deleteUserInvitation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteUserInvitation");
      }

      var pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteUserInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/{invitationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user invitation
     * This API can be used to delete an invitation sent to/received from another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       User requesting deletion is notified with an XMPP message that the invitation has been deleted.    The XMPP message is the following:   * If the inviting user deletes the invitation:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"delete\"** **type='sent'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ``` * If the invited user deletes the invitation:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"delete\"** **type='received'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     Note that the invitation is not deleted on server side, it is simply hidden (the same database entry is used for both inviting and invited users). This allows the invitation to be still available to the other user if only one of the inviting / invited user delete the invitation for himself.       Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteUserInvitationSuccess}
     */
    this.deleteUserInvitation = function(userId, invitationId, accept) {
      return this.deleteUserInvitationWithHttpInfo(userId, invitationId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all user's received invitations
     * This API can be used to retrieve the list of invitations received by the user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/received?status=pending
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all invitations having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less invitation details in response. > - `small`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, status > - `medium`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, invitingUserEmail, status, invitingDate, acceptationDate, declinationDate > - `full`: all invitation fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAllReceivedInvitationSuccess} and HTTP response
     */
    this.getAllReceivedInvitationWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAllReceivedInvitation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllReceivedInvitation");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'sortField': opts['sortField'],
        'status': opts['status'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetAllReceivedInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/received', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all user's received invitations
     * This API can be used to retrieve the list of invitations received by the user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/received?status=pending
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all invitations having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less invitation details in response. > - `small`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, status > - `medium`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, invitingUserEmail, status, invitingDate, acceptationDate, declinationDate > - `full`: all invitation fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAllReceivedInvitationSuccess}
     */
    this.getAllReceivedInvitation = function(userId, accept, opts) {
      return this.getAllReceivedInvitationWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all user's sent invitations
     * This API can be used to retrieve the list invitations sent by the user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Inviting user can't know that invited user has declined the invitation: declined invitations are still listed as `pending`.       Example 1: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/sent?status=pending    Example 2: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/sent?status=accepted&status=auto-accepted
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all invitations having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less invitation details in response. > - `small`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, status > - `medium`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, invitingUserEmail, status, invitingDate, acceptationDate, declinationDate > - `full`: all invitation fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAllSentInvitionSuccess} and HTTP response
     */
    this.getAllSentInvitionWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAllSentInvition");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllSentInvition");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'sortField': opts['sortField'],
        'status': opts['status'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetAllSentInvitionSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/sent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all user's sent invitations
     * This API can be used to retrieve the list invitations sent by the user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Inviting user can't know that invited user has declined the invitation: declined invitations are still listed as `pending`.       Example 1: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/sent?status=pending    Example 2: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/sent?status=accepted&status=auto-accepted
     * @param {String} userId User unique identifier (like 573b46a305a4c22a19b216ce)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all invitations having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less invitation details in response. > - `small`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, status > - `medium`: id, invitedUserId, invitedUserEmail, invitedPhoneNumber, invitingUserId, invitingUserEmail, status, invitingDate, acceptationDate, declinationDate > - `full`: all invitation fields
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAllSentInvitionSuccess}
     */
    this.getAllSentInvition = function(userId, accept, opts) {
      return this.getAllSentInvitionWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user invitation
     * This API can be used to get an invitation sent/received by/from another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       The user can only retrieve invitations for which he is the inviting user of the invited user.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserInvitationSuccess} and HTTP response
     */
    this.getUserInvitationWithHttpInfo = function(userId, invitationId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling getUserInvitation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUserInvitation");
      }

      var pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUserInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/{invitationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user invitation
     * This API can be used to get an invitation sent/received by/from another Rainbow user.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       The user can only retrieve invitations for which he is the inviting user of the invited user.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/573b46a305a4c22a19b216ce/invitations/57cd5922d341df5812bbcb72
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserInvitationSuccess}
     */
    this.getUserInvitation = function(userId, invitationId, accept) {
      return this.getUserInvitationWithHttpInfo(userId, invitationId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Re-send a user invitation
     * This API can be used to re-send a user invitation which has already been sent.       Logged in user must be the one who sent the invitation (otherwise error 403 is returned).    An invitation can only be re-sent after a given period since last notification (1 hour by default).    If invitation is canceled or failed, it is set back to pending and then re-sent.    If invitation is accepted or auto-accepted, error 409 is returned.    If invitation is declined, it is set back to pending and re-sent if the last notification was sent since a given period (1 week by default).       Users are notified with an XMPP message that the invitation has been re-sent:   * Inviting user side:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"re-send\"** **type='sent'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ``` * Invitied user side:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"re-send\"** **type='received'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/5821f986394c356580c3c86d/invitations/57cd5922d341df5812bbcb72/re-send
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {module:model/ResendUserInvitation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResendUserInvitationSuccess} and HTTP response
     */
    this.resendUserInvitationWithHttpInfo = function(userId, invitationId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling resendUserInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling resendUserInvitation");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resendUserInvitation");
      }

      var pathParams = {
        'userId': userId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResendUserInvitationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/invitations/{invitationId}/re-send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Re-send a user invitation
     * This API can be used to re-send a user invitation which has already been sent.       Logged in user must be the one who sent the invitation (otherwise error 403 is returned).    An invitation can only be re-sent after a given period since last notification (1 hour by default).    If invitation is canceled or failed, it is set back to pending and then re-sent.    If invitation is accepted or auto-accepted, error 409 is returned.    If invitation is declined, it is set back to pending and re-sent if the last notification was sent since a given period (1 week by default).       Users are notified with an XMPP message that the invitation has been re-sent:   * Inviting user side:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"re-send\"** **type='sent'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ``` * Invitied user side:      ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <userinvite id='57cd5922d341df5812bbcb72' **action=\"re-send\"** **type='received'** status='pending' xmlns='jabber:iq:configuration'/>     </message> ```     Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/5821f986394c356580c3c86d/invitations/57cd5922d341df5812bbcb72/re-send
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} invitationId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {module:model/ResendUserInvitation} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResendUserInvitationSuccess}
     */
    this.resendUserInvitation = function(userId, invitationId, body) {
      return this.resendUserInvitationWithHttpInfo(userId, invitationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
