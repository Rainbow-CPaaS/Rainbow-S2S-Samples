/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BindOpenInviteIdWithRoomId', 'model/BindOpenInviteIdWithRoomIdSuccess', 'model/GetOpenInviteIdsOfUserSuccess', 'model/ResetOpenInviteIdOfRoomIdSuccess', 'model/UnbindOpenInviteIdWithRoomId', 'model/UnbindOpenInviteIdWithRoomIdSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BindOpenInviteIdWithRoomId'), require('../model/BindOpenInviteIdWithRoomIdSuccess'), require('../model/GetOpenInviteIdsOfUserSuccess'), require('../model/ResetOpenInviteIdOfRoomIdSuccess'), require('../model/UnbindOpenInviteIdWithRoomId'), require('../model/UnbindOpenInviteIdWithRoomIdSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.UsersRoomsPublicLinkApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.BindOpenInviteIdWithRoomId, root.RainbowEnduserPortal.BindOpenInviteIdWithRoomIdSuccess, root.RainbowEnduserPortal.GetOpenInviteIdsOfUserSuccess, root.RainbowEnduserPortal.ResetOpenInviteIdOfRoomIdSuccess, root.RainbowEnduserPortal.UnbindOpenInviteIdWithRoomId, root.RainbowEnduserPortal.UnbindOpenInviteIdWithRoomIdSuccess);
  }
}(this, function(ApiClient, BindOpenInviteIdWithRoomId, BindOpenInviteIdWithRoomIdSuccess, GetOpenInviteIdsOfUserSuccess, ResetOpenInviteIdOfRoomIdSuccess, UnbindOpenInviteIdWithRoomId, UnbindOpenInviteIdWithRoomIdSuccess) {
  'use strict';

  /**
   * UsersRoomsPublicLink service.
   * @module api/UsersRoomsPublicLinkApi
   * @version 1.84.0
   */

  /**
   * Constructs a new UsersRoomsPublicLinkApi. 
   * @alias module:api/UsersRoomsPublicLinkApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create an openInviteId for a room
     * A Rainbow user may have a public link that will help somebody to join a room. So that he just has to create a room and create a public link so called **'public URL'**. Each user can create on demand a public URL to one of his rooms. The public URL format is designed by the Rainbow application programmer and must contain at least an 'openInviteId'. This openInviteId is an UUID-V4 value.   * https://meet.openrainbow.com/d4bb04c2a2254cd3bebb28e449ce7de3  Each user may have up to two public URL dedicated to join either a personal audio or video room. A personal audio room is characterized by the flag 'conference.scheduled = false' and 'conference.mediaType = \"pstnAudio\". A personal video room is characterized by the flag 'conference.scheduled = false' and 'conference.mediaType = \"webrtc\". A room is bound if:   * The room exists and is not yet closed * The user is one of the room's moderator  A public URL for personal rooms still remains in our database even if the bound room is closed. That is to say the same public URL can be used for each personal room (audio or video) created for this user. It's enough to bind this new room. To join a room using a public URL, the Rainbow application extracts the 'openInviteId' then call the api that allow to register on the fly when necessary a user into the bound room. [POST /api/rainbow/enduser/v1.0/rooms/open-invites][0] To use this feature, a programmer can use a set of API that allows to a user openInviteId(s) management: | Verb | API | Role | |:----:|----------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | POST | /api/rainbow/enduser/v1.0/users/:userId/public-links/bind body {roomId:\"xxxx\"} | Create an openInviteId Bind it with the given roomId | | PUT | /api/rainbow/enduser/v1.0/users/:userId/public-links/unbind body {roomId:\"xxxx\"} | If the roomId is the personal audio or video room, unbind the given roomId to the openInviteId. That is to say a public URL is invariant when an application decides to re-create a room after each personal audio or video meeting. For other kinds of room (chat, scheduled meeting..) the public URL is deleted. | | PUT | /api/rainbow/enduser/v1.0/users/:userId/public-links/reset body {roomId:\"xxxx\"} | Process another openInvitId. | | GET | /api/rainbow/enduser/v1.0/users/:userId/public-links?type=xxx&roomId=xxx | Get all openInviteId belonging to a user. A filter per type of room (personal-audio-room, personal-video-room, default) is available. | ## Basic workflow ![Failed to load diagram :-(](img/public_link_1.jpg \"Basic workflow\") ## These set of API replaces the former open-invites API set ([users open invite][1])    When a room is bound with an openInviteId, a message stanza is sent to the user for multi-devices constraints: 1) A new public link is created        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"create\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>default</roomType>            </openinvite>    </message> ``` 2) A former public link is updated        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"update\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>personal_audio_room</roomType>            </openinvite>    </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links/bind  [0]: #api-rooms_open_invite-sendJoinRoomInvitationUsingOpenInviteiId [1]: #api-users_open_invite
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/BindOpenInviteIdWithRoomId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BindOpenInviteIdWithRoomIdSuccess} and HTTP response
     */
    this.bindOpenInviteIdWithRoomIdWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling bindOpenInviteIdWithRoomId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bindOpenInviteIdWithRoomId");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BindOpenInviteIdWithRoomIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/public-links/bind', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an openInviteId for a room
     * A Rainbow user may have a public link that will help somebody to join a room. So that he just has to create a room and create a public link so called **'public URL'**. Each user can create on demand a public URL to one of his rooms. The public URL format is designed by the Rainbow application programmer and must contain at least an 'openInviteId'. This openInviteId is an UUID-V4 value.   * https://meet.openrainbow.com/d4bb04c2a2254cd3bebb28e449ce7de3  Each user may have up to two public URL dedicated to join either a personal audio or video room. A personal audio room is characterized by the flag 'conference.scheduled = false' and 'conference.mediaType = \"pstnAudio\". A personal video room is characterized by the flag 'conference.scheduled = false' and 'conference.mediaType = \"webrtc\". A room is bound if:   * The room exists and is not yet closed * The user is one of the room's moderator  A public URL for personal rooms still remains in our database even if the bound room is closed. That is to say the same public URL can be used for each personal room (audio or video) created for this user. It's enough to bind this new room. To join a room using a public URL, the Rainbow application extracts the 'openInviteId' then call the api that allow to register on the fly when necessary a user into the bound room. [POST /api/rainbow/enduser/v1.0/rooms/open-invites][0] To use this feature, a programmer can use a set of API that allows to a user openInviteId(s) management: | Verb | API | Role | |:----:|----------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | POST | /api/rainbow/enduser/v1.0/users/:userId/public-links/bind body {roomId:\"xxxx\"} | Create an openInviteId Bind it with the given roomId | | PUT | /api/rainbow/enduser/v1.0/users/:userId/public-links/unbind body {roomId:\"xxxx\"} | If the roomId is the personal audio or video room, unbind the given roomId to the openInviteId. That is to say a public URL is invariant when an application decides to re-create a room after each personal audio or video meeting. For other kinds of room (chat, scheduled meeting..) the public URL is deleted. | | PUT | /api/rainbow/enduser/v1.0/users/:userId/public-links/reset body {roomId:\"xxxx\"} | Process another openInvitId. | | GET | /api/rainbow/enduser/v1.0/users/:userId/public-links?type=xxx&roomId=xxx | Get all openInviteId belonging to a user. A filter per type of room (personal-audio-room, personal-video-room, default) is available. | ## Basic workflow ![Failed to load diagram :-(](img/public_link_1.jpg \"Basic workflow\") ## These set of API replaces the former open-invites API set ([users open invite][1])    When a room is bound with an openInviteId, a message stanza is sent to the user for multi-devices constraints: 1) A new public link is created        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"create\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>default</roomType>            </openinvite>    </message> ``` 2) A former public link is updated        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"update\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>personal_audio_room</roomType>            </openinvite>    </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links/bind  [0]: #api-rooms_open_invite-sendJoinRoomInvitationUsingOpenInviteiId [1]: #api-users_open_invite
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/BindOpenInviteIdWithRoomId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BindOpenInviteIdWithRoomIdSuccess}
     */
    this.bindOpenInviteIdWithRoomId = function(userId, body) {
      return this.bindOpenInviteIdWithRoomIdWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all openInviteId per room of a user
     * Get all openInviteId belonging to a user. Some filters per type of room (personal_audio_room, personal_video_room, default) or by roomId are available.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links&type=personal_audio_room&type=personal_video_room
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.type to get the public link of personal rooms `type` query parameter used with `personal_audio_room` or `personal_video_room` or `default`.**GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links&type=personal_audio_room**
     * @param {String} opts.roomId Get the public link for a given roomId, managed by the userId `roomId`**GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links&roomId=57cd5922d341df5812bbcb72**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOpenInviteIdsOfUserSuccess} and HTTP response
     */
    this.getOpenInviteIdsOfUserWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getOpenInviteIdsOfUser");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOpenInviteIdsOfUser");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'type': opts['type'],
        'roomId': opts['roomId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetOpenInviteIdsOfUserSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/public-links', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all openInviteId per room of a user
     * Get all openInviteId belonging to a user. Some filters per type of room (personal_audio_room, personal_video_room, default) or by roomId are available.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links&type=personal_audio_room&type=personal_video_room
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.type to get the public link of personal rooms `type` query parameter used with `personal_audio_room` or `personal_video_room` or `default`.**GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links&type=personal_audio_room**
     * @param {String} opts.roomId Get the public link for a given roomId, managed by the userId `roomId`**GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links&roomId=57cd5922d341df5812bbcb72**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOpenInviteIdsOfUserSuccess}
     */
    this.getOpenInviteIdsOfUser = function(userId, accept, opts) {
      return this.getOpenInviteIdsOfUserWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset the openInviteId for a room
     * This API can be used by the user himself to initialize or to change his personal open invite id.    A message stanza is sent to the user for multi-devices constraints:        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"update\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid></roomid>            <roomType>personal_audio_room</roomType>            </openinvite>    </message> ```       Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links/reset
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResetOpenInviteIdOfRoomIdSuccess} and HTTP response
     */
    this.resetOpenInviteIdOfRoomIdWithHttpInfo = function(userId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling resetOpenInviteIdOfRoomId");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResetOpenInviteIdOfRoomIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/public-links/reset', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reset the openInviteId for a room
     * This API can be used by the user himself to initialize or to change his personal open invite id.    A message stanza is sent to the user for multi-devices constraints:        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"update\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid></roomid>            <roomType>personal_audio_room</roomType>            </openinvite>    </message> ```       Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links/reset
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResetOpenInviteIdOfRoomIdSuccess}
     */
    this.resetOpenInviteIdOfRoomId = function(userId) {
      return this.resetOpenInviteIdOfRoomIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the public link of a room
     * If the roomId is the personal audio or video room, unbind the given roomId to the openInviteId. That is to say a public URL is invariant when an application decides to re-create a room after each personal audio or video meeting. For other kinds of room (chat, scheduled meeting..) the public URL is deleted. According with the roomType, a message stanza is sent to the user for multi-devices constraints: 1) The public link is removed        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"deleted\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>default</roomType>            </openinvite>    </message> ``` 2) The public link still remains. It is just disabled.        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"update\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>personal_audio_room</roomType>            </openinvite>    </message> ```    Example: PUT https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links/unbind
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/UnbindOpenInviteIdWithRoomId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UnbindOpenInviteIdWithRoomIdSuccess} and HTTP response
     */
    this.unbindOpenInviteIdWithRoomIdWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unbindOpenInviteIdWithRoomId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unbindOpenInviteIdWithRoomId");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UnbindOpenInviteIdWithRoomIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/public-links/unbind', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the public link of a room
     * If the roomId is the personal audio or video room, unbind the given roomId to the openInviteId. That is to say a public URL is invariant when an application decides to re-create a room after each personal audio or video meeting. For other kinds of room (chat, scheduled meeting..) the public URL is deleted. According with the roomType, a message stanza is sent to the user for multi-devices constraints: 1) The public link is removed        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"deleted\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>default</roomType>            </openinvite>    </message> ``` 2) The public link still remains. It is just disabled.        ```html <message type=\"management\" id=\"86be9505-9f31-4935-ae88-d095825ab4ef_0\"           to=\"4084a3b277644118be3403720287f978@francky-all-in-one-dev-1.opentouch.cloud\" xmlns=\"jabber:client\">            <openinviteid action=\"update\" xmlns=\"jabber:iq:configuration\">            <openinviteid>77745cff22e44d56bdb47b49d28f3e0c</openinviteid>            <roomid>5ab109781caacce5df54436a</roomid>            <roomType>personal_audio_room</roomType>            </openinvite>    </message> ```    Example: PUT https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/public-links/unbind
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/UnbindOpenInviteIdWithRoomId} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UnbindOpenInviteIdWithRoomIdSuccess}
     */
    this.unbindOpenInviteIdWithRoomId = function(userId, body) {
      return this.unbindOpenInviteIdWithRoomIdWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
