/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.UpdateUserPhoneNumbers = factory(root.RainbowEnduserPortal.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The UpdateUserPhoneNumbers model module.
   * @module model/UpdateUserPhoneNumbers
   * @version 1.84.0
   */

  /**
   * Constructs a new <code>UpdateUserPhoneNumbers</code>.
   * @alias module:model/UpdateUserPhoneNumbers
   * @class
   * @param _number {String} User phone number (as entered by user).    Not mandatory if the PhoneNumber to update is a PhoneNumber linked to a system (pbx)
   * @param type {module:model/UpdateUserPhoneNumbers.TypeEnum} Phone number type
   * @param deviceType {module:model/UpdateUserPhoneNumbers.DeviceTypeEnum} Phone number device type
   */
  var exports = function(_number, type, deviceType) {
    var _this = this;

    _this['number'] = _number;
    _this['type'] = type;
    _this['deviceType'] = deviceType;
  };

  /**
   * Constructs a <code>UpdateUserPhoneNumbers</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UpdateUserPhoneNumbers} obj Optional instance to populate.
   * @return {module:model/UpdateUserPhoneNumbers} The populated <code>UpdateUserPhoneNumbers</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('number')) {
        obj['number'] = ApiClient.convertToType(data['number'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('deviceType')) {
        obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
      }
      if (data.hasOwnProperty('shortNumber')) {
        obj['shortNumber'] = ApiClient.convertToType(data['shortNumber'], 'String');
      }
      if (data.hasOwnProperty('systemId')) {
        obj['systemId'] = ApiClient.convertToType(data['systemId'], 'String');
      }
      if (data.hasOwnProperty('internalNumber')) {
        obj['internalNumber'] = ApiClient.convertToType(data['internalNumber'], 'String');
      }
    }
    return obj;
  }

  /**
   * User phone number (as entered by user).    Not mandatory if the PhoneNumber to update is a PhoneNumber linked to a system (pbx)
   * @member {String} number
   */
  exports.prototype['number'] = undefined;
  /**
   * Phone number country (ISO 3166-1 alpha3 format).       Used to compute `numberE164` field from number field. If not provided, user country is used by default.
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Phone number type
   * @member {module:model/UpdateUserPhoneNumbers.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Phone number device type
   * @member {module:model/UpdateUserPhoneNumbers.DeviceTypeEnum} deviceType
   */
  exports.prototype['deviceType'] = undefined;
  /**
   * **[Only for update of PhoneNumbers linked to a system (pbx)]**      Short phone number (corresponds to the number monitored by PCG).    Read only field, only used by server to find the related system PhoneNumber to update (couple `shortNumber`/`systemId`).
   * @member {String} shortNumber
   */
  exports.prototype['shortNumber'] = undefined;
  /**
   * **[Only for update of PhoneNumbers linked to a system (pbx)]**      Unique identifier of the system in Rainbow database to which the system PhoneNumbers belong.    Read only field, only used by server to find the related system PhoneNumber to update (couple `shortNumber`/`systemId`).
   * @member {String} systemId
   */
  exports.prototype['systemId'] = undefined;
  /**
   * **[Only for update of PhoneNumbers linked to a system (pbx)]**      Internal phone number. Usable within a PBX group. By default, it is equal to `shortNumber`.    Admins and users can modify this internalNumber field.    `internalNumber` must be unique in the whole system group to which the related PhoneNumber belong (an error 409 is raised if someone tries to update internalNumber to a number already used by another PhoneNumber in the same system group).
   * @member {String} internalNumber
   */
  exports.prototype['internalNumber'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "home"
     * @const
     */
    "home": "home",
    /**
     * value: "work"
     * @const
     */
    "work": "work",
    /**
     * value: "other"
     * @const
     */
    "other": "other"  };

  /**
   * Allowed values for the <code>deviceType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DeviceTypeEnum = {
    /**
     * value: "landline"
     * @const
     */
    "landline": "landline",
    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",
    /**
     * value: "fax"
     * @const
     */
    "fax": "fax",
    /**
     * value: "other"
     * @const
     */
    "other": "other"  };


  return exports;
}));


