/**
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * OpenAPI spec version: 1.104.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetSamlAssertionConfigurationSuccess', 'model/GetSamlAssertionSuccess', 'model/GetSamlLoginSuccess', 'model/GetSamlLogoutSuccess', 'model/PostSamlAssertion', 'model/PostSamlAssertionSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetSamlAssertionConfigurationSuccess'), require('../model/GetSamlAssertionSuccess'), require('../model/GetSamlLoginSuccess'), require('../model/GetSamlLogoutSuccess'), require('../model/PostSamlAssertion'), require('../model/PostSamlAssertionSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAuthenticationPortal) {
      root.RainbowAuthenticationPortal = {};
    }
    root.RainbowAuthenticationPortal.SamlAuthenticationApi = factory(root.RainbowAuthenticationPortal.ApiClient, root.RainbowAuthenticationPortal.GetSamlAssertionConfigurationSuccess, root.RainbowAuthenticationPortal.GetSamlAssertionSuccess, root.RainbowAuthenticationPortal.GetSamlLoginSuccess, root.RainbowAuthenticationPortal.GetSamlLogoutSuccess, root.RainbowAuthenticationPortal.PostSamlAssertion, root.RainbowAuthenticationPortal.PostSamlAssertionSuccess);
  }
}(this, function(ApiClient, GetSamlAssertionConfigurationSuccess, GetSamlAssertionSuccess, GetSamlLoginSuccess, GetSamlLogoutSuccess, PostSamlAssertion, PostSamlAssertionSuccess) {
  'use strict';

  /**
   * SamlAuthentication service.
   * @module api/SamlAuthenticationApi
   * @version 1.104.0
   */

  /**
   * Constructs a new SamlAuthenticationApi. 
   * @alias module:api/SamlAuthenticationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * IDP logout response
     * This API allows IDP server to respond to SAML logout request or ask for SAML logout.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getSamlAssertionWithHttpInfo = function(companyId, accept) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getSamlAssertion");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSamlAssertion");
      }


      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/unknown'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/saml/{companyId}/assert', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * IDP logout response
     * This API allows IDP server to respond to SAML logout request or ask for SAML logout.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getSamlAssertion = function(companyId, accept) {
      return this.getSamlAssertionWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get assertion configuration for a company
     * This API allows an IDP server to retrieve ASSERTION configuration to callback Rainbow SP after an SAML authentication request
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSamlAssertionConfigurationSuccess} and HTTP response
     */
    this.getSamlAssertionConfigurationWithHttpInfo = function(companyId, accept) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getSamlAssertionConfiguration");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSamlAssertionConfiguration");
      }


      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/xml'];
      var returnType = GetSamlAssertionConfigurationSuccess;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/saml/{companyId}/metadata.xml', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get assertion configuration for a company
     * This API allows an IDP server to retrieve ASSERTION configuration to callback Rainbow SP after an SAML authentication request
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSamlAssertionConfigurationSuccess}
     */
    this.getSamlAssertionConfiguration = function(companyId, accept) {
      return this.getSamlAssertionConfigurationWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiate an SAML authentication
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @param {String} companyId User company identifier: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com
     * @param {String} challenge challenge for application authentication: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getSamlLoginWithHttpInfo = function(companyId, challenge) {
      var postBody = null;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getSamlLogin");
      }

      // verify the required parameter 'challenge' is set
      if (challenge === undefined || challenge === null) {
        throw new Error("Missing the required parameter 'challenge' when calling getSamlLogin");
      }


      var pathParams = {
      };
      var queryParams = {
        'companyId': companyId,
        'challenge': challenge,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/unknown'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/saml/login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Initiate an SAML authentication
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @param {String} companyId User company identifier: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com
     * @param {String} challenge challenge for application authentication: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getSamlLogin = function(companyId, challenge) {
      return this.getSamlLoginWithHttpInfo(companyId, challenge)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Close SAML session
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getSamlLogoutWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/unknown'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/saml/logout', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Close SAML session
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getSamlLogout = function() {
      return this.getSamlLogoutWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * IDP authentication response
     * This API allows IDP server to provide the identity of a user which have performed an SAML authentication (If the user suceeded in the authentication process). This identity provided by the IDP will be used to retrieve the associated Rainbow user.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PostSamlAssertion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostSamlAssertionSuccess} and HTTP response
     */
    this.postSamlAssertionWithHttpInfo = function(companyId, body) {
      var postBody = body;

      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling postSamlAssertion");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSamlAssertion");
      }


      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostSamlAssertionSuccess;

      return this.apiClient.callApi(
        '/api/rainbow/authentication/v1.0/saml/{companyId}/assert', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * IDP authentication response
     * This API allows IDP server to provide the identity of a user which have performed an SAML authentication (If the user suceeded in the authentication process). This identity provided by the IDP will be used to retrieve the associated Rainbow user.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PostSamlAssertion} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostSamlAssertionSuccess}
     */
    this.postSamlAssertion = function(companyId, body) {
      return this.postSamlAssertionWithHttpInfo(companyId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
