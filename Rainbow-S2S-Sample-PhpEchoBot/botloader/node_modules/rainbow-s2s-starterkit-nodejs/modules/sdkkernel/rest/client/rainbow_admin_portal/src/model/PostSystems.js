/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PostSystemsPbxNumberingTranslator'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PostSystemsPbxNumberingTranslator'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.PostSystems = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.PostSystemsPbxNumberingTranslator);
  }
}(this, function(ApiClient, PostSystemsPbxNumberingTranslator) {
  'use strict';



  /**
   * The PostSystems model module.
   * @module model/PostSystems
   * @version 1.82.0
   */

  /**
   * Constructs a new <code>PostSystems</code>.
   * @alias module:model/PostSystems
   * @class
   * @param name {String} System name/description
   * @param siteId {String} Site from which the system is linked with.
   * @param type {module:model/PostSystems.TypeEnum} CCA type.
   * @param country {String} System country (ISO 3166-1 alpha3 format)
   */
  var exports = function(name, siteId, type, country) {
    var _this = this;

    _this['name'] = name;
    _this['siteId'] = siteId;
    _this['type'] = type;
    _this['country'] = country;
  };

  /**
   * Constructs a <code>PostSystems</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PostSystems} obj Optional instance to populate.
   * @return {module:model/PostSystems} The populated <code>PostSystems</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('pbxId')) {
        obj['pbxId'] = ApiClient.convertToType(data['pbxId'], 'String');
      }
      if (data.hasOwnProperty('siteId')) {
        obj['siteId'] = ApiClient.convertToType(data['siteId'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'String');
      }
      if (data.hasOwnProperty('serverPingTimeout')) {
        obj['serverPingTimeout'] = ApiClient.convertToType(data['serverPingTimeout'], 'String');
      }
      if (data.hasOwnProperty('pbxMainBundlePrefix')) {
        obj['pbxMainBundlePrefix'] = ApiClient.convertToType(data['pbxMainBundlePrefix'], ['String']);
      }
      if (data.hasOwnProperty('usePbxMainBundlePrefix')) {
        obj['usePbxMainBundlePrefix'] = ApiClient.convertToType(data['usePbxMainBundlePrefix'], 'Boolean');
      }
      if (data.hasOwnProperty('pbxNumberingTranslator')) {
        obj['pbxNumberingTranslator'] = ApiClient.convertToType(data['pbxNumberingTranslator'], [PostSystemsPbxNumberingTranslator]);
      }
      if (data.hasOwnProperty('pbxNationalPrefix')) {
        obj['pbxNationalPrefix'] = ApiClient.convertToType(data['pbxNationalPrefix'], 'String');
      }
      if (data.hasOwnProperty('pbxInternationalPrefix')) {
        obj['pbxInternationalPrefix'] = ApiClient.convertToType(data['pbxInternationalPrefix'], 'String');
      }
      if (data.hasOwnProperty('searchResultOrder')) {
        obj['searchResultOrder'] = ApiClient.convertToType(data['searchResultOrder'], ['String']);
      }
      if (data.hasOwnProperty('activationCode')) {
        obj['activationCode'] = ApiClient.convertToType(data['activationCode'], 'String');
      }
      if (data.hasOwnProperty('isCentrex')) {
        obj['isCentrex'] = ApiClient.convertToType(data['isCentrex'], 'Boolean');
      }
      if (data.hasOwnProperty('isShared')) {
        obj['isShared'] = ApiClient.convertToType(data['isShared'], 'Boolean');
      }
      if (data.hasOwnProperty('bpId')) {
        obj['bpId'] = ApiClient.convertToType(data['bpId'], 'String');
      }
    }
    return obj;
  }

  /**
   * System name/description
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * CCA (Call Control Agent) hosted by a System needs an account to XMPP. This is the login to access to XMPP server. **It should be given during system creation or automatically generated**.
   * @member {String} pbxId
   */
  exports.prototype['pbxId'] = undefined;
  /**
   * Site from which the system is linked with.
   * @member {String} siteId
   */
  exports.prototype['siteId'] = undefined;
  /**
   * CCA type.
   * @member {module:model/PostSystems.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * System country (ISO 3166-1 alpha3 format)
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * CCA software version
   * @member {String} version
   */
  exports.prototype['version'] = undefined;
  /**
   * CCA config data
   * @member {String} serverPingTimeout
   * @default '120'
   */
  exports.prototype['serverPingTimeout'] = '120';
  /**
   * CCA config data: array of String
   * @member {Array.<String>} pbxMainBundlePrefix
   */
  exports.prototype['pbxMainBundlePrefix'] = undefined;
  /**
   * Whether or not pbxMainBundlePrefix is used by PCG
   * @member {Boolean} usePbxMainBundlePrefix
   */
  exports.prototype['usePbxMainBundlePrefix'] = undefined;
  /**
   * List of several regular expressions used to validate internal or external phone numbers. Up to 100 regular expressions are allowed. (64 max char by regexp). To reset the list, use []
   * @member {Array.<module:model/PostSystemsPbxNumberingTranslator>} pbxNumberingTranslator
   */
  exports.prototype['pbxNumberingTranslator'] = undefined;
  /**
   * National prefix
   * @member {String} pbxNationalPrefix
   */
  exports.prototype['pbxNationalPrefix'] = undefined;
  /**
   * International prefix
   * @member {String} pbxInternationalPrefix
   */
  exports.prototype['pbxInternationalPrefix'] = undefined;
  /**
   * List of directory types to order search results
   * @member {Array.<String>} searchResultOrder
   */
  exports.prototype['searchResultOrder'] = undefined;
  /**
   * Currently, the activation code is a random 4 digits value (between 1000 and 9999) generated by the admin portal. With activationCode field, it's possible to set a custom value. In the Http success response the value is available in the 'jid_pbxagent_password' field. **activationCode is only taken in account during a system creation.**
   * @member {String} activationCode
   */
  exports.prototype['activationCode'] = undefined;
  /**
   * Indicates if the system is one tenant or **multi-tenant (OXE - OTEC-S)**.   * isCentrex flag can't be set to true if isShared flag is true (these settings are exclusives).  
   * @member {Boolean} isCentrex
   * @default false
   */
  exports.prototype['isCentrex'] = false;
  /**
   * Indicates if the system is **multi-company** (shared across multiple companies).   * isShared flag can't be set to true if isCentrex flag is true (these settings are exclusives). * Shared systems can be linked to several sites from different companies. * Several shared PBX can be attached to a same Rainbow company, as well as \"standard\" systems (i.e. systems without isShared flag, and so being linked only to this company). * Companies being linked to shared PBX can't be attached to centrex systems. * It is understood that this approach exposes all users of the shared PBX to all companies that have users on this PBX (for association, for dial by name).    Anyway it seats on a PBX infra where all PBX users can directly dial (by short num and DBN) any other users of the network from their deskphones. * In cases the underlying infra is an homogeneous network of PBX, PBX grouping has to be managed.  
   * @member {Boolean} isShared
   * @default false
   */
  exports.prototype['isShared'] = false;
  /**
   * Link the system to the corresponding Business partner company.    `bpId` must correspond to a valid company having `isBP` equal to true.    Only directly settable by `superadmin`.    If the system is **created** by a `bp_admin`, `bpId` is automatically set to bp_admin's system `id`.
   * @member {String} bpId
   */
  exports.prototype['bpId'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "oxo"
     * @const
     */
    "oxo": "oxo",
    /**
     * value: "oxe"
     * @const
     */
    "oxe": "oxe",
    /**
     * value: "third party"
     * @const
     */
    "third party": "third party",
    /**
     * value: "undefined"
     * @const
     */
    "undefined": "undefined"  };


  return exports;
}));


