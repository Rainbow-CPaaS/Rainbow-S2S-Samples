/**
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * OpenAPI spec version: 1.104.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAuthenticationPortal) {
      root.RainbowAuthenticationPortal = {};
    }
    root.RainbowAuthenticationPortal.OAuthTokenSuccess = factory(root.RainbowAuthenticationPortal.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The OAuthTokenSuccess model module.
   * @module model/OAuthTokenSuccess
   * @version 1.104.0
   */

  /**
   * Constructs a new <code>OAuthTokenSuccess</code>.
   * @alias module:model/OAuthTokenSuccess
   * @class
   * @param accessToken {String} The access token generated by Rainbow authentication server. <br/> To be used to call Rainbow APIs (header Authorization: Bearer <access_token>, see related Rainbow API documentation). <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   * @param expiresIn {String} The access token lifetime. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   * @param refreshToken {String} The refresh token generated by Rainbow authentication server. <br/> To be used to refresh an access token using this POST /api/rainbow/authentication/v1.0/oauth/token endpoint. <br/> Generated refresh_token has a lifetime of 90 days. <br/> Note that a new refresh token is generated during \"<b>Refresh an Access Token</b>\" flow, overwriting the one used to refresh the access token       (this previous one is revoked). This new refresh token is regenerated with a lifetime of 90 days.       Therefore, as long as the application refreshes its access token during the refresh token lifetime period,       it can continue to use Rainbow APIs without redoing the whole OAuth authorization code flow. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   * @param tokenType {String} The type of the access token issued. <br/> Should always be <strong>Bearer</strong> for access tokens generated by Rainbow authentication server. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   */
  var exports = function(accessToken, expiresIn, refreshToken, tokenType) {
    var _this = this;

    _this['access_token'] = accessToken;
    _this['expires_in'] = expiresIn;
    _this['refresh_token'] = refreshToken;
    _this['token_type'] = tokenType;
  };

  /**
   * Constructs a <code>OAuthTokenSuccess</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OAuthTokenSuccess} obj Optional instance to populate.
   * @return {module:model/OAuthTokenSuccess} The populated <code>OAuthTokenSuccess</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('access_token')) {
        obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
      }
      if (data.hasOwnProperty('expires_in')) {
        obj['expires_in'] = ApiClient.convertToType(data['expires_in'], 'String');
      }
      if (data.hasOwnProperty('refresh_token')) {
        obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
      }
      if (data.hasOwnProperty('token_type')) {
        obj['token_type'] = ApiClient.convertToType(data['token_type'], 'String');
      }
    }
    return obj;
  }

  /**
   * The access token generated by Rainbow authentication server. <br/> To be used to call Rainbow APIs (header Authorization: Bearer <access_token>, see related Rainbow API documentation). <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   * @member {String} access_token
   */
  exports.prototype['access_token'] = undefined;
  /**
   * The access token lifetime. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   * @member {String} expires_in
   */
  exports.prototype['expires_in'] = undefined;
  /**
   * The refresh token generated by Rainbow authentication server. <br/> To be used to refresh an access token using this POST /api/rainbow/authentication/v1.0/oauth/token endpoint. <br/> Generated refresh_token has a lifetime of 90 days. <br/> Note that a new refresh token is generated during \"<b>Refresh an Access Token</b>\" flow, overwriting the one used to refresh the access token       (this previous one is revoked). This new refresh token is regenerated with a lifetime of 90 days.       Therefore, as long as the application refreshes its access token during the refresh token lifetime period,       it can continue to use Rainbow APIs without redoing the whole OAuth authorization code flow. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   * @member {String} refresh_token
   */
  exports.prototype['refresh_token'] = undefined;
  /**
   * The type of the access token issued. <br/> Should always be <strong>Bearer</strong> for access tokens generated by Rainbow authentication server. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.
   * @member {String} token_type
   */
  exports.prototype['token_type'] = undefined;



  return exports;
}));


