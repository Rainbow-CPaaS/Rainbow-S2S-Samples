/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddUserToGroupSuccess', 'model/CreateGroup', 'model/CreateGroupSuccess', 'model/DeleteGroupByIdSuccess', 'model/GetUserGroupsByIdSuccess', 'model/GetUserGroupsSuccess', 'model/RemoveUserFromGroupSuccess', 'model/UpdateGroupById', 'model/UpdateGroupByIdSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddUserToGroupSuccess'), require('../model/CreateGroup'), require('../model/CreateGroupSuccess'), require('../model/DeleteGroupByIdSuccess'), require('../model/GetUserGroupsByIdSuccess'), require('../model/GetUserGroupsSuccess'), require('../model/RemoveUserFromGroupSuccess'), require('../model/UpdateGroupById'), require('../model/UpdateGroupByIdSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.GroupsApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.AddUserToGroupSuccess, root.RainbowEnduserPortal.CreateGroup, root.RainbowEnduserPortal.CreateGroupSuccess, root.RainbowEnduserPortal.DeleteGroupByIdSuccess, root.RainbowEnduserPortal.GetUserGroupsByIdSuccess, root.RainbowEnduserPortal.GetUserGroupsSuccess, root.RainbowEnduserPortal.RemoveUserFromGroupSuccess, root.RainbowEnduserPortal.UpdateGroupById, root.RainbowEnduserPortal.UpdateGroupByIdSuccess);
  }
}(this, function(ApiClient, AddUserToGroupSuccess, CreateGroup, CreateGroupSuccess, DeleteGroupByIdSuccess, GetUserGroupsByIdSuccess, GetUserGroupsSuccess, RemoveUserFromGroupSuccess, UpdateGroupById, UpdateGroupByIdSuccess) {
  'use strict';

  /**
   * Groups service.
   * @module api/GroupsApi
   * @version 1.84.0
   */

  /**
   * Constructs a new GroupsApi. 
   * @alias module:api/GroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a user in a group
     * This API can be used to add a user in a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a user is added in a group using this API, all user's XMPP resources will receive the following message indicating them that a user has been added in a group:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"create\" scope=\"user\" userId=\"574ff5153448af6c2940f908\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e/users/574ff5153448af6c2940f908
     * @param {String} userIdToAdd User unique identifier of the user to add in the group (like 574ff5153448af6c2940f908)
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddUserToGroupSuccess} and HTTP response
     */
    this.addUserToGroupWithHttpInfo = function(userIdToAdd, userId, groupId) {
      var postBody = null;
      // verify the required parameter 'userIdToAdd' is set
      if (userIdToAdd === undefined || userIdToAdd === null) {
        throw new Error("Missing the required parameter 'userIdToAdd' when calling addUserToGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserToGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addUserToGroup");
      }

      var pathParams = {
        'userIdToAdd': userIdToAdd,
        'userId': userId,
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AddUserToGroupSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/groups/{groupId}/users/{userIdToAdd}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a user in a group
     * This API can be used to add a user in a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a user is added in a group using this API, all user's XMPP resources will receive the following message indicating them that a user has been added in a group:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"create\" scope=\"user\" userId=\"574ff5153448af6c2940f908\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e/users/574ff5153448af6c2940f908
     * @param {String} userIdToAdd User unique identifier of the user to add in the group (like 574ff5153448af6c2940f908)
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddUserToGroupSuccess}
     */
    this.addUserToGroup = function(userIdToAdd, userId, groupId) {
      return this.addUserToGroupWithHttpInfo(userIdToAdd, userId, groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a group
     * This API can be used to create a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a group is created using this API, all user's XMPP resources will receive the following message indicating them that a group has been created:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"create\" scope=\"group\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/CreateGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGroupSuccess} and HTTP response
     */
    this.createGroupWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createGroup");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createGroup");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateGroupSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a group
     * This API can be used to create a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a group is created using this API, all user's XMPP resources will receive the following message indicating them that a group has been created:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"create\" scope=\"group\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {module:model/CreateGroup} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGroupSuccess}
     */
    this.createGroup = function(userId, body) {
      return this.createGroupWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a group
     * This API can be used to delete a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a group is deleted using this API, all user's XMPP resources will receive the following message indicating them that a group has been deleted:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"delete\" scope=\"group\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteGroupByIdSuccess} and HTTP response
     */
    this.deleteGroupByIdWithHttpInfo = function(userId, groupId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteGroupById");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteGroupById");
      }

      var pathParams = {
        'userId': userId,
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteGroupByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a group
     * This API can be used to delete a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a group is deleted using this API, all user's XMPP resources will receive the following message indicating them that a group has been deleted:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"delete\" scope=\"group\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteGroupByIdSuccess}
     */
    this.deleteGroupById = function(userId, groupId, accept) {
      return this.deleteGroupByIdWithHttpInfo(userId, groupId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all user's groups
     * This API can be used to retrieve the list of user's groups (i.e. groups having owner field equal to provided userId).    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups?format=full&userId=574ff5153448af6c2940f908&isFavorite=true
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId2 List all groups having this user in their `users` list
     * @param {Boolean} opts.isFavorite Allows to filter group list on the isFavorite criterion.
     * @param {String} opts.format Allows to retrieve more or less group details in response. > - `small`: id, name, isFavorite > - `medium`: id, name, isFavorite, comment, owner, creationDate > - `full`: all group fields
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserGroupsSuccess} and HTTP response
     */
    this.getUserGroupsWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserGroups");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUserGroups");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'userId': opts['userId2'],
        'isFavorite': opts['isFavorite'],
        'format': opts['format'],
        'sortField': opts['sortField'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUserGroupsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all user's groups
     * This API can be used to retrieve the list of user's groups (i.e. groups having owner field equal to provided userId).    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups?format=full&userId=574ff5153448af6c2940f908&isFavorite=true
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId2 List all groups having this user in their `users` list
     * @param {Boolean} opts.isFavorite Allows to filter group list on the isFavorite criterion.
     * @param {String} opts.format Allows to retrieve more or less group details in response. > - `small`: id, name, isFavorite > - `medium`: id, name, isFavorite, comment, owner, creationDate > - `full`: all group fields
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserGroupsSuccess}
     */
    this.getUserGroups = function(userId, accept, opts) {
      return this.getUserGroupsWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a group
     * This API can be used to retrieve a specific user's groups.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Users being in this group are returned with the following fields: id, firstName, lastName, jid_im, companyId, companyName, lastAvatarUpdateDate, lastUpdateDate, isTerminated, guestMode (fields are fetched from database for each userId being in this group)    For now, loginEmail is returned if the user is in the same company than logged in user, but this field is **DEPRECATED** and will be removed in a future release.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserGroupsByIdSuccess} and HTTP response
     */
    this.getUserGroupsByIdWithHttpInfo = function(userId, groupId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserGroupsById");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getUserGroupsById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUserGroupsById");
      }

      var pathParams = {
        'userId': userId,
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUserGroupsByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/groups/{groupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a group
     * This API can be used to retrieve a specific user's groups.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Users being in this group are returned with the following fields: id, firstName, lastName, jid_im, companyId, companyName, lastAvatarUpdateDate, lastUpdateDate, isTerminated, guestMode (fields are fetched from database for each userId being in this group)    For now, loginEmail is returned if the user is in the same company than logged in user, but this field is **DEPRECATED** and will be removed in a future release.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserGroupsByIdSuccess}
     */
    this.getUserGroupsById = function(userId, groupId, accept) {
      return this.getUserGroupsByIdWithHttpInfo(userId, groupId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a user from a group
     * This API can be used to remove a user from a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a user is removed from a group using this API, all user's XMPP resources will receive the following message indicating them that a user has been removed from a group:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"delete\" scope=\"user\" userId=\"574ff5153448af6c2940f908\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e/users/574ff5153448af6c2940f908
     * @param {String} userIdToRemove User unique identifier of the user to remove from the group (like 574ff5153448af6c2940f908)
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemoveUserFromGroupSuccess} and HTTP response
     */
    this.removeUserFromGroupWithHttpInfo = function(userIdToRemove, userId, groupId, accept) {
      var postBody = null;
      // verify the required parameter 'userIdToRemove' is set
      if (userIdToRemove === undefined || userIdToRemove === null) {
        throw new Error("Missing the required parameter 'userIdToRemove' when calling removeUserFromGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUserFromGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeUserFromGroup");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling removeUserFromGroup");
      }

      var pathParams = {
        'userIdToRemove': userIdToRemove,
        'userId': userId,
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RemoveUserFromGroupSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/groups/{groupId}/users/{userIdToRemove}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a user from a group
     * This API can be used to remove a user from a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a user is removed from a group using this API, all user's XMPP resources will receive the following message indicating them that a user has been removed from a group:        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"delete\" scope=\"user\" userId=\"574ff5153448af6c2940f908\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: DELETE https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e/users/574ff5153448af6c2940f908
     * @param {String} userIdToRemove User unique identifier of the user to remove from the group (like 574ff5153448af6c2940f908)
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemoveUserFromGroupSuccess}
     */
    this.removeUserFromGroup = function(userIdToRemove, userId, groupId, accept) {
      return this.removeUserFromGroupWithHttpInfo(userIdToRemove, userId, groupId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a group
     * This API can be used to update a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a group is updated using this API, all user's XMPP resources will receive the following message indicating them that a group has been updated (attributes name and comment are provided according to the updated field):        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"update\" scope=\"group\" name=\"Friends\" comment=\"Group with by best friends\" isFavorite=\"false\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: PUT https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {module:model/UpdateGroupById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateGroupByIdSuccess} and HTTP response
     */
    this.updateGroupByIdWithHttpInfo = function(userId, groupId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateGroupById");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateGroupById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGroupById");
      }

      var pathParams = {
        'userId': userId,
        'groupId': groupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateGroupByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/groups/{groupId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a group
     * This API can be used to update a group.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       When a group is updated using this API, all user's XMPP resources will receive the following message indicating them that a group has been updated (attributes name and comment are provided according to the updated field):        ```html <message type=\"management\" id=\"8413b42e-563c-4437-9a53-06f638b5ab69_0\"            from=\"pcloud@openrainbow.com/172440802160413612281463752830017532\"            to=\"85a456023ad249bea7a0cb1d5b4fb34a@openrainbow.com\" xmlns=\"jabber:client\">        <group id=\"57b44e9c0c32e0b425252f9e\" action=\"update\" scope=\"group\" name=\"Friends\" comment=\"Group with by best friends\" isFavorite=\"false\" xmlns=\"jabber:iq:configuration\"/>     </message> ```    Example: PUT https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/groups/57b44e9c0c32e0b425252f9e
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} groupId Group unique identifier (like 57b44e9c0c32e0b425252f9e)
     * @param {module:model/UpdateGroupById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateGroupByIdSuccess}
     */
    this.updateGroupById = function(userId, groupId, body) {
      return this.updateGroupByIdWithHttpInfo(userId, groupId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
