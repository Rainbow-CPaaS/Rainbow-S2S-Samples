/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RainbowAdminPortal);
  }
}(this, function(expect, RainbowAdminPortal) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RainbowAdminPortal.CompaniesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CompaniesApi', function() {
    describe('deleteCompanies', function() {
      it('should call deleteCompanies successfully', function(done) {
        //uncomment below and update the code to test deleteCompanies
        //instance.deleteCompanies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompanies', function() {
      it('should call getCompanies successfully', function(done) {
        //uncomment below and update the code to test getCompanies
        //instance.getCompanies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompaniesAdministrators', function() {
      it('should call getCompaniesAdministrators successfully', function(done) {
        //uncomment below and update the code to test getCompaniesAdministrators
        //instance.getCompaniesAdministrators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompaniesId', function() {
      it('should call getCompaniesId successfully', function(done) {
        //uncomment below and update the code to test getCompaniesId
        //instance.getCompaniesId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompaniesServiceDescription', function() {
      it('should call getCompaniesServiceDescription successfully', function(done) {
        //uncomment below and update the code to test getCompaniesServiceDescription
        //instance.getCompaniesServiceDescription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompanyAppCustomisation', function() {
      it('should call getCompanyAppCustomisation successfully', function(done) {
        //uncomment below and update the code to test getCompanyAppCustomisation
        //instance.getCompanyAppCustomisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompanyAppFeatureCustomisation', function() {
      it('should call getCompanyAppFeatureCustomisation successfully', function(done) {
        //uncomment below and update the code to test getCompanyAppFeatureCustomisation
        //instance.getCompanyAppFeatureCustomisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDefaultCompany', function() {
      it('should call getDefaultCompany successfully', function(done) {
        //uncomment below and update the code to test getDefaultCompany
        //instance.getDefaultCompany(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postCompanies', function() {
      it('should call postCompanies successfully', function(done) {
        //uncomment below and update the code to test postCompanies
        //instance.postCompanies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putCompanies', function() {
      it('should call putCompanies successfully', function(done) {
        //uncomment below and update the code to test putCompanies
        //instance.putCompanies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setCompanyCustomisation', function() {
      it('should call setCompanyCustomisation successfully', function(done) {
        //uncomment below and update the code to test setCompanyCustomisation
        //instance.setCompanyCustomisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setCompanyFeatureCustomisation', function() {
      it('should call setCompanyFeatureCustomisation successfully', function(done) {
        //uncomment below and update the code to test setCompanyFeatureCustomisation
        //instance.setCompanyFeatureCustomisation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
