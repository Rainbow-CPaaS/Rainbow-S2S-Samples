/*
 * S2S api
 * # Rainbow S2S API guide  ## Preamble  ### Introduction  This guide describes a list of API services that are provided by the OT Rainbow S2S portal. This portal is dedicated to S2S features, providing a full REST API for Rainbow features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP verbs GET, DELETE, POST, PUT, etc. are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according to the stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, e.g. “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.s2s.api;

import com.ale.rainbow.s2s.client.s2s.ApiCallback;
import com.ale.rainbow.s2s.client.s2s.ApiClient;
import com.ale.rainbow.s2s.client.s2s.ApiException;
import com.ale.rainbow.s2s.client.s2s.ApiResponse;
import com.ale.rainbow.s2s.client.s2s.Configuration;
import com.ale.rainbow.s2s.client.s2s.Pair;
import com.ale.rainbow.s2s.client.s2s.ProgressRequestBody;
import com.ale.rainbow.s2s.client.s2s.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ale.rainbow.s2s.client.s2s.models.DeleteAllResponse;
import com.ale.rainbow.s2s.client.s2s.models.Message;
import com.ale.rainbow.s2s.client.s2s.models.MessageCreate;
import com.ale.rainbow.s2s.client.s2s.models.MessageCreateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageApi {
    private ApiClient localVarApiClient;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for messageCreate
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param messageCreate Message data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageCreateCall(String cnxId, String cvId, MessageCreate messageCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = messageCreate;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "cvId" + "\\}", localVarApiClient.escapeString(cvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messageCreateValidateBeforeCall(String cnxId, String cvId, MessageCreate messageCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling messageCreate(Async)");
        }
        
        // verify the required parameter 'cvId' is set
        if (cvId == null) {
            throw new ApiException("Missing the required parameter 'cvId' when calling messageCreate(Async)");
        }
        

        okhttp3.Call localVarCall = messageCreateCall(cnxId, cvId, messageCreate, _callback);
        return localVarCall;

    }

    /**
     * Send a new message
     * Send a new message to a recipient identified by a conversation Id. **Caution**: prior to sending a message to a room, you will have to &#39;join&#39; it
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param messageCreate Message data (optional)
     * @return MessageCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public MessageCreateResponse messageCreate(String cnxId, String cvId, MessageCreate messageCreate) throws ApiException {
        ApiResponse<MessageCreateResponse> localVarResp = messageCreateWithHttpInfo(cnxId, cvId, messageCreate);
        return localVarResp.getData();
    }

    /**
     * Send a new message
     * Send a new message to a recipient identified by a conversation Id. **Caution**: prior to sending a message to a room, you will have to &#39;join&#39; it
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param messageCreate Message data (optional)
     * @return ApiResponse&lt;MessageCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageCreateResponse> messageCreateWithHttpInfo(String cnxId, String cvId, MessageCreate messageCreate) throws ApiException {
        okhttp3.Call localVarCall = messageCreateValidateBeforeCall(cnxId, cvId, messageCreate, null);
        Type localVarReturnType = new TypeToken<MessageCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a new message (asynchronously)
     * Send a new message to a recipient identified by a conversation Id. **Caution**: prior to sending a message to a room, you will have to &#39;join&#39; it
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param messageCreate Message data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageCreateAsync(String cnxId, String cvId, MessageCreate messageCreate, final ApiCallback<MessageCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = messageCreateValidateBeforeCall(cnxId, cvId, messageCreate, _callback);
        Type localVarReturnType = new TypeToken<MessageCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for messageDeleteAll
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageDeleteAllCall(String cnxId, String cvId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "cvId" + "\\}", localVarApiClient.escapeString(cvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messageDeleteAllValidateBeforeCall(String cnxId, String cvId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling messageDeleteAll(Async)");
        }
        
        // verify the required parameter 'cvId' is set
        if (cvId == null) {
            throw new ApiException("Missing the required parameter 'cvId' when calling messageDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = messageDeleteAllCall(cnxId, cvId, _callback);
        return localVarCall;

    }

    /**
     * Delete all conversation messages
     * Delete all conversation messages
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @return DeleteAllResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAllResponse messageDeleteAll(String cnxId, String cvId) throws ApiException {
        ApiResponse<DeleteAllResponse> localVarResp = messageDeleteAllWithHttpInfo(cnxId, cvId);
        return localVarResp.getData();
    }

    /**
     * Delete all conversation messages
     * Delete all conversation messages
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @return ApiResponse&lt;DeleteAllResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAllResponse> messageDeleteAllWithHttpInfo(String cnxId, String cvId) throws ApiException {
        okhttp3.Call localVarCall = messageDeleteAllValidateBeforeCall(cnxId, cvId, null);
        Type localVarReturnType = new TypeToken<DeleteAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete all conversation messages (asynchronously)
     * Delete all conversation messages
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageDeleteAllAsync(String cnxId, String cvId, final ApiCallback<DeleteAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = messageDeleteAllValidateBeforeCall(cnxId, cvId, _callback);
        Type localVarReturnType = new TypeToken<DeleteAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for messageIndex
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageIndexCall(String cnxId, String cvId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "cvId" + "\\}", localVarApiClient.escapeString(cvId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messageIndexValidateBeforeCall(String cnxId, String cvId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling messageIndex(Async)");
        }
        
        // verify the required parameter 'cvId' is set
        if (cvId == null) {
            throw new ApiException("Missing the required parameter 'cvId' when calling messageIndex(Async)");
        }
        

        okhttp3.Call localVarCall = messageIndexCall(cnxId, cvId, _callback);
        return localVarCall;

    }

    /**
     * List the messages of a conversation
     * Paginated list the messages of a conversation
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @return List&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public List<Message> messageIndex(String cnxId, String cvId) throws ApiException {
        ApiResponse<List<Message>> localVarResp = messageIndexWithHttpInfo(cnxId, cvId);
        return localVarResp.getData();
    }

    /**
     * List the messages of a conversation
     * Paginated list the messages of a conversation
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @return ApiResponse&lt;List&lt;Message&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Message>> messageIndexWithHttpInfo(String cnxId, String cvId) throws ApiException {
        okhttp3.Call localVarCall = messageIndexValidateBeforeCall(cnxId, cvId, null);
        Type localVarReturnType = new TypeToken<List<Message>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the messages of a conversation (asynchronously)
     * Paginated list the messages of a conversation
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageIndexAsync(String cnxId, String cvId, final ApiCallback<List<Message>> _callback) throws ApiException {

        okhttp3.Call localVarCall = messageIndexValidateBeforeCall(cnxId, cvId, _callback);
        Type localVarReturnType = new TypeToken<List<Message>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for messageReadReceipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageReadReceiptCall(String cnxId, String cvId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages/{id}/read"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "cvId" + "\\}", localVarApiClient.escapeString(cvId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messageReadReceiptValidateBeforeCall(String cnxId, String cvId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling messageReadReceipt(Async)");
        }
        
        // verify the required parameter 'cvId' is set
        if (cvId == null) {
            throw new ApiException("Missing the required parameter 'cvId' when calling messageReadReceipt(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling messageReadReceipt(Async)");
        }
        

        okhttp3.Call localVarCall = messageReadReceiptCall(cnxId, cvId, id, _callback);
        return localVarCall;

    }

    /**
     * Send a read receipt
     * Send a message read receipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void messageReadReceipt(String cnxId, String cvId, String id) throws ApiException {
        messageReadReceiptWithHttpInfo(cnxId, cvId, id);
    }

    /**
     * Send a read receipt
     * Send a message read receipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messageReadReceiptWithHttpInfo(String cnxId, String cvId, String id) throws ApiException {
        okhttp3.Call localVarCall = messageReadReceiptValidateBeforeCall(cnxId, cvId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send a read receipt (asynchronously)
     * Send a message read receipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageReadReceiptAsync(String cnxId, String cvId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messageReadReceiptValidateBeforeCall(cnxId, cvId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for messageReceivedReceipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageReceivedReceiptCall(String cnxId, String cvId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages/{id}/received"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "cvId" + "\\}", localVarApiClient.escapeString(cvId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messageReceivedReceiptValidateBeforeCall(String cnxId, String cvId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling messageReceivedReceipt(Async)");
        }
        
        // verify the required parameter 'cvId' is set
        if (cvId == null) {
            throw new ApiException("Missing the required parameter 'cvId' when calling messageReceivedReceipt(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling messageReceivedReceipt(Async)");
        }
        

        okhttp3.Call localVarCall = messageReceivedReceiptCall(cnxId, cvId, id, _callback);
        return localVarCall;

    }

    /**
     * Send a received receipt
     * Send a message received receipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void messageReceivedReceipt(String cnxId, String cvId, String id) throws ApiException {
        messageReceivedReceiptWithHttpInfo(cnxId, cvId, id);
    }

    /**
     * Send a received receipt
     * Send a message received receipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messageReceivedReceiptWithHttpInfo(String cnxId, String cvId, String id) throws ApiException {
        okhttp3.Call localVarCall = messageReceivedReceiptValidateBeforeCall(cnxId, cvId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send a received receipt (asynchronously)
     * Send a message received receipt
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param id Message id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messageReceivedReceiptAsync(String cnxId, String cvId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messageReceivedReceiptValidateBeforeCall(cnxId, cvId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
