/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.api;

import com.ale.rainbow.s2s.client.auth.ApiException;
import com.ale.rainbow.s2s.client.auth.models.GetApiRainbowAuthenticationV10ValidatorSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetBasicLoginSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetLogoutSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetRenewSuccess;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Ignore
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    
    /**
     * Validate user JWT
     *
     * This API allows to get a validation status on a token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiRainbowAuthenticationV10ValidatorTest() throws ApiException {
        String accept = null;
        GetApiRainbowAuthenticationV10ValidatorSuccess response = api.getApiRainbowAuthenticationV10Validator(accept);

        // TODO: test validations
    }
    
    /**
     * Login user
     *
     * This API allows Rainbow users to login. &lt;br/&gt; &lt;br/&gt; Application is also authenticated during the user login. &lt;br/&gt; &lt;br/&gt; If login is successful, the API returns a &lt;b&gt;JSON Web Token&lt;/b&gt; (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;) which has to be provided by clients for all Rainbow APIs requiring user authentication: &lt;ul&gt;     &lt;li&gt;The JWT is valid only for a given time period.&lt;/li&gt;     &lt;li&gt;The JWT can be renewed a few times using API &lt;a href&#x3D;\&quot;#api-authentication-GetRenew\&quot;&gt;GET /api/rainbow/authentication/v1.0/renew&lt;/a&gt;.&lt;/li&gt;     &lt;li&gt;The maximum number of renew is given in the JWT payload, as well as the current number of time the token has been renewed (see below).&lt;/li&gt;     &lt;li&gt;Once the JWT expired, or if the maximum of token renew has been reached, user must login again using this API.&lt;/li&gt; &lt;/ul&gt; The JWT returned contains the following data in payload: &lt;pre&gt;&lt;code class&#x3D;\&quot;language-json\&quot;&gt;{       \&quot;countRenewed\&quot;: 0,  // Number of times the token has been renewed       \&quot;maxTokenRenew\&quot;: 5,  // Number of times the token can be renewed       \&quot;user\&quot;: {           \&quot;id\&quot;: \&quot;572756967bfbca0d0e09a6b4\&quot;,  // Logged in user id           \&quot;loginEmail\&quot;: \&quot;user@company.com\&quot;  // Logged in user loginEmail       },       \&quot;app\&quot;: {           \&quot;id\&quot;: \&quot;598983029db9b5b14693a6f0\&quot;,  // Application id used for the authentication           \&quot;name\&quot;: \&quot;My App\&quot;  // Application name       },       \&quot;iat\&quot;: 1463588327,  // (Issued At) Time at which the JWT was issued       \&quot;exp\&quot;: 2183588327  // (Expiration Time) Expiration time after which the JWT won&#39;t be accepted }&lt;/code&gt;&lt;/pre&gt; &lt;br/&gt; &lt;br/&gt; If login / password combination is wrong, an error 401 is return. &lt;br/&gt; If appId / appSecret combination is wrong, an error 401 is return. &lt;br/&gt;The following login protection is implemented: &lt;ul&gt;     &lt;li&gt;After a given number of login failure (5 by default), the user account is &lt;b&gt;locked&lt;/b&gt; for a given time period (60 min by default).&lt;/li&gt;     &lt;li&gt;As long as the maximum number of login failure has not been reached, a 401 error with errorDetailsCode &lt;code&gt;401500&lt;/code&gt; is returned.&lt;/li&gt;     &lt;li&gt;Once the maximum number of login attempts has been reached, a 401 error with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; is returned: the user account is locked for the given time period.&lt;/li&gt;     &lt;li&gt;While the user account is locked, the same response with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; will be returned for each new login attempt for this user account     (even if a good login / password combination is provided). If the login / password combination is wrong, the locked time period restarts from this new wrong attempt.&lt;/li&gt;     &lt;li&gt;Once the locked time period is over, a login with the good credentials will be allowed.&lt;/li&gt;     &lt;li&gt;While the account is locked, the user can reset his password. In that case, his account will be unlocked and he will be able to login with his new password.&lt;/li&gt;     &lt;li&gt;While the account is locked, a superadmin / support / admin (organisation or company level) user can set a new password for this account. In that case, this account will be unlocked     and the user will be able to login with this new password.&lt;/li&gt; &lt;/ul&gt; &lt;dl&gt;     &lt;dt&gt;Warning&lt;/dt&gt;     &lt;dd&gt;login url is case sensitive (lowercase). For example, /Login or /LOGIN won&#39;t work.&lt;/dd&gt;     &lt;dd&gt;login will be forbidden for a certain delay if too much consecutive wrong password errors occurs, after this user has to request a password change or just wait (see implementation details above).&lt;/dd&gt; &lt;/dl&gt; &lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBasicLoginTest() throws ApiException {
        String xRainbowAppAuth = null;
        String accept = null;
        String xRainbowClient = null;
        String xRainbowClientVersion = null;
        GetBasicLoginSuccess response = api.getBasicLogin(xRainbowAppAuth, accept, xRainbowClient, xRainbowClientVersion);

        // TODO: test validations
    }
    
    /**
     * Logout user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogoutTest() throws ApiException {
        String accept = null;
        GetLogoutSuccess response = api.getLogout(accept);

        // TODO: test validations
    }
    
    /**
     * Renew user JWT
     *
     * This API allows Rainbow users to renew their JSON Web Token (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;), thus extending the expiration date of their current JWT. &lt;br/&gt; &lt;br/&gt; This API requires user to be authenticated with a valid non expired JWT. &lt;br/&gt; If so, a new JWT is returned, with the expiration date starting from now. &lt;br/&gt; &lt;br/&gt; &lt;b&gt;Warning:&lt;/b&gt; The JWT can only be renewed a given number of times, after this user has to login again to get a new token using API &lt;a href&#x3D;\&quot;#api-authentication-GetLogin\&quot;&gt;GET /api/rainbow/authentication/v1.0/login&lt;/a&gt;. &lt;br/&gt; The maximum number of renew is given in the JWT, as well as the current number of time the token has been renewed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRenewTest() throws ApiException {
        String accept = null;
        GetRenewSuccess response = api.getRenew(accept);

        // TODO: test validations
    }
    
}
