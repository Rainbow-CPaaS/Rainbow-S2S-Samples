/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * GetRenewSuccessProvisioningNeeded
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-13T18:40:41.602485+01:00[Europe/Paris]")
public class GetRenewSuccessProvisioningNeeded implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Only set if provisioningNeeded is set and the element of the array has providerType &#x60;JANUS&#x60;. Corresponds to the media type to use when provisioning the company account on WebRTC Conferencing component.
   */
  @JsonAdapter(MediaTypeEnum.Adapter.class)
  public enum MediaTypeEnum {
    WEBRTC("webrtc");

    private String value;

    MediaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediaTypeEnum fromValue(String value) {
      for (MediaTypeEnum b : MediaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediaTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private MediaTypeEnum mediaType;

  /**
   * Only set if provisioningNeeded is set and the element of the array has providerType &#x60;PGI&#x60;. Corresponds to an enterpriseId to use when provisioning the company account on PSTN Conferencing component.
   */
  @JsonAdapter(PgiEnterpriseIdEnum.Adapter.class)
  public enum PgiEnterpriseIdEnum {
    TESTENTERPRISEID("testEnterpriseId"),
    
    INTERNALENTERPRISEID("internalEnterpriseId"),
    
    GENERICENTERPRISEID("genericEnterpriseId");

    private String value;

    PgiEnterpriseIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PgiEnterpriseIdEnum fromValue(String value) {
      for (PgiEnterpriseIdEnum b : PgiEnterpriseIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PgiEnterpriseIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PgiEnterpriseIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PgiEnterpriseIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PgiEnterpriseIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PGI_ENTERPRISE_ID = "pgiEnterpriseId";
  @SerializedName(SERIALIZED_NAME_PGI_ENTERPRISE_ID)
  private PgiEnterpriseIdEnum pgiEnterpriseId;

  /**
   * If provisioningNeeded is set, each element of the array must contain providerType. providerType defines the internal component on which the provisioning is needed when subscribing to this offer (provisioning is launched asynchronously when the subscription is created).
   */
  @JsonAdapter(ProviderTypeEnum.Adapter.class)
  public enum ProviderTypeEnum {
    PGI("PGI"),
    
    JANUS("JANUS");

    private String value;

    ProviderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderTypeEnum fromValue(String value) {
      for (ProviderTypeEnum b : ProviderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "providerType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private ProviderTypeEnum providerType;


  public GetRenewSuccessProvisioningNeeded mediaType(MediaTypeEnum mediaType) {
    
    this.mediaType = mediaType;
    return this;
  }

   /**
   * Only set if provisioningNeeded is set and the element of the array has providerType &#x60;JANUS&#x60;. Corresponds to the media type to use when provisioning the company account on WebRTC Conferencing component.
   * @return mediaType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only set if provisioningNeeded is set and the element of the array has providerType `JANUS`. Corresponds to the media type to use when provisioning the company account on WebRTC Conferencing component.")

  public MediaTypeEnum getMediaType() {
    return mediaType;
  }


  public void setMediaType(MediaTypeEnum mediaType) {
    this.mediaType = mediaType;
  }


  public GetRenewSuccessProvisioningNeeded pgiEnterpriseId(PgiEnterpriseIdEnum pgiEnterpriseId) {
    
    this.pgiEnterpriseId = pgiEnterpriseId;
    return this;
  }

   /**
   * Only set if provisioningNeeded is set and the element of the array has providerType &#x60;PGI&#x60;. Corresponds to an enterpriseId to use when provisioning the company account on PSTN Conferencing component.
   * @return pgiEnterpriseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only set if provisioningNeeded is set and the element of the array has providerType `PGI`. Corresponds to an enterpriseId to use when provisioning the company account on PSTN Conferencing component.")

  public PgiEnterpriseIdEnum getPgiEnterpriseId() {
    return pgiEnterpriseId;
  }


  public void setPgiEnterpriseId(PgiEnterpriseIdEnum pgiEnterpriseId) {
    this.pgiEnterpriseId = pgiEnterpriseId;
  }


  public GetRenewSuccessProvisioningNeeded providerType(ProviderTypeEnum providerType) {
    
    this.providerType = providerType;
    return this;
  }

   /**
   * If provisioningNeeded is set, each element of the array must contain providerType. providerType defines the internal component on which the provisioning is needed when subscribing to this offer (provisioning is launched asynchronously when the subscription is created).
   * @return providerType
  **/
  @ApiModelProperty(required = true, value = "If provisioningNeeded is set, each element of the array must contain providerType. providerType defines the internal component on which the provisioning is needed when subscribing to this offer (provisioning is launched asynchronously when the subscription is created).")

  public ProviderTypeEnum getProviderType() {
    return providerType;
  }


  public void setProviderType(ProviderTypeEnum providerType) {
    this.providerType = providerType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRenewSuccessProvisioningNeeded getRenewSuccessProvisioningNeeded = (GetRenewSuccessProvisioningNeeded) o;
    return Objects.equals(this.mediaType, getRenewSuccessProvisioningNeeded.mediaType) &&
        Objects.equals(this.pgiEnterpriseId, getRenewSuccessProvisioningNeeded.pgiEnterpriseId) &&
        Objects.equals(this.providerType, getRenewSuccessProvisioningNeeded.providerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mediaType, pgiEnterpriseId, providerType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRenewSuccessProvisioningNeeded {\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    pgiEnterpriseId: ").append(toIndentedString(pgiEnterpriseId)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

