/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * OAuthTokenSuccess
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-13T18:40:41.602485+01:00[Europe/Paris]")
public class OAuthTokenSuccess implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private String expiresIn;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refresh_token";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_TOKEN_TYPE = "token_type";
  @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
  private String tokenType;


  public OAuthTokenSuccess accessToken(String accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * The access token generated by Rainbow authentication server. &lt;br/&gt; To be used to call Rainbow APIs (header Authorization: Bearer &lt;access_token&gt;, see related Rainbow API documentation). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-5.1\&quot;&gt;OAuth 2.0 RFC, section 5.1&lt;/a&gt;.
   * @return accessToken
  **/
  @ApiModelProperty(required = true, value = "The access token generated by Rainbow authentication server. <br/> To be used to call Rainbow APIs (header Authorization: Bearer <access_token>, see related Rainbow API documentation). <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.")

  public String getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public OAuthTokenSuccess expiresIn(String expiresIn) {
    
    this.expiresIn = expiresIn;
    return this;
  }

   /**
   * The access token lifetime. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-5.1\&quot;&gt;OAuth 2.0 RFC, section 5.1&lt;/a&gt;.
   * @return expiresIn
  **/
  @ApiModelProperty(required = true, value = "The access token lifetime. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.")

  public String getExpiresIn() {
    return expiresIn;
  }


  public void setExpiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
  }


  public OAuthTokenSuccess refreshToken(String refreshToken) {
    
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * The refresh token generated by Rainbow authentication server. &lt;br/&gt; To be used to refresh an access token using this POST /api/rainbow/authentication/v1.0/oauth/token endpoint. &lt;br/&gt; Generated refresh_token has a lifetime of 90 days. &lt;br/&gt; Note that a new refresh token is generated during \&quot;&lt;b&gt;Refresh an Access Token&lt;/b&gt;\&quot; flow, overwriting the one used to refresh the access token       (this previous one is revoked). This new refresh token is regenerated with a lifetime of 90 days.       Therefore, as long as the application refreshes its access token during the refresh token lifetime period,       it can continue to use Rainbow APIs without redoing the whole OAuth authorization code flow. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-5.1\&quot;&gt;OAuth 2.0 RFC, section 5.1&lt;/a&gt;.
   * @return refreshToken
  **/
  @ApiModelProperty(required = true, value = "The refresh token generated by Rainbow authentication server. <br/> To be used to refresh an access token using this POST /api/rainbow/authentication/v1.0/oauth/token endpoint. <br/> Generated refresh_token has a lifetime of 90 days. <br/> Note that a new refresh token is generated during \"<b>Refresh an Access Token</b>\" flow, overwriting the one used to refresh the access token       (this previous one is revoked). This new refresh token is regenerated with a lifetime of 90 days.       Therefore, as long as the application refreshes its access token during the refresh token lifetime period,       it can continue to use Rainbow APIs without redoing the whole OAuth authorization code flow. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.")

  public String getRefreshToken() {
    return refreshToken;
  }


  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public OAuthTokenSuccess tokenType(String tokenType) {
    
    this.tokenType = tokenType;
    return this;
  }

   /**
   * The type of the access token issued. &lt;br/&gt; Should always be &lt;strong&gt;Bearer&lt;/strong&gt; for access tokens generated by Rainbow authentication server. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-5.1\&quot;&gt;OAuth 2.0 RFC, section 5.1&lt;/a&gt;.
   * @return tokenType
  **/
  @ApiModelProperty(required = true, value = "The type of the access token issued. <br/> Should always be <strong>Bearer</strong> for access tokens generated by Rainbow authentication server. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-5.1\">OAuth 2.0 RFC, section 5.1</a>.")

  public String getTokenType() {
    return tokenType;
  }


  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthTokenSuccess oauthTokenSuccess = (OAuthTokenSuccess) o;
    return Objects.equals(this.accessToken, oauthTokenSuccess.accessToken) &&
        Objects.equals(this.expiresIn, oauthTokenSuccess.expiresIn) &&
        Objects.equals(this.refreshToken, oauthTokenSuccess.refreshToken) &&
        Objects.equals(this.tokenType, oauthTokenSuccess.tokenType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, expiresIn, refreshToken, tokenType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthTokenSuccess {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

