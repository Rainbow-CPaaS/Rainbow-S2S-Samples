<?php
/**
 * MessageApi
 * PHP version 5
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\S2S
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * S2S api
 *
 * # Rainbow S2S API guide  ## Preamble  ### Introduction  This guide describes a list of API services that are provided by the OT Rainbow S2S portal. This portal is dedicated to S2S features, providing a full REST API for Rainbow features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP verbs GET, DELETE, POST, PUT, etc. are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according to the stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, e.g. “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ale\Rainbow\S2S\Client\S2S\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ale\Rainbow\S2S\Client\S2S\ApiException;
use Ale\Rainbow\S2S\Client\S2S\Configuration;
use Ale\Rainbow\S2S\Client\S2S\HeaderSelector;
use Ale\Rainbow\S2S\Client\S2S\ObjectSerializer;

/**
 * MessageApi Class Doc Comment
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\S2S
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation messageCreate
     *
     * Send a new message
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  \Ale\Rainbow\S2S\Client\S2S\Model\MessageCreate $message_create Message data (optional)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\S2S\Model\MessageCreateResponse
     */
    public function messageCreate($cnx_id, $cv_id, $message_create = null)
    {
        list($response) = $this->messageCreateWithHttpInfo($cnx_id, $cv_id, $message_create);
        return $response;
    }

    /**
     * Operation messageCreateWithHttpInfo
     *
     * Send a new message
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  \Ale\Rainbow\S2S\Client\S2S\Model\MessageCreate $message_create Message data (optional)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\S2S\Model\MessageCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function messageCreateWithHttpInfo($cnx_id, $cv_id, $message_create = null)
    {
        $request = $this->messageCreateRequest($cnx_id, $cv_id, $message_create);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\S2S\Model\MessageCreateResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\S2S\Model\MessageCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\S2S\Model\MessageCreateResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\S2S\Model\MessageCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation messageCreateAsync
     *
     * Send a new message
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  \Ale\Rainbow\S2S\Client\S2S\Model\MessageCreate $message_create Message data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageCreateAsync($cnx_id, $cv_id, $message_create = null)
    {
        return $this->messageCreateAsyncWithHttpInfo($cnx_id, $cv_id, $message_create)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation messageCreateAsyncWithHttpInfo
     *
     * Send a new message
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  \Ale\Rainbow\S2S\Client\S2S\Model\MessageCreate $message_create Message data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageCreateAsyncWithHttpInfo($cnx_id, $cv_id, $message_create = null)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\S2S\Model\MessageCreateResponse';
        $request = $this->messageCreateRequest($cnx_id, $cv_id, $message_create);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'messageCreate'
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  \Ale\Rainbow\S2S\Client\S2S\Model\MessageCreate $message_create Message data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function messageCreateRequest($cnx_id, $cv_id, $message_create = null)
    {
        // verify the required parameter 'cnx_id' is set
        if ($cnx_id === null || (is_array($cnx_id) && count($cnx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnx_id when calling messageCreate'
            );
        }
        // verify the required parameter 'cv_id' is set
        if ($cv_id === null || (is_array($cv_id) && count($cv_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cv_id when calling messageCreate'
            );
        }

        $resourcePath = '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cnx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cnxId' . '}',
                ObjectSerializer::toPathValue($cnx_id),
                $resourcePath
            );
        }
        // path params
        if ($cv_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cvId' . '}',
                ObjectSerializer::toPathValue($cv_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($message_create)) {
            $_tempBody = $message_create;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation messageDeleteAll
     *
     * Delete all conversation messages
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\S2S\Model\DeleteAllResponse
     */
    public function messageDeleteAll($cnx_id, $cv_id)
    {
        list($response) = $this->messageDeleteAllWithHttpInfo($cnx_id, $cv_id);
        return $response;
    }

    /**
     * Operation messageDeleteAllWithHttpInfo
     *
     * Delete all conversation messages
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\S2S\Model\DeleteAllResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function messageDeleteAllWithHttpInfo($cnx_id, $cv_id)
    {
        $request = $this->messageDeleteAllRequest($cnx_id, $cv_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\S2S\Model\DeleteAllResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\S2S\Model\DeleteAllResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\S2S\Model\DeleteAllResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\S2S\Model\DeleteAllResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation messageDeleteAllAsync
     *
     * Delete all conversation messages
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageDeleteAllAsync($cnx_id, $cv_id)
    {
        return $this->messageDeleteAllAsyncWithHttpInfo($cnx_id, $cv_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation messageDeleteAllAsyncWithHttpInfo
     *
     * Delete all conversation messages
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageDeleteAllAsyncWithHttpInfo($cnx_id, $cv_id)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\S2S\Model\DeleteAllResponse';
        $request = $this->messageDeleteAllRequest($cnx_id, $cv_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'messageDeleteAll'
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function messageDeleteAllRequest($cnx_id, $cv_id)
    {
        // verify the required parameter 'cnx_id' is set
        if ($cnx_id === null || (is_array($cnx_id) && count($cnx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnx_id when calling messageDeleteAll'
            );
        }
        // verify the required parameter 'cv_id' is set
        if ($cv_id === null || (is_array($cv_id) && count($cv_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cv_id when calling messageDeleteAll'
            );
        }

        $resourcePath = '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cnx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cnxId' . '}',
                ObjectSerializer::toPathValue($cnx_id),
                $resourcePath
            );
        }
        // path params
        if ($cv_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cvId' . '}',
                ObjectSerializer::toPathValue($cv_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation messageIndex
     *
     * List the messages of a conversation
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\S2S\Model\Message[]
     */
    public function messageIndex($cnx_id, $cv_id)
    {
        list($response) = $this->messageIndexWithHttpInfo($cnx_id, $cv_id);
        return $response;
    }

    /**
     * Operation messageIndexWithHttpInfo
     *
     * List the messages of a conversation
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\S2S\Model\Message[], HTTP status code, HTTP response headers (array of strings)
     */
    public function messageIndexWithHttpInfo($cnx_id, $cv_id)
    {
        $request = $this->messageIndexRequest($cnx_id, $cv_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\S2S\Model\Message[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\S2S\Model\Message[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\S2S\Model\Message[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\S2S\Model\Message[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation messageIndexAsync
     *
     * List the messages of a conversation
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageIndexAsync($cnx_id, $cv_id)
    {
        return $this->messageIndexAsyncWithHttpInfo($cnx_id, $cv_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation messageIndexAsyncWithHttpInfo
     *
     * List the messages of a conversation
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageIndexAsyncWithHttpInfo($cnx_id, $cv_id)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\S2S\Model\Message[]';
        $request = $this->messageIndexRequest($cnx_id, $cv_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'messageIndex'
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function messageIndexRequest($cnx_id, $cv_id)
    {
        // verify the required parameter 'cnx_id' is set
        if ($cnx_id === null || (is_array($cnx_id) && count($cnx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnx_id when calling messageIndex'
            );
        }
        // verify the required parameter 'cv_id' is set
        if ($cv_id === null || (is_array($cv_id) && count($cv_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cv_id when calling messageIndex'
            );
        }

        $resourcePath = '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cnx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cnxId' . '}',
                ObjectSerializer::toPathValue($cnx_id),
                $resourcePath
            );
        }
        // path params
        if ($cv_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cvId' . '}',
                ObjectSerializer::toPathValue($cv_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation messageReadReceipt
     *
     * Send a read receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function messageReadReceipt($cnx_id, $cv_id, $id)
    {
        $this->messageReadReceiptWithHttpInfo($cnx_id, $cv_id, $id);
    }

    /**
     * Operation messageReadReceiptWithHttpInfo
     *
     * Send a read receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function messageReadReceiptWithHttpInfo($cnx_id, $cv_id, $id)
    {
        $request = $this->messageReadReceiptRequest($cnx_id, $cv_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation messageReadReceiptAsync
     *
     * Send a read receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageReadReceiptAsync($cnx_id, $cv_id, $id)
    {
        return $this->messageReadReceiptAsyncWithHttpInfo($cnx_id, $cv_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation messageReadReceiptAsyncWithHttpInfo
     *
     * Send a read receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageReadReceiptAsyncWithHttpInfo($cnx_id, $cv_id, $id)
    {
        $returnType = '';
        $request = $this->messageReadReceiptRequest($cnx_id, $cv_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'messageReadReceipt'
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function messageReadReceiptRequest($cnx_id, $cv_id, $id)
    {
        // verify the required parameter 'cnx_id' is set
        if ($cnx_id === null || (is_array($cnx_id) && count($cnx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnx_id when calling messageReadReceipt'
            );
        }
        // verify the required parameter 'cv_id' is set
        if ($cv_id === null || (is_array($cv_id) && count($cv_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cv_id when calling messageReadReceipt'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling messageReadReceipt'
            );
        }

        $resourcePath = '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages/{id}/read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cnx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cnxId' . '}',
                ObjectSerializer::toPathValue($cnx_id),
                $resourcePath
            );
        }
        // path params
        if ($cv_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cvId' . '}',
                ObjectSerializer::toPathValue($cv_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation messageReceivedReceipt
     *
     * Send a received receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function messageReceivedReceipt($cnx_id, $cv_id, $id)
    {
        $this->messageReceivedReceiptWithHttpInfo($cnx_id, $cv_id, $id);
    }

    /**
     * Operation messageReceivedReceiptWithHttpInfo
     *
     * Send a received receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\S2S\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function messageReceivedReceiptWithHttpInfo($cnx_id, $cv_id, $id)
    {
        $request = $this->messageReceivedReceiptRequest($cnx_id, $cv_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation messageReceivedReceiptAsync
     *
     * Send a received receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageReceivedReceiptAsync($cnx_id, $cv_id, $id)
    {
        return $this->messageReceivedReceiptAsyncWithHttpInfo($cnx_id, $cv_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation messageReceivedReceiptAsyncWithHttpInfo
     *
     * Send a received receipt
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function messageReceivedReceiptAsyncWithHttpInfo($cnx_id, $cv_id, $id)
    {
        $returnType = '';
        $request = $this->messageReceivedReceiptRequest($cnx_id, $cv_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'messageReceivedReceipt'
     *
     * @param  string $cnx_id Connection id (required)
     * @param  string $cv_id Conversation id (required)
     * @param  string $id Message id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function messageReceivedReceiptRequest($cnx_id, $cv_id, $id)
    {
        // verify the required parameter 'cnx_id' is set
        if ($cnx_id === null || (is_array($cnx_id) && count($cnx_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnx_id when calling messageReceivedReceipt'
            );
        }
        // verify the required parameter 'cv_id' is set
        if ($cv_id === null || (is_array($cv_id) && count($cv_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cv_id when calling messageReceivedReceipt'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling messageReceivedReceipt'
            );
        }

        $resourcePath = '/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/messages/{id}/received';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cnx_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cnxId' . '}',
                ObjectSerializer::toPathValue($cnx_id),
                $resourcePath
            );
        }
        // path params
        if ($cv_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cvId' . '}',
                ObjectSerializer::toPathValue($cv_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
