<?php
/**
 * OauthTokensApi
 * PHP version 5
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rainbow authentication portal
 *
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ale\Rainbow\S2S\Client\AuthPortal\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ale\Rainbow\S2S\Client\AuthPortal\ApiException;
use Ale\Rainbow\S2S\Client\AuthPortal\Configuration;
use Ale\Rainbow\S2S\Client\AuthPortal\HeaderSelector;
use Ale\Rainbow\S2S\Client\AuthPortal\ObjectSerializer;

/**
 * OauthTokensApi Class Doc Comment
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OauthTokensApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteOAuthToken
     *
     * Delete an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\DeleteOAuthTokenSuccess
     */
    public function deleteOAuthToken($token_id, $accept)
    {
        list($response) = $this->deleteOAuthTokenWithHttpInfo($token_id, $accept);
        return $response;
    }

    /**
     * Operation deleteOAuthTokenWithHttpInfo
     *
     * Delete an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\AuthPortal\Model\DeleteOAuthTokenSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOAuthTokenWithHttpInfo($token_id, $accept)
    {
        $request = $this->deleteOAuthTokenRequest($token_id, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\AuthPortal\Model\DeleteOAuthTokenSuccess' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\AuthPortal\Model\DeleteOAuthTokenSuccess', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\DeleteOAuthTokenSuccess';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\AuthPortal\Model\DeleteOAuthTokenSuccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOAuthTokenAsync
     *
     * Delete an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOAuthTokenAsync($token_id, $accept)
    {
        return $this->deleteOAuthTokenAsyncWithHttpInfo($token_id, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOAuthTokenAsyncWithHttpInfo
     *
     * Delete an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOAuthTokenAsyncWithHttpInfo($token_id, $accept)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\DeleteOAuthTokenSuccess';
        $request = $this->deleteOAuthTokenRequest($token_id, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOAuthToken'
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOAuthTokenRequest($token_id, $accept)
    {
        // verify the required parameter 'token_id' is set
        if ($token_id === null || (is_array($token_id) && count($token_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_id when calling deleteOAuthToken'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling deleteOAuthToken'
            );
        }

        $resourcePath = '/api/rainbow/authentication/v1.0/oauth/tokens/{tokenId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($token_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenId' . '}',
                ObjectSerializer::toPathValue($token_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOAuthToken
     *
     * Get all OAuth token
     *
     * @param  string $accept application/json (required)
     * @param  string $format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to 'small')
     * @param  float $limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0)
     * @param  float $offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param  string $sort_field Sort OAuth tokens list based on the given field. (optional, default to 'appName')
     * @param  float $sort_order Specify order when sorting OAuth tokens list. (optional, default to 1.0)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenSuccess
     */
    public function getOAuthToken($accept, $format = 'small', $limit = 100.0, $offset = null, $sort_field = 'appName', $sort_order = 1.0)
    {
        list($response) = $this->getOAuthTokenWithHttpInfo($accept, $format, $limit, $offset, $sort_field, $sort_order);
        return $response;
    }

    /**
     * Operation getOAuthTokenWithHttpInfo
     *
     * Get all OAuth token
     *
     * @param  string $accept application/json (required)
     * @param  string $format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to 'small')
     * @param  float $limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0)
     * @param  float $offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param  string $sort_field Sort OAuth tokens list based on the given field. (optional, default to 'appName')
     * @param  float $sort_order Specify order when sorting OAuth tokens list. (optional, default to 1.0)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOAuthTokenWithHttpInfo($accept, $format = 'small', $limit = 100.0, $offset = null, $sort_field = 'appName', $sort_order = 1.0)
    {
        $request = $this->getOAuthTokenRequest($accept, $format, $limit, $offset, $sort_field, $sort_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenSuccess' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenSuccess', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenSuccess';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenSuccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOAuthTokenAsync
     *
     * Get all OAuth token
     *
     * @param  string $accept application/json (required)
     * @param  string $format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to 'small')
     * @param  float $limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0)
     * @param  float $offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param  string $sort_field Sort OAuth tokens list based on the given field. (optional, default to 'appName')
     * @param  float $sort_order Specify order when sorting OAuth tokens list. (optional, default to 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOAuthTokenAsync($accept, $format = 'small', $limit = 100.0, $offset = null, $sort_field = 'appName', $sort_order = 1.0)
    {
        return $this->getOAuthTokenAsyncWithHttpInfo($accept, $format, $limit, $offset, $sort_field, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOAuthTokenAsyncWithHttpInfo
     *
     * Get all OAuth token
     *
     * @param  string $accept application/json (required)
     * @param  string $format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to 'small')
     * @param  float $limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0)
     * @param  float $offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param  string $sort_field Sort OAuth tokens list based on the given field. (optional, default to 'appName')
     * @param  float $sort_order Specify order when sorting OAuth tokens list. (optional, default to 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOAuthTokenAsyncWithHttpInfo($accept, $format = 'small', $limit = 100.0, $offset = null, $sort_field = 'appName', $sort_order = 1.0)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenSuccess';
        $request = $this->getOAuthTokenRequest($accept, $format, $limit, $offset, $sort_field, $sort_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOAuthToken'
     *
     * @param  string $accept application/json (required)
     * @param  string $format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to 'small')
     * @param  float $limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0)
     * @param  float $offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param  string $sort_field Sort OAuth tokens list based on the given field. (optional, default to 'appName')
     * @param  float $sort_order Specify order when sorting OAuth tokens list. (optional, default to 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOAuthTokenRequest($accept, $format = 'small', $limit = 100.0, $offset = null, $sort_field = 'appName', $sort_order = 1.0)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling getOAuthToken'
            );
        }

        $resourcePath = '/api/rainbow/authentication/v1.0/oauth/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = ObjectSerializer::toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order);
        }
        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOAuthTokenById
     *
     * Get an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenByIdSuccess
     */
    public function getOAuthTokenById($token_id, $accept)
    {
        list($response) = $this->getOAuthTokenByIdWithHttpInfo($token_id, $accept);
        return $response;
    }

    /**
     * Operation getOAuthTokenByIdWithHttpInfo
     *
     * Get an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenByIdSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOAuthTokenByIdWithHttpInfo($token_id, $accept)
    {
        $request = $this->getOAuthTokenByIdRequest($token_id, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenByIdSuccess' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenByIdSuccess', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenByIdSuccess';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenByIdSuccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOAuthTokenByIdAsync
     *
     * Get an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOAuthTokenByIdAsync($token_id, $accept)
    {
        return $this->getOAuthTokenByIdAsyncWithHttpInfo($token_id, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOAuthTokenByIdAsyncWithHttpInfo
     *
     * Get an OAuth token
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOAuthTokenByIdAsyncWithHttpInfo($token_id, $accept)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetOAuthTokenByIdSuccess';
        $request = $this->getOAuthTokenByIdRequest($token_id, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOAuthTokenById'
     *
     * @param  string $token_id OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param  string $accept application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOAuthTokenByIdRequest($token_id, $accept)
    {
        // verify the required parameter 'token_id' is set
        if ($token_id === null || (is_array($token_id) && count($token_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_id when calling getOAuthTokenById'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling getOAuthTokenById'
            );
        }

        $resourcePath = '/api/rainbow/authentication/v1.0/oauth/tokens/{tokenId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($token_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenId' . '}',
                ObjectSerializer::toPathValue($token_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
