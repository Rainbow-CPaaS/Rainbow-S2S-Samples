<?php
/**
 * OauthAuthenticationApi
 * PHP version 5
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rainbow authentication portal
 *
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ale\Rainbow\S2S\Client\AuthPortal\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ale\Rainbow\S2S\Client\AuthPortal\ApiException;
use Ale\Rainbow\S2S\Client\AuthPortal\Configuration;
use Ale\Rainbow\S2S\Client\AuthPortal\HeaderSelector;
use Ale\Rainbow\S2S\Client\AuthPortal\ObjectSerializer;

/**
 * OauthAuthenticationApi Class Doc Comment
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OauthAuthenticationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation oAuthAuthorize
     *
     * 1 - OAuth Authorization Request
     *
     * @param  string $content_type application/x-www-form-urlencoded (required)
     * @param  string $response_type Desired grant type to use for authorize endpoint. &lt;br/&gt; To be set to: - &#x60;&#x60;&#x60;code&#x60;&#x60;&#x60; if Authorization Code grant is used, - &#x60;&#x60;&#x60;token&#x60;&#x60;&#x60; if Implicit grant is used.  For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.1\&quot;&gt;section 3.1.1&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $client_id Unique identifier of the application requesting the authorization (also documented as &#x60;&#x60;&#x60;appId&#x60;&#x60;&#x60; in Rainbow APIs documentation). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-2.2\&quot;&gt;section 2.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $redirect_uri Application&#39;s endpoint URI where the user-agent will be redirected with the authorization code (Authorization Code grant) or access token (Implicit grant) if the user grants access to the application. &lt;br/&gt; Errors are redirected to this endpoint as well, for example in the case the user declines access to the application. &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is specified, it must be one of the URIs defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter,       otherwise the user-agent is redirected to the specified redirect_uri with an error and error_description parameters in query string       (error&#x3D;invalid_client&amp;error_description&#x3D;Invalid client: &#x60;redirect_uri&#x60; does not match client value). &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is not specified, the first URI defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter is used. &lt;br/&gt; &#x3D;&gt; Application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter must be configured to allow the application to use OAuth 2.0 authorization grant. &lt;br/&gt; &lt;br/&gt; If Authorization Code grant is used, this endpoint should use TLS for security reasons, as sensitive data are sent to application&#39;s endpoint through a public network. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.2\&quot;&gt;section 3.1.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $scope The scope of the Rainbow API access requested by the application. &lt;br/&gt; For now, only &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60; is implemented (i.e. application has access to all the Rainbow APIs). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.3\&quot;&gt;section 3.3&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $state A random string that can be provided by the application to maintain state between the authorize request and the redirection to redirect_uri endpoint (state is sent back by Rainbow authentication server to redirect_uri endpoint). &lt;br/&gt; This should be used by the application to prevent against cross-site request forgery (CSRF). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1&lt;/a&gt;. &lt;br/&gt; For more information regarding cross-site request forgery (CSRF) threat, details are available in the       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-10.12\&quot;&gt;section 10.12&lt;/a&gt;. (optional)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthAuthorizeSuccess
     */
    public function oAuthAuthorize($content_type, $response_type, $client_id, $redirect_uri = null, $scope = null, $state = null)
    {
        list($response) = $this->oAuthAuthorizeWithHttpInfo($content_type, $response_type, $client_id, $redirect_uri, $scope, $state);
        return $response;
    }

    /**
     * Operation oAuthAuthorizeWithHttpInfo
     *
     * 1 - OAuth Authorization Request
     *
     * @param  string $content_type application/x-www-form-urlencoded (required)
     * @param  string $response_type Desired grant type to use for authorize endpoint. &lt;br/&gt; To be set to: - &#x60;&#x60;&#x60;code&#x60;&#x60;&#x60; if Authorization Code grant is used, - &#x60;&#x60;&#x60;token&#x60;&#x60;&#x60; if Implicit grant is used.  For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.1\&quot;&gt;section 3.1.1&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $client_id Unique identifier of the application requesting the authorization (also documented as &#x60;&#x60;&#x60;appId&#x60;&#x60;&#x60; in Rainbow APIs documentation). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-2.2\&quot;&gt;section 2.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $redirect_uri Application&#39;s endpoint URI where the user-agent will be redirected with the authorization code (Authorization Code grant) or access token (Implicit grant) if the user grants access to the application. &lt;br/&gt; Errors are redirected to this endpoint as well, for example in the case the user declines access to the application. &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is specified, it must be one of the URIs defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter,       otherwise the user-agent is redirected to the specified redirect_uri with an error and error_description parameters in query string       (error&#x3D;invalid_client&amp;error_description&#x3D;Invalid client: &#x60;redirect_uri&#x60; does not match client value). &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is not specified, the first URI defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter is used. &lt;br/&gt; &#x3D;&gt; Application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter must be configured to allow the application to use OAuth 2.0 authorization grant. &lt;br/&gt; &lt;br/&gt; If Authorization Code grant is used, this endpoint should use TLS for security reasons, as sensitive data are sent to application&#39;s endpoint through a public network. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.2\&quot;&gt;section 3.1.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $scope The scope of the Rainbow API access requested by the application. &lt;br/&gt; For now, only &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60; is implemented (i.e. application has access to all the Rainbow APIs). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.3\&quot;&gt;section 3.3&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $state A random string that can be provided by the application to maintain state between the authorize request and the redirection to redirect_uri endpoint (state is sent back by Rainbow authentication server to redirect_uri endpoint). &lt;br/&gt; This should be used by the application to prevent against cross-site request forgery (CSRF). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1&lt;/a&gt;. &lt;br/&gt; For more information regarding cross-site request forgery (CSRF) threat, details are available in the       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-10.12\&quot;&gt;section 10.12&lt;/a&gt;. (optional)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthAuthorizeSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function oAuthAuthorizeWithHttpInfo($content_type, $response_type, $client_id, $redirect_uri = null, $scope = null, $state = null)
    {
        $request = $this->oAuthAuthorizeRequest($content_type, $response_type, $client_id, $redirect_uri, $scope, $state);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthAuthorizeSuccess' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthAuthorizeSuccess', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthAuthorizeSuccess';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthAuthorizeSuccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oAuthAuthorizeAsync
     *
     * 1 - OAuth Authorization Request
     *
     * @param  string $content_type application/x-www-form-urlencoded (required)
     * @param  string $response_type Desired grant type to use for authorize endpoint. &lt;br/&gt; To be set to: - &#x60;&#x60;&#x60;code&#x60;&#x60;&#x60; if Authorization Code grant is used, - &#x60;&#x60;&#x60;token&#x60;&#x60;&#x60; if Implicit grant is used.  For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.1\&quot;&gt;section 3.1.1&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $client_id Unique identifier of the application requesting the authorization (also documented as &#x60;&#x60;&#x60;appId&#x60;&#x60;&#x60; in Rainbow APIs documentation). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-2.2\&quot;&gt;section 2.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $redirect_uri Application&#39;s endpoint URI where the user-agent will be redirected with the authorization code (Authorization Code grant) or access token (Implicit grant) if the user grants access to the application. &lt;br/&gt; Errors are redirected to this endpoint as well, for example in the case the user declines access to the application. &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is specified, it must be one of the URIs defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter,       otherwise the user-agent is redirected to the specified redirect_uri with an error and error_description parameters in query string       (error&#x3D;invalid_client&amp;error_description&#x3D;Invalid client: &#x60;redirect_uri&#x60; does not match client value). &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is not specified, the first URI defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter is used. &lt;br/&gt; &#x3D;&gt; Application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter must be configured to allow the application to use OAuth 2.0 authorization grant. &lt;br/&gt; &lt;br/&gt; If Authorization Code grant is used, this endpoint should use TLS for security reasons, as sensitive data are sent to application&#39;s endpoint through a public network. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.2\&quot;&gt;section 3.1.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $scope The scope of the Rainbow API access requested by the application. &lt;br/&gt; For now, only &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60; is implemented (i.e. application has access to all the Rainbow APIs). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.3\&quot;&gt;section 3.3&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $state A random string that can be provided by the application to maintain state between the authorize request and the redirection to redirect_uri endpoint (state is sent back by Rainbow authentication server to redirect_uri endpoint). &lt;br/&gt; This should be used by the application to prevent against cross-site request forgery (CSRF). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1&lt;/a&gt;. &lt;br/&gt; For more information regarding cross-site request forgery (CSRF) threat, details are available in the       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-10.12\&quot;&gt;section 10.12&lt;/a&gt;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oAuthAuthorizeAsync($content_type, $response_type, $client_id, $redirect_uri = null, $scope = null, $state = null)
    {
        return $this->oAuthAuthorizeAsyncWithHttpInfo($content_type, $response_type, $client_id, $redirect_uri, $scope, $state)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oAuthAuthorizeAsyncWithHttpInfo
     *
     * 1 - OAuth Authorization Request
     *
     * @param  string $content_type application/x-www-form-urlencoded (required)
     * @param  string $response_type Desired grant type to use for authorize endpoint. &lt;br/&gt; To be set to: - &#x60;&#x60;&#x60;code&#x60;&#x60;&#x60; if Authorization Code grant is used, - &#x60;&#x60;&#x60;token&#x60;&#x60;&#x60; if Implicit grant is used.  For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.1\&quot;&gt;section 3.1.1&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $client_id Unique identifier of the application requesting the authorization (also documented as &#x60;&#x60;&#x60;appId&#x60;&#x60;&#x60; in Rainbow APIs documentation). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-2.2\&quot;&gt;section 2.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $redirect_uri Application&#39;s endpoint URI where the user-agent will be redirected with the authorization code (Authorization Code grant) or access token (Implicit grant) if the user grants access to the application. &lt;br/&gt; Errors are redirected to this endpoint as well, for example in the case the user declines access to the application. &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is specified, it must be one of the URIs defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter,       otherwise the user-agent is redirected to the specified redirect_uri with an error and error_description parameters in query string       (error&#x3D;invalid_client&amp;error_description&#x3D;Invalid client: &#x60;redirect_uri&#x60; does not match client value). &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is not specified, the first URI defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter is used. &lt;br/&gt; &#x3D;&gt; Application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter must be configured to allow the application to use OAuth 2.0 authorization grant. &lt;br/&gt; &lt;br/&gt; If Authorization Code grant is used, this endpoint should use TLS for security reasons, as sensitive data are sent to application&#39;s endpoint through a public network. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.2\&quot;&gt;section 3.1.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $scope The scope of the Rainbow API access requested by the application. &lt;br/&gt; For now, only &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60; is implemented (i.e. application has access to all the Rainbow APIs). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.3\&quot;&gt;section 3.3&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $state A random string that can be provided by the application to maintain state between the authorize request and the redirection to redirect_uri endpoint (state is sent back by Rainbow authentication server to redirect_uri endpoint). &lt;br/&gt; This should be used by the application to prevent against cross-site request forgery (CSRF). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1&lt;/a&gt;. &lt;br/&gt; For more information regarding cross-site request forgery (CSRF) threat, details are available in the       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-10.12\&quot;&gt;section 10.12&lt;/a&gt;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oAuthAuthorizeAsyncWithHttpInfo($content_type, $response_type, $client_id, $redirect_uri = null, $scope = null, $state = null)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthAuthorizeSuccess';
        $request = $this->oAuthAuthorizeRequest($content_type, $response_type, $client_id, $redirect_uri, $scope, $state);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oAuthAuthorize'
     *
     * @param  string $content_type application/x-www-form-urlencoded (required)
     * @param  string $response_type Desired grant type to use for authorize endpoint. &lt;br/&gt; To be set to: - &#x60;&#x60;&#x60;code&#x60;&#x60;&#x60; if Authorization Code grant is used, - &#x60;&#x60;&#x60;token&#x60;&#x60;&#x60; if Implicit grant is used.  For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.1\&quot;&gt;section 3.1.1&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $client_id Unique identifier of the application requesting the authorization (also documented as &#x60;&#x60;&#x60;appId&#x60;&#x60;&#x60; in Rainbow APIs documentation). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-2.2\&quot;&gt;section 2.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (required)
     * @param  string $redirect_uri Application&#39;s endpoint URI where the user-agent will be redirected with the authorization code (Authorization Code grant) or access token (Implicit grant) if the user grants access to the application. &lt;br/&gt; Errors are redirected to this endpoint as well, for example in the case the user declines access to the application. &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is specified, it must be one of the URIs defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter,       otherwise the user-agent is redirected to the specified redirect_uri with an error and error_description parameters in query string       (error&#x3D;invalid_client&amp;error_description&#x3D;Invalid client: &#x60;redirect_uri&#x60; does not match client value). &lt;br/&gt; &lt;br/&gt; If &#x60;&#x60;&#x60;redirect_uri&#x60;&#x60;&#x60; parameter is not specified, the first URI defined in application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter is used. &lt;br/&gt; &#x3D;&gt; Application&#39;s &#x60;&#x60;&#x60;oauthRedirectUris&#x60;&#x60;&#x60; parameter must be configured to allow the application to use OAuth 2.0 authorization grant. &lt;br/&gt; &lt;br/&gt; If Authorization Code grant is used, this endpoint should use TLS for security reasons, as sensitive data are sent to application&#39;s endpoint through a public network. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.1.2\&quot;&gt;section 3.1.2&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $scope The scope of the Rainbow API access requested by the application. &lt;br/&gt; For now, only &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60; is implemented (i.e. application has access to all the Rainbow APIs). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-3.3\&quot;&gt;section 3.3&lt;/a&gt;       and &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1 (Authorization Code grant)&lt;/a&gt; or       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.2.1\&quot;&gt;section 4.2.1 (Implicit grant)&lt;/a&gt;. (optional)
     * @param  string $state A random string that can be provided by the application to maintain state between the authorize request and the redirection to redirect_uri endpoint (state is sent back by Rainbow authentication server to redirect_uri endpoint). &lt;br/&gt; This should be used by the application to prevent against cross-site request forgery (CSRF). &lt;br/&gt; &lt;br/&gt; For more information, details are available in the OAuth 2.0 RFC, &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.1\&quot;&gt;section 4.1.1&lt;/a&gt;. &lt;br/&gt; For more information regarding cross-site request forgery (CSRF) threat, details are available in the       &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-10.12\&quot;&gt;section 10.12&lt;/a&gt;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function oAuthAuthorizeRequest($content_type, $response_type, $client_id, $redirect_uri = null, $scope = null, $state = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling oAuthAuthorize'
            );
        }
        // verify the required parameter 'response_type' is set
        if ($response_type === null || (is_array($response_type) && count($response_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $response_type when calling oAuthAuthorize'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling oAuthAuthorize'
            );
        }

        $resourcePath = '/api/rainbow/authentication/v1.0/oauth/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($response_type !== null) {
            $queryParams['response_type'] = ObjectSerializer::toQueryValue($response_type);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($redirect_uri !== null) {
            $queryParams['redirect_uri'] = ObjectSerializer::toQueryValue($redirect_uri);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['content-type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/unknown']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/unknown'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oAuthToken
     *
     * 2 - OAuth Access Token Request
     *
     * @param  \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthToken $body body (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthTokenSuccess
     */
    public function oAuthToken($body)
    {
        list($response) = $this->oAuthTokenWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation oAuthTokenWithHttpInfo
     *
     * 2 - OAuth Access Token Request
     *
     * @param  \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthToken $body (required)
     *
     * @throws \Ale\Rainbow\S2S\Client\AuthPortal\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthTokenSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function oAuthTokenWithHttpInfo($body)
    {
        $request = $this->oAuthTokenRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthTokenSuccess' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthTokenSuccess', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthTokenSuccess';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthTokenSuccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oAuthTokenAsync
     *
     * 2 - OAuth Access Token Request
     *
     * @param  \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthToken $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oAuthTokenAsync($body)
    {
        return $this->oAuthTokenAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oAuthTokenAsyncWithHttpInfo
     *
     * 2 - OAuth Access Token Request
     *
     * @param  \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthToken $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oAuthTokenAsyncWithHttpInfo($body)
    {
        $returnType = '\Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthTokenSuccess';
        $request = $this->oAuthTokenRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oAuthToken'
     *
     * @param  \Ale\Rainbow\S2S\Client\AuthPortal\Model\OAuthToken $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function oAuthTokenRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling oAuthToken'
            );
        }

        $resourcePath = '/api/rainbow/authentication/v1.0/oauth/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/unknown']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/unknown'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
