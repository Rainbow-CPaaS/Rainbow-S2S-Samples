<?php
/**
 * GetLoginUrlSuccessData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rainbow authentication portal
 *
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ale\Rainbow\S2S\Client\AuthPortal\Model;

use \ArrayAccess;
use \Ale\Rainbow\S2S\Client\AuthPortal\ObjectSerializer;

/**
 * GetLoginUrlSuccessData Class Doc Comment
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GetLoginUrlSuccessData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetLoginUrlSuccess_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorization_endpoint' => 'string',
        'client_id' => 'string',
        'discovery_url' => 'string',
        'issuer' => 'string',
        'jwks_uri' => 'string',
        'login_url' => 'string',
        'logout_url' => 'string',
        'only_use_implicit_flow' => 'bool',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'authorization_endpoint' => null,
        'client_id' => null,
        'discovery_url' => null,
        'issuer' => null,
        'jwks_uri' => null,
        'login_url' => null,
        'logout_url' => null,
        'only_use_implicit_flow' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_endpoint' => 'authorizationEndpoint',
        'client_id' => 'clientId',
        'discovery_url' => 'discoveryUrl',
        'issuer' => 'issuer',
        'jwks_uri' => 'jwksUri',
        'login_url' => 'loginUrl',
        'logout_url' => 'logoutUrl',
        'only_use_implicit_flow' => 'onlyUseImplicitFlow',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_endpoint' => 'setAuthorizationEndpoint',
        'client_id' => 'setClientId',
        'discovery_url' => 'setDiscoveryUrl',
        'issuer' => 'setIssuer',
        'jwks_uri' => 'setJwksUri',
        'login_url' => 'setLoginUrl',
        'logout_url' => 'setLogoutUrl',
        'only_use_implicit_flow' => 'setOnlyUseImplicitFlow',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_endpoint' => 'getAuthorizationEndpoint',
        'client_id' => 'getClientId',
        'discovery_url' => 'getDiscoveryUrl',
        'issuer' => 'getIssuer',
        'jwks_uri' => 'getJwksUri',
        'login_url' => 'getLoginUrl',
        'logout_url' => 'getLogoutUrl',
        'only_use_implicit_flow' => 'getOnlyUseImplicitFlow',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_RAINBOW = 'RAINBOW';
    const TYPE_SAML = 'SAML';
    const TYPE_OIDC = 'OIDC';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_RAINBOW,
            self::TYPE_SAML,
            self::TYPE_OIDC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorization_endpoint'] = isset($data['authorization_endpoint']) ? $data['authorization_endpoint'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['discovery_url'] = isset($data['discovery_url']) ? $data['discovery_url'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['jwks_uri'] = isset($data['jwks_uri']) ? $data['jwks_uri'] : null;
        $this->container['login_url'] = isset($data['login_url']) ? $data['login_url'] : null;
        $this->container['logout_url'] = isset($data['logout_url']) ? $data['logout_url'] : null;
        $this->container['only_use_implicit_flow'] = isset($data['only_use_implicit_flow']) ? $data['only_use_implicit_flow'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['authorization_endpoint'] === null) {
            $invalidProperties[] = "'authorization_endpoint' can't be null";
        }
        if ((mb_strlen($this->container['authorization_endpoint']) > 255)) {
            $invalidProperties[] = "invalid value for 'authorization_endpoint', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['authorization_endpoint']) < 1)) {
            $invalidProperties[] = "invalid value for 'authorization_endpoint', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ((mb_strlen($this->container['client_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['client_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discovery_url']) && (mb_strlen($this->container['discovery_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'discovery_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['discovery_url']) && (mb_strlen($this->container['discovery_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'discovery_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['issuer'] === null) {
            $invalidProperties[] = "'issuer' can't be null";
        }
        if ((mb_strlen($this->container['issuer']) > 255)) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['issuer']) < 1)) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['jwks_uri']) && (mb_strlen($this->container['jwks_uri']) > 255)) {
            $invalidProperties[] = "invalid value for 'jwks_uri', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['jwks_uri']) && (mb_strlen($this->container['jwks_uri']) < 1)) {
            $invalidProperties[] = "invalid value for 'jwks_uri', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['login_url'] === null) {
            $invalidProperties[] = "'login_url' can't be null";
        }
        if ($this->container['logout_url'] === null) {
            $invalidProperties[] = "'logout_url' can't be null";
        }
        if ($this->container['only_use_implicit_flow'] === null) {
            $invalidProperties[] = "'only_use_implicit_flow' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_endpoint
     *
     * @return string
     */
    public function getAuthorizationEndpoint()
    {
        return $this->container['authorization_endpoint'];
    }

    /**
     * Sets authorization_endpoint
     *
     * @param string $authorization_endpoint OIDC provider's authorization endpoint <br/> Only returned if `type` is `OIDC`.
     *
     * @return $this
     */
    public function setAuthorizationEndpoint($authorization_endpoint)
    {
        if ((mb_strlen($authorization_endpoint) > 255)) {
            throw new \InvalidArgumentException('invalid length for $authorization_endpoint when calling GetLoginUrlSuccessData., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($authorization_endpoint) < 1)) {
            throw new \InvalidArgumentException('invalid length for $authorization_endpoint when calling GetLoginUrlSuccessData., must be bigger than or equal to 1.');
        }

        $this->container['authorization_endpoint'] = $authorization_endpoint;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id used for Rainbow application in OIDC provider <br/> Only returned if `type` is `OIDC`.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        if ((mb_strlen($client_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling GetLoginUrlSuccessData., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($client_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling GetLoginUrlSuccessData., must be bigger than or equal to 1.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets discovery_url
     *
     * @return string|null
     */
    public function getDiscoveryUrl()
    {
        return $this->container['discovery_url'];
    }

    /**
     * Sets discovery_url
     *
     * @param string|null $discovery_url OIDC provider's discoveryUrl <br/> Only returned if `type` is `OIDC`.
     *
     * @return $this
     */
    public function setDiscoveryUrl($discovery_url)
    {
        if (!is_null($discovery_url) && (mb_strlen($discovery_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $discovery_url when calling GetLoginUrlSuccessData., must be smaller than or equal to 255.');
        }
        if (!is_null($discovery_url) && (mb_strlen($discovery_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discovery_url when calling GetLoginUrlSuccessData., must be bigger than or equal to 1.');
        }

        $this->container['discovery_url'] = $discovery_url;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string $issuer OIDC provider's Issuer Identifier <br/> Only returned if `type` is `OIDC`.
     *
     * @return $this
     */
    public function setIssuer($issuer)
    {
        if ((mb_strlen($issuer) > 255)) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling GetLoginUrlSuccessData., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($issuer) < 1)) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling GetLoginUrlSuccessData., must be bigger than or equal to 1.');
        }

        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets jwks_uri
     *
     * @return string|null
     */
    public function getJwksUri()
    {
        return $this->container['jwks_uri'];
    }

    /**
     * Sets jwks_uri
     *
     * @param string|null $jwks_uri OIDC provider's jwks_uri <br/> Only returned if `type` is `OIDC`. <br/> This setting is used to retrieve the OIDC provider's signing key(s) in order to validate the id_token's signature.
     *
     * @return $this
     */
    public function setJwksUri($jwks_uri)
    {
        if (!is_null($jwks_uri) && (mb_strlen($jwks_uri) > 255)) {
            throw new \InvalidArgumentException('invalid length for $jwks_uri when calling GetLoginUrlSuccessData., must be smaller than or equal to 255.');
        }
        if (!is_null($jwks_uri) && (mb_strlen($jwks_uri) < 1)) {
            throw new \InvalidArgumentException('invalid length for $jwks_uri when calling GetLoginUrlSuccessData., must be bigger than or equal to 1.');
        }

        $this->container['jwks_uri'] = $jwks_uri;

        return $this;
    }

    /**
     * Gets login_url
     *
     * @return string
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }

    /**
     * Sets login_url
     *
     * @param string $login_url URL to use to perform a login. <br/> Not returned if authentication type is OIDC with `onlyUseImplicitFlow`=true
     *
     * @return $this
     */
    public function setLoginUrl($login_url)
    {
        $this->container['login_url'] = $login_url;

        return $this;
    }

    /**
     * Gets logout_url
     *
     * @return string
     */
    public function getLogoutUrl()
    {
        return $this->container['logout_url'];
    }

    /**
     * Sets logout_url
     *
     * @param string $logout_url URL to use to perform a logout.
     *
     * @return $this
     */
    public function setLogoutUrl($logout_url)
    {
        $this->container['logout_url'] = $logout_url;

        return $this;
    }

    /**
     * Gets only_use_implicit_flow
     *
     * @return bool
     */
    public function getOnlyUseImplicitFlow()
    {
        return $this->container['only_use_implicit_flow'];
    }

    /**
     * Sets only_use_implicit_flow
     *
     * @param bool $only_use_implicit_flow Indicates if configuration allows to use only OIDC implicit flow. <br/> Only returned if `type` is `OIDC`. <br/> If onlyUseImplicitFlow is set to true, `loginUrl` is not returned. <br/><br/> Implicit flow can be used instead of authorization code grant implemented by Rainbow APIs, but in that case implicit flow has to be implemented by the client. The id_token retrieved by the client using implicit flow can then be used to get a Rainbow token using API GET /api/rainbow/authentication/v1.0/oidc-client/jwt.
     *
     * @return $this
     */
    public function setOnlyUseImplicitFlow($only_use_implicit_flow)
    {
        $this->container['only_use_implicit_flow'] = $only_use_implicit_flow;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Authentication type.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


