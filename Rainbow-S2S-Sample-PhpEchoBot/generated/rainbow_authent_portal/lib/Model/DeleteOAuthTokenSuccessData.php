<?php
/**
 * DeleteOAuthTokenSuccessData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rainbow authentication portal
 *
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ale\Rainbow\S2S\Client\AuthPortal\Model;

use \ArrayAccess;
use \Ale\Rainbow\S2S\Client\AuthPortal\ObjectSerializer;

/**
 * DeleteOAuthTokenSuccessData Class Doc Comment
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeleteOAuthTokenSuccessData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeleteOAuthTokenSuccess_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_token_expires_at' => '\DateTime',
        'access_token_issued_at' => '\DateTime',
        'app_id' => 'string',
        'app_name' => 'string',
        'creation_date' => '\DateTime',
        'id' => 'string',
        'refresh_token_expires_at' => '\DateTime',
        'refresh_token_issued_at' => '\DateTime',
        'scope' => 'string',
        'user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'access_token_expires_at' => 'date-time',
        'access_token_issued_at' => 'date-time',
        'app_id' => null,
        'app_name' => null,
        'creation_date' => 'date-time',
        'id' => null,
        'refresh_token_expires_at' => 'date-time',
        'refresh_token_issued_at' => 'date-time',
        'scope' => null,
        'user_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_token_expires_at' => 'accessTokenExpiresAt',
        'access_token_issued_at' => 'accessTokenIssuedAt',
        'app_id' => 'appId',
        'app_name' => 'appName',
        'creation_date' => 'creationDate',
        'id' => 'id',
        'refresh_token_expires_at' => 'refreshTokenExpiresAt',
        'refresh_token_issued_at' => 'refreshTokenIssuedAt',
        'scope' => 'scope',
        'user_id' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_token_expires_at' => 'setAccessTokenExpiresAt',
        'access_token_issued_at' => 'setAccessTokenIssuedAt',
        'app_id' => 'setAppId',
        'app_name' => 'setAppName',
        'creation_date' => 'setCreationDate',
        'id' => 'setId',
        'refresh_token_expires_at' => 'setRefreshTokenExpiresAt',
        'refresh_token_issued_at' => 'setRefreshTokenIssuedAt',
        'scope' => 'setScope',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_token_expires_at' => 'getAccessTokenExpiresAt',
        'access_token_issued_at' => 'getAccessTokenIssuedAt',
        'app_id' => 'getAppId',
        'app_name' => 'getAppName',
        'creation_date' => 'getCreationDate',
        'id' => 'getId',
        'refresh_token_expires_at' => 'getRefreshTokenExpiresAt',
        'refresh_token_issued_at' => 'getRefreshTokenIssuedAt',
        'scope' => 'getScope',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SCOPE_ALL = '{all}';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_token_expires_at'] = isset($data['access_token_expires_at']) ? $data['access_token_expires_at'] : null;
        $this->container['access_token_issued_at'] = isset($data['access_token_issued_at']) ? $data['access_token_issued_at'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['app_name'] = isset($data['app_name']) ? $data['app_name'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['refresh_token_expires_at'] = isset($data['refresh_token_expires_at']) ? $data['refresh_token_expires_at'] : null;
        $this->container['refresh_token_issued_at'] = isset($data['refresh_token_issued_at']) ? $data['refresh_token_issued_at'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['access_token_expires_at'] === null) {
            $invalidProperties[] = "'access_token_expires_at' can't be null";
        }
        if ($this->container['access_token_issued_at'] === null) {
            $invalidProperties[] = "'access_token_issued_at' can't be null";
        }
        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['app_name'] === null) {
            $invalidProperties[] = "'app_name' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['refresh_token_expires_at'] === null) {
            $invalidProperties[] = "'refresh_token_expires_at' can't be null";
        }
        if ($this->container['refresh_token_issued_at'] === null) {
            $invalidProperties[] = "'refresh_token_issued_at' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_token_expires_at
     *
     * @return \DateTime
     */
    public function getAccessTokenExpiresAt()
    {
        return $this->container['access_token_expires_at'];
    }

    /**
     * Sets access_token_expires_at
     *
     * @param \DateTime $access_token_expires_at Date when the access token expires.
     *
     * @return $this
     */
    public function setAccessTokenExpiresAt($access_token_expires_at)
    {
        $this->container['access_token_expires_at'] = $access_token_expires_at;

        return $this;
    }

    /**
     * Gets access_token_issued_at
     *
     * @return \DateTime
     */
    public function getAccessTokenIssuedAt()
    {
        return $this->container['access_token_issued_at'];
    }

    /**
     * Sets access_token_issued_at
     *
     * @param \DateTime $access_token_issued_at Date of the last access token generation. Access token is requested by the application and has a short expiration time, therefore it can be considered as an indicator of the application activity for the user/application associated to this OAuth token.
     *
     * @return $this
     */
    public function setAccessTokenIssuedAt($access_token_issued_at)
    {
        $this->container['access_token_issued_at'] = $access_token_issued_at;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id Unique identifier of the Application for which the OAuth token has been generated.
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_name
     *
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string $app_name Name of the Application for which the OAuth token has been generated.
     *
     * @return $this
     */
    public function setAppName($app_name)
    {
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Date when the OAuth token has been created. <br/> Corresponds to the first time the user gave his consent so that the application can use Rainbow APIs in his name (delegation).
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id OAuth token unique identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets refresh_token_expires_at
     *
     * @return \DateTime
     */
    public function getRefreshTokenExpiresAt()
    {
        return $this->container['refresh_token_expires_at'];
    }

    /**
     * Sets refresh_token_expires_at
     *
     * @param \DateTime $refresh_token_expires_at Date when the refresh token expires.
     *
     * @return $this
     */
    public function setRefreshTokenExpiresAt($refresh_token_expires_at)
    {
        $this->container['refresh_token_expires_at'] = $refresh_token_expires_at;

        return $this;
    }

    /**
     * Gets refresh_token_issued_at
     *
     * @return \DateTime
     */
    public function getRefreshTokenIssuedAt()
    {
        return $this->container['refresh_token_issued_at'];
    }

    /**
     * Sets refresh_token_issued_at
     *
     * @param \DateTime $refresh_token_issued_at Date of the last refresh token generation.
     *
     * @return $this
     */
    public function setRefreshTokenIssuedAt($refresh_token_issued_at)
    {
        $this->container['refresh_token_issued_at'] = $refresh_token_issued_at;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope Scope granted to the application.
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id Unique identifier of the user for which the OAuth token has been generated.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


