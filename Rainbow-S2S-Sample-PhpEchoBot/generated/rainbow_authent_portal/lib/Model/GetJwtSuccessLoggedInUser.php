<?php
/**
 * GetJwtSuccessLoggedInUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rainbow authentication portal
 *
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ale\Rainbow\S2S\Client\AuthPortal\Model;

use \ArrayAccess;
use \Ale\Rainbow\S2S\Client\AuthPortal\ObjectSerializer;

/**
 * GetJwtSuccessLoggedInUser Class Doc Comment
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GetJwtSuccessLoggedInUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetJwtSuccess_loggedInUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activation_date' => '\DateTime',
        'admin_type' => 'string',
        'company_id' => 'string',
        'company_name' => 'string',
        'country' => 'string',
        'created_by_admin' => '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetBasicLoginSuccessLoggedInUserCreatedByAdmin',
        'created_by_self_register' => 'bool',
        'creation_date' => '\DateTime',
        'display_name' => 'string',
        'emails' => '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessEmails[]',
        'first_login_date' => '\DateTime',
        'first_name' => 'string',
        'guest_mode' => 'bool',
        'id' => 'string',
        'initialization_date' => '\DateTime',
        'invited_by' => '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetBasicLoginSuccessLoggedInUserCreatedByAdmin',
        'is_ad_search_available' => 'bool',
        'is_active' => 'bool',
        'is_in_default_company' => 'bool',
        'is_initialized' => 'bool',
        'is_terminated' => 'bool',
        'jid_im' => 'string',
        'jid_password' => 'string',
        'jid_tel' => 'string',
        'job_title' => 'string',
        'language' => 'string',
        'last_avatar_update_date' => '\DateTime',
        'last_login_date' => '\DateTime',
        'last_name' => 'string',
        'last_update_date' => '\DateTime',
        'logged_since' => '\DateTime',
        'login_email' => 'string',
        'nick_name' => 'string',
        'organisation_id' => 'string',
        'phone_numbers' => '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessPhoneNumbers[]',
        'profiles' => '\Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessProfiles[]',
        'roles' => 'string[]',
        'site_id' => 'string',
        'tags' => 'string[]',
        'time_to_live' => 'float',
        'timezone' => 'string',
        'title' => 'string',
        'user_info1' => 'string',
        'user_info2' => 'string',
        'visibility' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'activation_date' => 'date-time',
        'admin_type' => null,
        'company_id' => null,
        'company_name' => null,
        'country' => null,
        'created_by_admin' => null,
        'created_by_self_register' => null,
        'creation_date' => 'date-time',
        'display_name' => null,
        'emails' => null,
        'first_login_date' => 'date-time',
        'first_name' => null,
        'guest_mode' => null,
        'id' => null,
        'initialization_date' => 'date-time',
        'invited_by' => null,
        'is_ad_search_available' => null,
        'is_active' => null,
        'is_in_default_company' => null,
        'is_initialized' => null,
        'is_terminated' => null,
        'jid_im' => null,
        'jid_password' => null,
        'jid_tel' => null,
        'job_title' => null,
        'language' => null,
        'last_avatar_update_date' => 'date-time',
        'last_login_date' => 'date-time',
        'last_name' => null,
        'last_update_date' => 'date-time',
        'logged_since' => 'date-time',
        'login_email' => null,
        'nick_name' => null,
        'organisation_id' => null,
        'phone_numbers' => null,
        'profiles' => null,
        'roles' => null,
        'site_id' => null,
        'tags' => null,
        'time_to_live' => null,
        'timezone' => null,
        'title' => null,
        'user_info1' => null,
        'user_info2' => null,
        'visibility' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activation_date' => 'activationDate',
        'admin_type' => 'adminType',
        'company_id' => 'companyId',
        'company_name' => 'companyName',
        'country' => 'country',
        'created_by_admin' => 'createdByAdmin',
        'created_by_self_register' => 'createdBySelfRegister',
        'creation_date' => 'creationDate',
        'display_name' => 'displayName',
        'emails' => 'emails',
        'first_login_date' => 'firstLoginDate',
        'first_name' => 'firstName',
        'guest_mode' => 'guestMode',
        'id' => 'id',
        'initialization_date' => 'initializationDate',
        'invited_by' => 'invitedBy',
        'is_ad_search_available' => 'isADSearchAvailable',
        'is_active' => 'isActive',
        'is_in_default_company' => 'isInDefaultCompany',
        'is_initialized' => 'isInitialized',
        'is_terminated' => 'isTerminated',
        'jid_im' => 'jid_im',
        'jid_password' => 'jid_password',
        'jid_tel' => 'jid_tel',
        'job_title' => 'jobTitle',
        'language' => 'language',
        'last_avatar_update_date' => 'lastAvatarUpdateDate',
        'last_login_date' => 'lastLoginDate',
        'last_name' => 'lastName',
        'last_update_date' => 'lastUpdateDate',
        'logged_since' => 'loggedSince',
        'login_email' => 'loginEmail',
        'nick_name' => 'nickName',
        'organisation_id' => 'organisationId',
        'phone_numbers' => 'phoneNumbers',
        'profiles' => 'profiles',
        'roles' => 'roles',
        'site_id' => 'siteId',
        'tags' => 'tags',
        'time_to_live' => 'timeToLive',
        'timezone' => 'timezone',
        'title' => 'title',
        'user_info1' => 'userInfo1',
        'user_info2' => 'userInfo2',
        'visibility' => 'visibility'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activation_date' => 'setActivationDate',
        'admin_type' => 'setAdminType',
        'company_id' => 'setCompanyId',
        'company_name' => 'setCompanyName',
        'country' => 'setCountry',
        'created_by_admin' => 'setCreatedByAdmin',
        'created_by_self_register' => 'setCreatedBySelfRegister',
        'creation_date' => 'setCreationDate',
        'display_name' => 'setDisplayName',
        'emails' => 'setEmails',
        'first_login_date' => 'setFirstLoginDate',
        'first_name' => 'setFirstName',
        'guest_mode' => 'setGuestMode',
        'id' => 'setId',
        'initialization_date' => 'setInitializationDate',
        'invited_by' => 'setInvitedBy',
        'is_ad_search_available' => 'setIsAdSearchAvailable',
        'is_active' => 'setIsActive',
        'is_in_default_company' => 'setIsInDefaultCompany',
        'is_initialized' => 'setIsInitialized',
        'is_terminated' => 'setIsTerminated',
        'jid_im' => 'setJidIm',
        'jid_password' => 'setJidPassword',
        'jid_tel' => 'setJidTel',
        'job_title' => 'setJobTitle',
        'language' => 'setLanguage',
        'last_avatar_update_date' => 'setLastAvatarUpdateDate',
        'last_login_date' => 'setLastLoginDate',
        'last_name' => 'setLastName',
        'last_update_date' => 'setLastUpdateDate',
        'logged_since' => 'setLoggedSince',
        'login_email' => 'setLoginEmail',
        'nick_name' => 'setNickName',
        'organisation_id' => 'setOrganisationId',
        'phone_numbers' => 'setPhoneNumbers',
        'profiles' => 'setProfiles',
        'roles' => 'setRoles',
        'site_id' => 'setSiteId',
        'tags' => 'setTags',
        'time_to_live' => 'setTimeToLive',
        'timezone' => 'setTimezone',
        'title' => 'setTitle',
        'user_info1' => 'setUserInfo1',
        'user_info2' => 'setUserInfo2',
        'visibility' => 'setVisibility'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activation_date' => 'getActivationDate',
        'admin_type' => 'getAdminType',
        'company_id' => 'getCompanyId',
        'company_name' => 'getCompanyName',
        'country' => 'getCountry',
        'created_by_admin' => 'getCreatedByAdmin',
        'created_by_self_register' => 'getCreatedBySelfRegister',
        'creation_date' => 'getCreationDate',
        'display_name' => 'getDisplayName',
        'emails' => 'getEmails',
        'first_login_date' => 'getFirstLoginDate',
        'first_name' => 'getFirstName',
        'guest_mode' => 'getGuestMode',
        'id' => 'getId',
        'initialization_date' => 'getInitializationDate',
        'invited_by' => 'getInvitedBy',
        'is_ad_search_available' => 'getIsAdSearchAvailable',
        'is_active' => 'getIsActive',
        'is_in_default_company' => 'getIsInDefaultCompany',
        'is_initialized' => 'getIsInitialized',
        'is_terminated' => 'getIsTerminated',
        'jid_im' => 'getJidIm',
        'jid_password' => 'getJidPassword',
        'jid_tel' => 'getJidTel',
        'job_title' => 'getJobTitle',
        'language' => 'getLanguage',
        'last_avatar_update_date' => 'getLastAvatarUpdateDate',
        'last_login_date' => 'getLastLoginDate',
        'last_name' => 'getLastName',
        'last_update_date' => 'getLastUpdateDate',
        'logged_since' => 'getLoggedSince',
        'login_email' => 'getLoginEmail',
        'nick_name' => 'getNickName',
        'organisation_id' => 'getOrganisationId',
        'phone_numbers' => 'getPhoneNumbers',
        'profiles' => 'getProfiles',
        'roles' => 'getRoles',
        'site_id' => 'getSiteId',
        'tags' => 'getTags',
        'time_to_live' => 'getTimeToLive',
        'timezone' => 'getTimezone',
        'title' => 'getTitle',
        'user_info1' => 'getUserInfo1',
        'user_info2' => 'getUserInfo2',
        'visibility' => 'getVisibility'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VISIBILITY_SAME_THAN_COMPANY = 'same_than_company';
    const VISIBILITY__PUBLIC = 'public';
    const VISIBILITY__PRIVATE = 'private';
    const VISIBILITY_CLOSED = 'closed';
    const VISIBILITY_ISOLATED = 'isolated';
    const VISIBILITY_NONE = 'none';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityAllowableValues()
    {
        return [
            self::VISIBILITY_SAME_THAN_COMPANY,
            self::VISIBILITY__PUBLIC,
            self::VISIBILITY__PRIVATE,
            self::VISIBILITY_CLOSED,
            self::VISIBILITY_ISOLATED,
            self::VISIBILITY_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['admin_type'] = isset($data['admin_type']) ? $data['admin_type'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['created_by_admin'] = isset($data['created_by_admin']) ? $data['created_by_admin'] : null;
        $this->container['created_by_self_register'] = isset($data['created_by_self_register']) ? $data['created_by_self_register'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['first_login_date'] = isset($data['first_login_date']) ? $data['first_login_date'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['guest_mode'] = isset($data['guest_mode']) ? $data['guest_mode'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['initialization_date'] = isset($data['initialization_date']) ? $data['initialization_date'] : null;
        $this->container['invited_by'] = isset($data['invited_by']) ? $data['invited_by'] : null;
        $this->container['is_ad_search_available'] = isset($data['is_ad_search_available']) ? $data['is_ad_search_available'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_in_default_company'] = isset($data['is_in_default_company']) ? $data['is_in_default_company'] : null;
        $this->container['is_initialized'] = isset($data['is_initialized']) ? $data['is_initialized'] : null;
        $this->container['is_terminated'] = isset($data['is_terminated']) ? $data['is_terminated'] : null;
        $this->container['jid_im'] = isset($data['jid_im']) ? $data['jid_im'] : null;
        $this->container['jid_password'] = isset($data['jid_password']) ? $data['jid_password'] : null;
        $this->container['jid_tel'] = isset($data['jid_tel']) ? $data['jid_tel'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['last_avatar_update_date'] = isset($data['last_avatar_update_date']) ? $data['last_avatar_update_date'] : null;
        $this->container['last_login_date'] = isset($data['last_login_date']) ? $data['last_login_date'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['last_update_date'] = isset($data['last_update_date']) ? $data['last_update_date'] : null;
        $this->container['logged_since'] = isset($data['logged_since']) ? $data['logged_since'] : null;
        $this->container['login_email'] = isset($data['login_email']) ? $data['login_email'] : null;
        $this->container['nick_name'] = isset($data['nick_name']) ? $data['nick_name'] : null;
        $this->container['organisation_id'] = isset($data['organisation_id']) ? $data['organisation_id'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
        $this->container['profiles'] = isset($data['profiles']) ? $data['profiles'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['time_to_live'] = isset($data['time_to_live']) ? $data['time_to_live'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['user_info1'] = isset($data['user_info1']) ? $data['user_info1'] : null;
        $this->container['user_info2'] = isset($data['user_info2']) ? $data['user_info2'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['activation_date'] === null) {
            $invalidProperties[] = "'activation_date' can't be null";
        }
        if ($this->container['admin_type'] === null) {
            $invalidProperties[] = "'admin_type' can't be null";
        }
        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['created_by_self_register'] === null) {
            $invalidProperties[] = "'created_by_self_register' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['emails'] === null) {
            $invalidProperties[] = "'emails' can't be null";
        }
        if ($this->container['first_login_date'] === null) {
            $invalidProperties[] = "'first_login_date' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['guest_mode'] === null) {
            $invalidProperties[] = "'guest_mode' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['initialization_date'] === null) {
            $invalidProperties[] = "'initialization_date' can't be null";
        }
        if ($this->container['is_ad_search_available'] === null) {
            $invalidProperties[] = "'is_ad_search_available' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['is_in_default_company'] === null) {
            $invalidProperties[] = "'is_in_default_company' can't be null";
        }
        if ($this->container['is_initialized'] === null) {
            $invalidProperties[] = "'is_initialized' can't be null";
        }
        if ($this->container['is_terminated'] === null) {
            $invalidProperties[] = "'is_terminated' can't be null";
        }
        if ($this->container['jid_im'] === null) {
            $invalidProperties[] = "'jid_im' can't be null";
        }
        if ($this->container['jid_password'] === null) {
            $invalidProperties[] = "'jid_password' can't be null";
        }
        if ($this->container['jid_tel'] === null) {
            $invalidProperties[] = "'jid_tel' can't be null";
        }
        if ($this->container['last_avatar_update_date'] === null) {
            $invalidProperties[] = "'last_avatar_update_date' can't be null";
        }
        if ($this->container['last_login_date'] === null) {
            $invalidProperties[] = "'last_login_date' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['last_update_date'] === null) {
            $invalidProperties[] = "'last_update_date' can't be null";
        }
        if ($this->container['logged_since'] === null) {
            $invalidProperties[] = "'logged_since' can't be null";
        }
        if ($this->container['login_email'] === null) {
            $invalidProperties[] = "'login_email' can't be null";
        }
        if ($this->container['organisation_id'] === null) {
            $invalidProperties[] = "'organisation_id' can't be null";
        }
        if ($this->container['phone_numbers'] === null) {
            $invalidProperties[] = "'phone_numbers' can't be null";
        }
        if ($this->container['profiles'] === null) {
            $invalidProperties[] = "'profiles' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        if ($this->container['site_id'] === null) {
            $invalidProperties[] = "'site_id' can't be null";
        }
        if ($this->container['visibility'] === null) {
            $invalidProperties[] = "'visibility' can't be null";
        }
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!is_null($this->container['visibility']) && !in_array($this->container['visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'visibility', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activation_date
     *
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param \DateTime $activation_date User activation date
     *
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets admin_type
     *
     * @return string
     */
    public function getAdminType()
    {
        return $this->container['admin_type'];
    }

    /**
     * Sets admin_type
     *
     * @param string $admin_type In case of user's is 'admin', define the subtype (organisation_admin, company_admin, site_admin (default undefined)
     *
     * @return $this
     */
    public function setAdminType($admin_type)
    {
        $this->container['admin_type'] = $admin_type;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string $company_id User company unique identifier
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name User company name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country User country (ISO 3166-1 alpha3 format)
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets created_by_admin
     *
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetBasicLoginSuccessLoggedInUserCreatedByAdmin|null
     */
    public function getCreatedByAdmin()
    {
        return $this->container['created_by_admin'];
    }

    /**
     * Sets created_by_admin
     *
     * @param \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetBasicLoginSuccessLoggedInUserCreatedByAdmin|null $created_by_admin created_by_admin
     *
     * @return $this
     */
    public function setCreatedByAdmin($created_by_admin)
    {
        $this->container['created_by_admin'] = $created_by_admin;

        return $this;
    }

    /**
     * Gets created_by_self_register
     *
     * @return bool
     */
    public function getCreatedBySelfRegister()
    {
        return $this->container['created_by_self_register'];
    }

    /**
     * Sets created_by_self_register
     *
     * @param bool $created_by_self_register true if user has been created using self register
     *
     * @return $this
     */
    public function setCreatedBySelfRegister($created_by_self_register)
    {
        $this->container['created_by_self_register'] = $created_by_self_register;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date User creation date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name User display name (firstName + lastName concatenated on server side)
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessEmails[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessEmails[] $emails Array of user emails addresses objects
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets first_login_date
     *
     * @return \DateTime
     */
    public function getFirstLoginDate()
    {
        return $this->container['first_login_date'];
    }

    /**
     * Sets first_login_date
     *
     * @param \DateTime $first_login_date Date of first user login (only set the first time user logs in, null if user never logged in)
     *
     * @return $this
     */
    public function setFirstLoginDate($first_login_date)
    {
        $this->container['first_login_date'] = $first_login_date;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name User first name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets guest_mode
     *
     * @return bool
     */
    public function getGuestMode()
    {
        return $this->container['guest_mode'];
    }

    /**
     * Sets guest_mode
     *
     * @param bool $guest_mode Indicated a user embedded in a chat or conference room, as guest, with limited rights until he finalizes his registration.
     *
     * @return $this
     */
    public function setGuestMode($guest_mode)
    {
        $this->container['guest_mode'] = $guest_mode;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id User unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initialization_date
     *
     * @return \DateTime
     */
    public function getInitializationDate()
    {
        return $this->container['initialization_date'];
    }

    /**
     * Sets initialization_date
     *
     * @param \DateTime $initialization_date User initialization date
     *
     * @return $this
     */
    public function setInitializationDate($initialization_date)
    {
        $this->container['initialization_date'] = $initialization_date;

        return $this;
    }

    /**
     * Gets invited_by
     *
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetBasicLoginSuccessLoggedInUserCreatedByAdmin|null
     */
    public function getInvitedBy()
    {
        return $this->container['invited_by'];
    }

    /**
     * Sets invited_by
     *
     * @param \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetBasicLoginSuccessLoggedInUserCreatedByAdmin|null $invited_by invited_by
     *
     * @return $this
     */
    public function setInvitedBy($invited_by)
    {
        $this->container['invited_by'] = $invited_by;

        return $this;
    }

    /**
     * Gets is_ad_search_available
     *
     * @return bool
     */
    public function getIsAdSearchAvailable()
    {
        return $this->container['is_ad_search_available'];
    }

    /**
     * Sets is_ad_search_available
     *
     * @param bool $is_ad_search_available Is ActiveDirectory (Office365) search available for this user
     *
     * @return $this
     */
    public function setIsAdSearchAvailable($is_ad_search_available)
    {
        $this->container['is_ad_search_available'] = $is_ad_search_available;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Is user active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_in_default_company
     *
     * @return bool
     */
    public function getIsInDefaultCompany()
    {
        return $this->container['is_in_default_company'];
    }

    /**
     * Sets is_in_default_company
     *
     * @param bool $is_in_default_company Is user in default company
     *
     * @return $this
     */
    public function setIsInDefaultCompany($is_in_default_company)
    {
        $this->container['is_in_default_company'] = $is_in_default_company;

        return $this;
    }

    /**
     * Gets is_initialized
     *
     * @return bool
     */
    public function getIsInitialized()
    {
        return $this->container['is_initialized'];
    }

    /**
     * Sets is_initialized
     *
     * @param bool $is_initialized Is user initialized
     *
     * @return $this
     */
    public function setIsInitialized($is_initialized)
    {
        $this->container['is_initialized'] = $is_initialized;

        return $this;
    }

    /**
     * Gets is_terminated
     *
     * @return bool
     */
    public function getIsTerminated()
    {
        return $this->container['is_terminated'];
    }

    /**
     * Sets is_terminated
     *
     * @param bool $is_terminated Indicates if the Rainbow account of this user has been deleted
     *
     * @return $this
     */
    public function setIsTerminated($is_terminated)
    {
        $this->container['is_terminated'] = $is_terminated;

        return $this;
    }

    /**
     * Gets jid_im
     *
     * @return string
     */
    public function getJidIm()
    {
        return $this->container['jid_im'];
    }

    /**
     * Sets jid_im
     *
     * @param string $jid_im User Jabber IM identifier
     *
     * @return $this
     */
    public function setJidIm($jid_im)
    {
        $this->container['jid_im'] = $jid_im;

        return $this;
    }

    /**
     * Gets jid_password
     *
     * @return string
     */
    public function getJidPassword()
    {
        return $this->container['jid_password'];
    }

    /**
     * Sets jid_password
     *
     * @param string $jid_password User Jabber TEL identifier
     *
     * @return $this
     */
    public function setJidPassword($jid_password)
    {
        $this->container['jid_password'] = $jid_password;

        return $this;
    }

    /**
     * Gets jid_tel
     *
     * @return string
     */
    public function getJidTel()
    {
        return $this->container['jid_tel'];
    }

    /**
     * Sets jid_tel
     *
     * @param string $jid_tel User Jabber TEL identifier
     *
     * @return $this
     */
    public function setJidTel($jid_tel)
    {
        $this->container['jid_tel'] = $jid_tel;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title User job title
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language User language (ISO 639-1 code format, with possibility of regional variation. Ex: both 'en' and 'en-US' are supported)
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_avatar_update_date
     *
     * @return \DateTime
     */
    public function getLastAvatarUpdateDate()
    {
        return $this->container['last_avatar_update_date'];
    }

    /**
     * Sets last_avatar_update_date
     *
     * @param \DateTime $last_avatar_update_date Date of last user avatar create/update, null if no avatar
     *
     * @return $this
     */
    public function setLastAvatarUpdateDate($last_avatar_update_date)
    {
        $this->container['last_avatar_update_date'] = $last_avatar_update_date;

        return $this;
    }

    /**
     * Gets last_login_date
     *
     * @return \DateTime
     */
    public function getLastLoginDate()
    {
        return $this->container['last_login_date'];
    }

    /**
     * Sets last_login_date
     *
     * @param \DateTime $last_login_date Date of last user login (defined even if user is logged out)
     *
     * @return $this
     */
    public function setLastLoginDate($last_login_date)
    {
        $this->container['last_login_date'] = $last_login_date;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name User last name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets last_update_date
     *
     * @return \DateTime
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     *
     * @param \DateTime $last_update_date Date of last user update (whatever the field updated)
     *
     * @return $this
     */
    public function setLastUpdateDate($last_update_date)
    {
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets logged_since
     *
     * @return \DateTime
     */
    public function getLoggedSince()
    {
        return $this->container['logged_since'];
    }

    /**
     * Sets logged_since
     *
     * @param \DateTime $logged_since Date of last user login (null if user is logged out)
     *
     * @return $this
     */
    public function setLoggedSince($logged_since)
    {
        $this->container['logged_since'] = $logged_since;

        return $this;
    }

    /**
     * Gets login_email
     *
     * @return string
     */
    public function getLoginEmail()
    {
        return $this->container['login_email'];
    }

    /**
     * Sets login_email
     *
     * @param string $login_email User email address (used for login)
     *
     * @return $this
     */
    public function setLoginEmail($login_email)
    {
        $this->container['login_email'] = $login_email;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name User nickName
     *
     * @return $this
     */
    public function setNickName($nick_name)
    {
        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return string
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param string $organisation_id In addition to User companyId, optional identifier to indicate the user belongs also to an organization
     *
     * @return $this
     */
    public function setOrganisationId($organisation_id)
    {
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessPhoneNumbers[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessPhoneNumbers[] $phone_numbers Array of user phone numbers objects. <br/> Phone number objects can: <ul>     <li> be created by user (information filled by user),</li>     <li> come from association with a system (pbx) device (association is done by admin).</li> </ul>
     *
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets profiles
     *
     * @return \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessProfiles[]
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param \Ale\Rainbow\S2S\Client\AuthPortal\Model\GetJwtSuccessProfiles[] $profiles User profile Objects.
     *
     * @return $this
     */
    public function setProfiles($profiles)
    {
        $this->container['profiles'] = $profiles;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles List of user roles (Array of String)
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return string
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param string $site_id In addition to User companyId, optional identifier to indicate the user belongs also to a site
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags An Array of free tags associated to the user. <br/> A maximum of 5 tags is allowed, each tag can have a maximum length of 64 characters. <br/> `tags` can only be set by users who have administrator rights on the user. The user can't modify the tags. <br/> The tags are visible by the user and all users belonging to his organisation/company, and can be used with the search API to search the user based on his tags.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets time_to_live
     *
     * @return float|null
     */
    public function getTimeToLive()
    {
        return $this->container['time_to_live'];
    }

    /**
     * Sets time_to_live
     *
     * @param float|null $time_to_live Duration in second to wait before automatically starting a user deletion from the creation date. <br/> Once the timeToLive has been reached, the user won't be usable to use APIs anymore (error 401523). His account may then be deleted from the database at any moment. <br/> Value -1 means timeToLive is disable (i.e. user account will not expire).
     *
     * @return $this
     */
    public function setTimeToLive($time_to_live)
    {
        $this->container['time_to_live'] = $time_to_live;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone User timezone name
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title User title (honorifics title, like Mr, Mrs, Sir, Lord, Lady, Dr, Prof,...)
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_info1
     *
     * @return string|null
     */
    public function getUserInfo1()
    {
        return $this->container['user_info1'];
    }

    /**
     * Sets user_info1
     *
     * @param string|null $user_info1 Free field that admin can use to link their users to their IS/IT tools / to perform analytics (this field is output in the CDR file)
     *
     * @return $this
     */
    public function setUserInfo1($user_info1)
    {
        $this->container['user_info1'] = $user_info1;

        return $this;
    }

    /**
     * Gets user_info2
     *
     * @return string|null
     */
    public function getUserInfo2()
    {
        return $this->container['user_info2'];
    }

    /**
     * Sets user_info2
     *
     * @param string|null $user_info2 2nd Free field that admin can use to link their users to their IS/IT tools / to perform analytics (this field is output in the CDR file)
     *
     * @return $this
     */
    public function setUserInfo2($user_info2)
    {
        $this->container['user_info2'] = $user_info2;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string $visibility User visibility </br> Define if the user can be searched by users being in other companies and if the user can search users being in other companies. <br/> Visibility can be: - `same_than_company`: The same visibility than the user's company's is applied to the user. When this user visibility is used, if the visibility of the company is changed the user's visibility will use this company new visibility. - `public`: User can be searched by external users / can search external users. User can invite external users / can be invited by external users - `private`: User **can't** be searched by external users / can search external users. User can invite external users / can be invited by external users - `closed`: User **can't** be searched by external users / **can't** search external users. User can invite external users / can be invited by external users - `isolated`: User **can't** be searched by external users / **can't** search external users. User **can't** invite external users / **can't** be invited by external users - `none`:  Default value reserved for guest. User **can't** be searched by **any users** (even within the same company) / can search external users. User can invite external users / can be invited by external users  External users mean public user not being in user's company nor user's organisation nor a company visible by user's company.
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $allowedValues = $this->getVisibilityAllowableValues();
        if (!in_array($visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visibility', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


