<?php
/**
 * GetRenewSuccessLoggedInUserTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ale\Rainbow\S2S\Client\AuthPortal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rainbow authentication portal
 *
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Ale\Rainbow\S2S\Client\AuthPortal;

use PHPUnit\Framework\TestCase;

/**
 * GetRenewSuccessLoggedInUserTest Class Doc Comment
 *
 * @category    Class
 * @description GetRenewSuccessLoggedInUser
 * @package     Ale\Rainbow\S2S\Client\AuthPortal
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class GetRenewSuccessLoggedInUserTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "GetRenewSuccessLoggedInUser"
     */
    public function testGetRenewSuccessLoggedInUser()
    {
    }

    /**
     * Test attribute "activation_date"
     */
    public function testPropertyActivationDate()
    {
    }

    /**
     * Test attribute "admin_type"
     */
    public function testPropertyAdminType()
    {
    }

    /**
     * Test attribute "company_id"
     */
    public function testPropertyCompanyId()
    {
    }

    /**
     * Test attribute "company_name"
     */
    public function testPropertyCompanyName()
    {
    }

    /**
     * Test attribute "country"
     */
    public function testPropertyCountry()
    {
    }

    /**
     * Test attribute "created_by_admin"
     */
    public function testPropertyCreatedByAdmin()
    {
    }

    /**
     * Test attribute "created_by_self_register"
     */
    public function testPropertyCreatedBySelfRegister()
    {
    }

    /**
     * Test attribute "creation_date"
     */
    public function testPropertyCreationDate()
    {
    }

    /**
     * Test attribute "display_name"
     */
    public function testPropertyDisplayName()
    {
    }

    /**
     * Test attribute "emails"
     */
    public function testPropertyEmails()
    {
    }

    /**
     * Test attribute "first_login_date"
     */
    public function testPropertyFirstLoginDate()
    {
    }

    /**
     * Test attribute "first_name"
     */
    public function testPropertyFirstName()
    {
    }

    /**
     * Test attribute "guest_mode"
     */
    public function testPropertyGuestMode()
    {
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
    }

    /**
     * Test attribute "initialization_date"
     */
    public function testPropertyInitializationDate()
    {
    }

    /**
     * Test attribute "invited_by"
     */
    public function testPropertyInvitedBy()
    {
    }

    /**
     * Test attribute "is_ad_search_available"
     */
    public function testPropertyIsAdSearchAvailable()
    {
    }

    /**
     * Test attribute "is_active"
     */
    public function testPropertyIsActive()
    {
    }

    /**
     * Test attribute "is_in_default_company"
     */
    public function testPropertyIsInDefaultCompany()
    {
    }

    /**
     * Test attribute "is_initialized"
     */
    public function testPropertyIsInitialized()
    {
    }

    /**
     * Test attribute "is_terminated"
     */
    public function testPropertyIsTerminated()
    {
    }

    /**
     * Test attribute "jid_im"
     */
    public function testPropertyJidIm()
    {
    }

    /**
     * Test attribute "jid_password"
     */
    public function testPropertyJidPassword()
    {
    }

    /**
     * Test attribute "jid_tel"
     */
    public function testPropertyJidTel()
    {
    }

    /**
     * Test attribute "job_title"
     */
    public function testPropertyJobTitle()
    {
    }

    /**
     * Test attribute "language"
     */
    public function testPropertyLanguage()
    {
    }

    /**
     * Test attribute "last_avatar_update_date"
     */
    public function testPropertyLastAvatarUpdateDate()
    {
    }

    /**
     * Test attribute "last_login_date"
     */
    public function testPropertyLastLoginDate()
    {
    }

    /**
     * Test attribute "last_name"
     */
    public function testPropertyLastName()
    {
    }

    /**
     * Test attribute "last_update_date"
     */
    public function testPropertyLastUpdateDate()
    {
    }

    /**
     * Test attribute "logged_since"
     */
    public function testPropertyLoggedSince()
    {
    }

    /**
     * Test attribute "login_email"
     */
    public function testPropertyLoginEmail()
    {
    }

    /**
     * Test attribute "nick_name"
     */
    public function testPropertyNickName()
    {
    }

    /**
     * Test attribute "organisation_id"
     */
    public function testPropertyOrganisationId()
    {
    }

    /**
     * Test attribute "phone_numbers"
     */
    public function testPropertyPhoneNumbers()
    {
    }

    /**
     * Test attribute "profiles"
     */
    public function testPropertyProfiles()
    {
    }

    /**
     * Test attribute "roles"
     */
    public function testPropertyRoles()
    {
    }

    /**
     * Test attribute "site_id"
     */
    public function testPropertySiteId()
    {
    }

    /**
     * Test attribute "tags"
     */
    public function testPropertyTags()
    {
    }

    /**
     * Test attribute "time_to_live"
     */
    public function testPropertyTimeToLive()
    {
    }

    /**
     * Test attribute "timezone"
     */
    public function testPropertyTimezone()
    {
    }

    /**
     * Test attribute "title"
     */
    public function testPropertyTitle()
    {
    }

    /**
     * Test attribute "user_info1"
     */
    public function testPropertyUserInfo1()
    {
    }

    /**
     * Test attribute "user_info2"
     */
    public function testPropertyUserInfo2()
    {
    }

    /**
     * Test attribute "visibility"
     */
    public function testPropertyVisibility()
    {
    }
}
