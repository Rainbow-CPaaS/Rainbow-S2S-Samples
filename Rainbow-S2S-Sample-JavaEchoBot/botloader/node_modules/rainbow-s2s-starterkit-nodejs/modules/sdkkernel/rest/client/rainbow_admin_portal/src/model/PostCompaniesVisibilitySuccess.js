/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetCompaniesIdSuccessBpContractAcceptationInfo', 'model/GetCompaniesIdSuccessCustomData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./GetCompaniesIdSuccessBpContractAcceptationInfo'), require('./GetCompaniesIdSuccessCustomData'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.PostCompaniesVisibilitySuccess = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.GetCompaniesIdSuccessBpContractAcceptationInfo, root.RainbowAdminPortal.GetCompaniesIdSuccessCustomData);
  }
}(this, function(ApiClient, GetCompaniesIdSuccessBpContractAcceptationInfo, GetCompaniesIdSuccessCustomData) {
  'use strict';



  /**
   * The PostCompaniesVisibilitySuccess model module.
   * @module model/PostCompaniesVisibilitySuccess
   * @version 1.82.0
   */

  /**
   * Constructs a new <code>PostCompaniesVisibilitySuccess</code>.
   * @alias module:model/PostCompaniesVisibilitySuccess
   * @class
   * @param id {String} Company unique identifier
   * @param creationDate {Date} Company creation date (Read only)
   * @param statusUpdatedDate {Date} Date of last company status update (Read only)
   * @param lastAvatarUpdateDate {Date} Date of last company avatar update (Read only)
   * @param name {String} Company name
   * @param status {module:model/PostCompaniesVisibilitySuccess.StatusEnum} Company status
   * @param visibility {module:model/PostCompaniesVisibilitySuccess.VisibilityEnum} Company visibility (define if users being in this company can be searched by users being in other company)
   * @param visibleBy {Array.<String>} If visibility is private, list of companyIds for which visibility is allowed
   * @param userSelfRegisterEnabled {Boolean} Allow users with email domain matching 'userSelfRegisterAllowedDomains' to join the company by self-register process
   * @param userSelfRegisterAllowedDomains {Array.<String>} Allow users with email domain matching one of the values of this array to join the company by self-register process (if userSelfRegisterEnabled is true)
   * @param size {module:model/PostCompaniesVisibilitySuccess.SizeEnum}  An overview of the number of employees
   * @param organisationId {String} Optional identifier to indicate the company belongs to an organisation
   * @param catalogId {String} Id of the catalog of Rainbow offers to which the company is linked. The catalog corresponds to the list of offers the company can subscribe.
   * @param bpId {String} Optional identifier which links the company to the corresponding Business partner company
   * @param isBP {Boolean} Indicates if the company is a Business partner company
   * @param offerType {module:model/PostCompaniesVisibilitySuccess.OfferTypeEnum} Allowed company offer types
   */
  var exports = function(id, creationDate, statusUpdatedDate, lastAvatarUpdateDate, name, status, visibility, visibleBy, userSelfRegisterEnabled, userSelfRegisterAllowedDomains, size, organisationId, catalogId, bpId, isBP, offerType) {
    var _this = this;

    _this['id'] = id;
    _this['creationDate'] = creationDate;
    _this['statusUpdatedDate'] = statusUpdatedDate;
    _this['lastAvatarUpdateDate'] = lastAvatarUpdateDate;
    _this['name'] = name;
    _this['status'] = status;
    _this['visibility'] = visibility;
    _this['visibleBy'] = visibleBy;
    _this['userSelfRegisterEnabled'] = userSelfRegisterEnabled;
    _this['userSelfRegisterAllowedDomains'] = userSelfRegisterAllowedDomains;
    _this['size'] = size;
    _this['organisationId'] = organisationId;
    _this['catalogId'] = catalogId;
    _this['bpId'] = bpId;
    _this['isBP'] = isBP;
    _this['offerType'] = offerType;
  };

  /**
   * Constructs a <code>PostCompaniesVisibilitySuccess</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PostCompaniesVisibilitySuccess} obj Optional instance to populate.
   * @return {module:model/PostCompaniesVisibilitySuccess} The populated <code>PostCompaniesVisibilitySuccess</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('creationDate')) {
        obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
      }
      if (data.hasOwnProperty('statusUpdatedDate')) {
        obj['statusUpdatedDate'] = ApiClient.convertToType(data['statusUpdatedDate'], 'Date');
      }
      if (data.hasOwnProperty('lastAvatarUpdateDate')) {
        obj['lastAvatarUpdateDate'] = ApiClient.convertToType(data['lastAvatarUpdateDate'], 'Date');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('street')) {
        obj['street'] = ApiClient.convertToType(data['street'], 'String');
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('postalCode')) {
        obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('visibility')) {
        obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
      }
      if (data.hasOwnProperty('visibleBy')) {
        obj['visibleBy'] = ApiClient.convertToType(data['visibleBy'], ['String']);
      }
      if (data.hasOwnProperty('adminEmail')) {
        obj['adminEmail'] = ApiClient.convertToType(data['adminEmail'], 'String');
      }
      if (data.hasOwnProperty('supportEmail')) {
        obj['supportEmail'] = ApiClient.convertToType(data['supportEmail'], 'String');
      }
      if (data.hasOwnProperty('companyContactId')) {
        obj['companyContactId'] = ApiClient.convertToType(data['companyContactId'], 'String');
      }
      if (data.hasOwnProperty('userSelfRegisterEnabled')) {
        obj['userSelfRegisterEnabled'] = ApiClient.convertToType(data['userSelfRegisterEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('userSelfRegisterAllowedDomains')) {
        obj['userSelfRegisterAllowedDomains'] = ApiClient.convertToType(data['userSelfRegisterAllowedDomains'], ['String']);
      }
      if (data.hasOwnProperty('slogan')) {
        obj['slogan'] = ApiClient.convertToType(data['slogan'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'String');
      }
      if (data.hasOwnProperty('economicActivityClassification')) {
        obj['economicActivityClassification'] = ApiClient.convertToType(data['economicActivityClassification'], 'String');
      }
      if (data.hasOwnProperty('giphyEnabled')) {
        obj['giphyEnabled'] = ApiClient.convertToType(data['giphyEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('website')) {
        obj['website'] = ApiClient.convertToType(data['website'], 'String');
      }
      if (data.hasOwnProperty('organisationId')) {
        obj['organisationId'] = ApiClient.convertToType(data['organisationId'], 'String');
      }
      if (data.hasOwnProperty('catalogId')) {
        obj['catalogId'] = ApiClient.convertToType(data['catalogId'], 'String');
      }
      if (data.hasOwnProperty('bpId')) {
        obj['bpId'] = ApiClient.convertToType(data['bpId'], 'String');
      }
      if (data.hasOwnProperty('adminHasRightToUpdateSubscriptions')) {
        obj['adminHasRightToUpdateSubscriptions'] = ApiClient.convertToType(data['adminHasRightToUpdateSubscriptions'], 'Boolean');
      }
      if (data.hasOwnProperty('adminAllowedUpdateSubscriptionsOps')) {
        obj['adminAllowedUpdateSubscriptionsOps'] = ApiClient.convertToType(data['adminAllowedUpdateSubscriptionsOps'], 'String');
      }
      if (data.hasOwnProperty('isBP')) {
        obj['isBP'] = ApiClient.convertToType(data['isBP'], 'Boolean');
      }
      if (data.hasOwnProperty('bpType')) {
        obj['bpType'] = ApiClient.convertToType(data['bpType'], 'String');
      }
      if (data.hasOwnProperty('bpBusinessModel')) {
        obj['bpBusinessModel'] = ApiClient.convertToType(data['bpBusinessModel'], 'String');
      }
      if (data.hasOwnProperty('bpApplicantNumber')) {
        obj['bpApplicantNumber'] = ApiClient.convertToType(data['bpApplicantNumber'], 'String');
      }
      if (data.hasOwnProperty('bpCRDid')) {
        obj['bpCRDid'] = ApiClient.convertToType(data['bpCRDid'], 'String');
      }
      if (data.hasOwnProperty('bpHasRightToSell')) {
        obj['bpHasRightToSell'] = ApiClient.convertToType(data['bpHasRightToSell'], 'Boolean');
      }
      if (data.hasOwnProperty('bpHasRightToConnect')) {
        obj['bpHasRightToConnect'] = ApiClient.convertToType(data['bpHasRightToConnect'], 'Boolean');
      }
      if (data.hasOwnProperty('bpIsContractAccepted')) {
        obj['bpIsContractAccepted'] = ApiClient.convertToType(data['bpIsContractAccepted'], 'Boolean');
      }
      if (data.hasOwnProperty('bpContractAcceptationInfo')) {
        obj['bpContractAcceptationInfo'] = GetCompaniesIdSuccessBpContractAcceptationInfo.constructFromObject(data['bpContractAcceptationInfo']);
      }
      if (data.hasOwnProperty('offerType')) {
        obj['offerType'] = ApiClient.convertToType(data['offerType'], 'String');
      }
      if (data.hasOwnProperty('businessSpecific')) {
        obj['businessSpecific'] = ApiClient.convertToType(data['businessSpecific'], 'String');
      }
      if (data.hasOwnProperty('externalReference')) {
        obj['externalReference'] = ApiClient.convertToType(data['externalReference'], 'String');
      }
      if (data.hasOwnProperty('externalReference2')) {
        obj['externalReference2'] = ApiClient.convertToType(data['externalReference2'], 'String');
      }
      if (data.hasOwnProperty('avatarShape')) {
        obj['avatarShape'] = ApiClient.convertToType(data['avatarShape'], 'String');
      }
      if (data.hasOwnProperty('customData')) {
        obj['customData'] = GetCompaniesIdSuccessCustomData.constructFromObject(data['customData']);
      }
    }
    return obj;
  }

  /**
   * Company unique identifier
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Company creation date (Read only)
   * @member {Date} creationDate
   */
  exports.prototype['creationDate'] = undefined;
  /**
   * Date of last company status update (Read only)
   * @member {Date} statusUpdatedDate
   */
  exports.prototype['statusUpdatedDate'] = undefined;
  /**
   * Date of last company avatar update (Read only)
   * @member {Date} lastAvatarUpdateDate
   */
  exports.prototype['lastAvatarUpdateDate'] = undefined;
  /**
   * Company name
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Company country (ISO 3166-1 alpha3 format)
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Company street
   * @member {String} street
   */
  exports.prototype['street'] = undefined;
  /**
   * Company city
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * When country is 'USA' or 'CAN', a state should be defined. Else it is not managed.
   * @member {module:model/PostCompaniesVisibilitySuccess.StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * Company postal code
   * @member {String} postalCode
   */
  exports.prototype['postalCode'] = undefined;
  /**
   * Company currency, for payment of premium offers (ISO 4217 format)    For now, only USD and EUR are supported
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * Company status
   * @member {module:model/PostCompaniesVisibilitySuccess.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * Company visibility (define if users being in this company can be searched by users being in other company)
   * @member {module:model/PostCompaniesVisibilitySuccess.VisibilityEnum} visibility
   */
  exports.prototype['visibility'] = undefined;
  /**
   * If visibility is private, list of companyIds for which visibility is allowed
   * @member {Array.<String>} visibleBy
   */
  exports.prototype['visibleBy'] = undefined;
  /**
   * Company contact person email
   * @member {String} adminEmail
   */
  exports.prototype['adminEmail'] = undefined;
  /**
   * Company support email
   * @member {String} supportEmail
   */
  exports.prototype['supportEmail'] = undefined;
  /**
   * User Id of a Rainbow user which is the contact for this company
   * @member {String} companyContactId
   */
  exports.prototype['companyContactId'] = undefined;
  /**
   * Allow users with email domain matching 'userSelfRegisterAllowedDomains' to join the company by self-register process
   * @member {Boolean} userSelfRegisterEnabled
   */
  exports.prototype['userSelfRegisterEnabled'] = undefined;
  /**
   * Allow users with email domain matching one of the values of this array to join the company by self-register process (if userSelfRegisterEnabled is true)
   * @member {Array.<String>} userSelfRegisterAllowedDomains
   */
  exports.prototype['userSelfRegisterAllowedDomains'] = undefined;
  /**
   * A free string corresponding to the slogan of the company (255 char length)
   * @member {String} slogan
   */
  exports.prototype['slogan'] = undefined;
  /**
   * A free string that describes the company (2000 char length)
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   *  An overview of the number of employees
   * @member {module:model/PostCompaniesVisibilitySuccess.SizeEnum} size
   */
  exports.prototype['size'] = undefined;
  /**
   * * `A`: AGRICULTURE, FORESTRY AND FISHING * `B`: MINING AND QUARRYING * `C`: MANUFACTURING * `D`: ELECTRICITY, GAS, STEAM AND AIR CONDITIONING SUPPLY * `E`: WATER SUPPLY; SEWERAGE, WASTE MANAGEMENT AND REMEDIATION ACTIVITIES * `F`: CONSTRUCTION * `G`: WHOLESALE AND RETAIL TRADE; REPAIR OF MOTOR VEHICLES AND MOTORCYCLES * `H`: TRANSPORTATION AND STORAGE * `I`: ACCOMMODATION AND FOOD SERVICE ACTIVITIES * `J`: INFORMATION AND COMMUNICATION * `K`: FINANCIAL AND INSURANCE ACTIVITIES * `L`: REAL ESTATE ACTIVITIES * `M`: PROFESSIONAL, SCIENTIFIC AND TECHNICAL ACTIVITIES * `N`: ADMINISTRATIVE AND SUPPORT SERVICE ACTIVITIES * `O`: PUBLIC ADMINISTRATION AND DEFENCE; COMPULSORY SOCIAL SECURITY * `P`: EDUCATION * `Q`: HUMAN HEALTH AND SOCIAL WORK ACTIVITIES * `R`: ARTS, ENTERTAINMENT AND RECREATION * `S`: OTHER SERVICE ACTIVITIES * `T`: ACTIVITIES OF HOUSEHOLDS AS EMPLOYERS; UNDIFFERENTIATED GOODS- AND SERVICES-PRODUCING ACTIVITIES OF HOUSEHOLDS FOR OWN USE * `U`: ACTIVITIES OF EXTRATERRITORIAL ORGANISATIONS AND BODIES 
   * @member {module:model/PostCompaniesVisibilitySuccess.EconomicActivityClassificationEnum} economicActivityClassification
   */
  exports.prototype['economicActivityClassification'] = undefined;
  /**
   * Whether or not giphy feature is enabled for users belonging to this company (possibility to use animated gifs in conversations)
   * @member {Boolean} giphyEnabled
   */
  exports.prototype['giphyEnabled'] = undefined;
  /**
   * Company website URL
   * @member {String} website
   */
  exports.prototype['website'] = undefined;
  /**
   * Optional identifier to indicate the company belongs to an organisation
   * @member {String} organisationId
   */
  exports.prototype['organisationId'] = undefined;
  /**
   * Id of the catalog of Rainbow offers to which the company is linked. The catalog corresponds to the list of offers the company can subscribe.
   * @member {String} catalogId
   */
  exports.prototype['catalogId'] = undefined;
  /**
   * Optional identifier which links the company to the corresponding Business partner company
   * @member {String} bpId
   */
  exports.prototype['bpId'] = undefined;
  /**
   * In the case the company is linked to a Business Partner company, indicates if the `bp_admin` allows the `company_admin` to update the subscriptions of his company (if enable, allowed operations depend of the value of `adminAllowedUpdateSubscriptionsOps`).    Can only be set by `superadmin` or `bp_admin`/`bp_finance` of the related company.
   * @member {Boolean} adminHasRightToUpdateSubscriptions
   */
  exports.prototype['adminHasRightToUpdateSubscriptions'] = undefined;
  /**
   * In the case the company is linked to a Business Partner company and `adminHasRightToUpdateSubscriptions` is enabled, indicates the update operations for which the `bp_admin` allows the `company_admin` to perform on the subscriptions of his company.    Can only be set by `superadmin` or `bp_admin`/`bp_finance` of the related company.    Possible values:   * `all`: company_admin is allowed to perform all update operations on the subscriptions of his company * `increase_only`: company_admin is only allowed to increase `maxNumberUsers` on the subscriptions of his company (decrease is forbidden)  
   * @member {module:model/PostCompaniesVisibilitySuccess.AdminAllowedUpdateSubscriptionsOpsEnum} adminAllowedUpdateSubscriptionsOps
   */
  exports.prototype['adminAllowedUpdateSubscriptionsOps'] = undefined;
  /**
   * Indicates if the company is a Business partner company
   * @member {Boolean} isBP
   * @default false
   */
  exports.prototype['isBP'] = false;
  /**
   * Indicates BP Company type   * `IR`: Indirect Reseller, * `VAD`: Value Added Distributor, * `DR`: Direct Reseller.  
   * @member {module:model/PostCompaniesVisibilitySuccess.BpTypeEnum} bpType
   */
  exports.prototype['bpType'] = undefined;
  /**
   * Indicates BP business model
   * @member {String} bpBusinessModel
   */
  exports.prototype['bpBusinessModel'] = undefined;
  /**
   * Reference of the Business Partner in ALE Finance tools (SAP)
   * @member {String} bpApplicantNumber
   */
  exports.prototype['bpApplicantNumber'] = undefined;
  /**
   * Reference of the Business Partner in CDR
   * @member {String} bpCRDid
   */
  exports.prototype['bpCRDid'] = undefined;
  /**
   * Indicates if the Business has the right to sell
   * @member {Boolean} bpHasRightToSell
   */
  exports.prototype['bpHasRightToSell'] = undefined;
  /**
   * When True, the BP can connect CPE equipment of managed companies. So when False, the \"equipment\" tab should be removed from the admin GUI
   * @member {Boolean} bpHasRightToConnect
   */
  exports.prototype['bpHasRightToConnect'] = undefined;
  /**
   * Indicates if the Business has accepted the contract and can sell Rainbow offers
   * @member {Boolean} bpIsContractAccepted
   */
  exports.prototype['bpIsContractAccepted'] = undefined;
  /**
   * @member {module:model/GetCompaniesIdSuccessBpContractAcceptationInfo} bpContractAcceptationInfo
   */
  exports.prototype['bpContractAcceptationInfo'] = undefined;
  /**
   * Allowed company offer types
   * @member {module:model/PostCompaniesVisibilitySuccess.OfferTypeEnum} offerType
   */
  exports.prototype['offerType'] = undefined;
  /**
   * When the customer has subscribed to specific business offers, this field is set to the associated specific business (ex: HDS for HealthCare business specific)
   * @member {module:model/PostCompaniesVisibilitySuccess.BusinessSpecificEnum} businessSpecific
   */
  exports.prototype['businessSpecific'] = undefined;
  /**
   * Free field that BP can use to link their customers to their IS/IT tools    Only applicable by `superadmin` or by `bp_admin`/`bp_finance` on one of his customer companies.
   * @member {String} externalReference
   */
  exports.prototype['externalReference'] = undefined;
  /**
   * Free field that BP can use to link their customers to their IS/IT tools    Only applicable by `superadmin` or by `bp_admin`/`bp_finance` on one of his customer companies.
   * @member {String} externalReference2
   */
  exports.prototype['externalReference2'] = undefined;
  /**
   * Company's avatar customization
   * @member {module:model/PostCompaniesVisibilitySuccess.AvatarShapeEnum} avatarShape
   */
  exports.prototype['avatarShape'] = undefined;
  /**
   * @member {module:model/GetCompaniesIdSuccessCustomData} customData
   */
  exports.prototype['customData'] = undefined;


  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "AK"
     * @const
     */
    "AK": "AK",
    /**
     * value: "AL"
     * @const
     */
    "AL": "AL",
    /**
     * value: "...."
     * @const
     */
    "....": "....",
    /**
     * value: "NY"
     * @const
     */
    "NY": "NY",
    /**
     * value: "WY"
     * @const
     */
    "WY": "WY"  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "initializing"
     * @const
     */
    "initializing": "initializing",
    /**
     * value: "active"
     * @const
     */
    "active": "active",
    /**
     * value: "alerting"
     * @const
     */
    "alerting": "alerting",
    /**
     * value: "hold"
     * @const
     */
    "hold": "hold",
    /**
     * value: "terminated"
     * @const
     */
    "terminated": "terminated"  };

  /**
   * Allowed values for the <code>visibility</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VisibilityEnum = {
    /**
     * value: "public"
     * @const
     */
    "public": "public",
    /**
     * value: "private"
     * @const
     */
    "private": "private",
    /**
     * value: "organisation"
     * @const
     */
    "organisation": "organisation"  };

  /**
   * Allowed values for the <code>size</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SizeEnum = {
    /**
     * value: "self-employed"
     * @const
     */
    "self-employed": "self-employed",
    /**
     * value: "1-10 employees"
     * @const
     */
    "1-10 employees": "1-10 employees",
    /**
     * value: "11-50 employees"
     * @const
     */
    "11-50 employees": "11-50 employees",
    /**
     * value: "51-200 employees"
     * @const
     */
    "51-200 employees": "51-200 employees",
    /**
     * value: "201-500 employees"
     * @const
     */
    "201-500 employees": "201-500 employees",
    /**
     * value: "501-1000 employees"
     * @const
     */
    "501-1000 employees": "501-1000 employees",
    /**
     * value: "1001-5000 employees"
     * @const
     */
    "1001-5000 employees": "1001-5000 employees",
    /**
     * value: "5001-10,000 employees"
     * @const
     */
    "5001-10,000 employees": "5001-10,000 employees",
    /**
     * value: "10,001+ employees"
     * @const
     */
    "10,001+ employees": "10,001+ employees"  };

  /**
   * Allowed values for the <code>economicActivityClassification</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EconomicActivityClassificationEnum = {
    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",
    /**
     * value: "A"
     * @const
     */
    "A": "A",
    /**
     * value: "B"
     * @const
     */
    "B": "B",
    /**
     * value: "C"
     * @const
     */
    "C": "C",
    /**
     * value: "D"
     * @const
     */
    "D": "D",
    /**
     * value: "E"
     * @const
     */
    "E": "E",
    /**
     * value: "F"
     * @const
     */
    "F": "F",
    /**
     * value: "G"
     * @const
     */
    "G": "G",
    /**
     * value: "H"
     * @const
     */
    "H": "H",
    /**
     * value: "I"
     * @const
     */
    "I": "I",
    /**
     * value: "J"
     * @const
     */
    "J": "J",
    /**
     * value: "K"
     * @const
     */
    "K": "K",
    /**
     * value: "L"
     * @const
     */
    "L": "L",
    /**
     * value: "M"
     * @const
     */
    "M": "M",
    /**
     * value: "N"
     * @const
     */
    "N": "N",
    /**
     * value: "O"
     * @const
     */
    "O": "O",
    /**
     * value: "P"
     * @const
     */
    "P": "P",
    /**
     * value: "Q"
     * @const
     */
    "Q": "Q",
    /**
     * value: "R"
     * @const
     */
    "R": "R",
    /**
     * value: "S"
     * @const
     */
    "S": "S",
    /**
     * value: "T"
     * @const
     */
    "T": "T",
    /**
     * value: "U"
     * @const
     */
    "U": "U"  };

  /**
   * Allowed values for the <code>adminAllowedUpdateSubscriptionsOps</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AdminAllowedUpdateSubscriptionsOpsEnum = {
    /**
     * value: "all"
     * @const
     */
    "all": "all",
    /**
     * value: "increase_only"
     * @const
     */
    "increase_only": "increase_only"  };

  /**
   * Allowed values for the <code>bpType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.BpTypeEnum = {
    /**
     * value: "IR"
     * @const
     */
    "IR": "IR",
    /**
     * value: "VAD"
     * @const
     */
    "VAD": "VAD",
    /**
     * value: "DR"
     * @const
     */
    "DR": "DR"  };

  /**
   * Allowed values for the <code>offerType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OfferTypeEnum = {
    /**
     * value: "freemium"
     * @const
     */
    "freemium": "freemium",
    /**
     * value: "premium"
     * @const
     */
    "premium": "premium"  };

  /**
   * Allowed values for the <code>businessSpecific</code> property.
   * @enum {String}
   * @readonly
   */
  exports.BusinessSpecificEnum = {
    /**
     * value: "HDS"
     * @const
     */
    "HDS": "HDS"  };

  /**
   * Allowed values for the <code>avatarShape</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AvatarShapeEnum = {
    /**
     * value: "square"
     * @const
     */
    "square": "square",
    /**
     * value: "circle"
     * @const
     */
    "circle": "circle"  };


  return exports;
}));


