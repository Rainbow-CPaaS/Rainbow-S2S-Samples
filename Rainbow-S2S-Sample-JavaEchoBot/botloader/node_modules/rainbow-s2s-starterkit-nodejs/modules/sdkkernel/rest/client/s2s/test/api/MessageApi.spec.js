/**
 * S2S api
 * # Rainbow S2S API guide  ## Preamble  ### Introduction  This guide describes a list of API services that are provided by the OT Rainbow S2S portal. This portal is dedicated to S2S features, providing a full REST API for Rainbow features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP verbs GET, DELETE, POST, PUT, etc. are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according to the stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, e.g. “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * OpenAPI spec version: 1.103.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S2SApi);
  }
}(this, function(expect, S2SApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S2SApi.MessageApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessageApi', function() {
    describe('s2SPhxWebMessageControllerCreate', function() {
      it('should call s2SPhxWebMessageControllerCreate successfully', function(done) {
        //uncomment below and update the code to test s2SPhxWebMessageControllerCreate
        //instance.s2SPhxWebMessageControllerCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('s2SPhxWebMessageControllerDeleteAll', function() {
      it('should call s2SPhxWebMessageControllerDeleteAll successfully', function(done) {
        //uncomment below and update the code to test s2SPhxWebMessageControllerDeleteAll
        //instance.s2SPhxWebMessageControllerDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('s2SPhxWebMessageControllerIndex', function() {
      it('should call s2SPhxWebMessageControllerIndex successfully', function(done) {
        //uncomment below and update the code to test s2SPhxWebMessageControllerIndex
        //instance.s2SPhxWebMessageControllerIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('s2SPhxWebMessageControllerReadReceipt', function() {
      it('should call s2SPhxWebMessageControllerReadReceipt successfully', function(done) {
        //uncomment below and update the code to test s2SPhxWebMessageControllerReadReceipt
        //instance.s2SPhxWebMessageControllerReadReceipt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('s2SPhxWebMessageControllerReceivedReceipt', function() {
      it('should call s2SPhxWebMessageControllerReceivedReceipt successfully', function(done) {
        //uncomment below and update the code to test s2SPhxWebMessageControllerReceivedReceipt
        //instance.s2SPhxWebMessageControllerReceivedReceipt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
