/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteCompaniesVisibilitySuccess', 'model/DeletePendingCompanyVisibilityReqByIdSuccess', 'model/GetPendingCompanyVisibilityReqByIdSuccess', 'model/GetPendingCompanyVisibilityReqSuccess', 'model/PostAcceptCompanyVisibilityReqSuccess', 'model/PostCompaniesVisibilitySuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteCompaniesVisibilitySuccess'), require('../model/DeletePendingCompanyVisibilityReqByIdSuccess'), require('../model/GetPendingCompanyVisibilityReqByIdSuccess'), require('../model/GetPendingCompanyVisibilityReqSuccess'), require('../model/PostAcceptCompanyVisibilityReqSuccess'), require('../model/PostCompaniesVisibilitySuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.CompaniesVisibilityApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.DeleteCompaniesVisibilitySuccess, root.RainbowAdminPortal.DeletePendingCompanyVisibilityReqByIdSuccess, root.RainbowAdminPortal.GetPendingCompanyVisibilityReqByIdSuccess, root.RainbowAdminPortal.GetPendingCompanyVisibilityReqSuccess, root.RainbowAdminPortal.PostAcceptCompanyVisibilityReqSuccess, root.RainbowAdminPortal.PostCompaniesVisibilitySuccess);
  }
}(this, function(ApiClient, DeleteCompaniesVisibilitySuccess, DeletePendingCompanyVisibilityReqByIdSuccess, GetPendingCompanyVisibilityReqByIdSuccess, GetPendingCompanyVisibilityReqSuccess, PostAcceptCompanyVisibilityReqSuccess, PostCompaniesVisibilitySuccess) {
  'use strict';

  /**
   * CompaniesVisibility service.
   * @module api/CompaniesVisibilityApi
   * @version 1.82.0
   */

  /**
   * Constructs a new CompaniesVisibilityApi. 
   * @alias module:api/CompaniesVisibilityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Remove visibility to a given company
     * This API can be used by `superadmin`, `organization_admin`, `bp_admin` and `bp_finance` users to delete visibility between company A and company B (uni-directionally):    DELETE https://openrainbow.com/api/rainbow/admin/v1.0/companies/{company_id_A}/visible-by/{company_id_B}       `bp_admin` and `bp_finance` users can only remove visibility from a company they manage with a company they manage (i.e. management of End Customers companies for which bp_admin/bp_finance's company if the BP company).       `organization_admin` users can only remove visibility from a company they manage with a company they manage (i.e. management of the visibility between companies of his organization).       Using this API, the visibility is removed **uni-directionally**. This means that if company A and company B could see each other, if DELETE /api/rainbow/admin/v1.0/companies/{company_id_B}/visible-by/{company_id_A} is called, company B will no longer be able to see company A, but company A will still be able to see company B.
     * @param {String} otherCompanyId Company unique identifier to which the visibility will be given (like 56d6f00441255dd54b5b61ae)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteCompaniesVisibilitySuccess} and HTTP response
     */
    this.deleteCompaniesVisibilityWithHttpInfo = function(otherCompanyId, companyId, accept) {
      var postBody = null;
      // verify the required parameter 'otherCompanyId' is set
      if (otherCompanyId === undefined || otherCompanyId === null) {
        throw new Error("Missing the required parameter 'otherCompanyId' when calling deleteCompaniesVisibility");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteCompaniesVisibility");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteCompaniesVisibility");
      }

      var pathParams = {
        'otherCompanyId': otherCompanyId,
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteCompaniesVisibilitySuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/visible-by/{otherCompanyId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove visibility to a given company
     * This API can be used by `superadmin`, `organization_admin`, `bp_admin` and `bp_finance` users to delete visibility between company A and company B (uni-directionally):    DELETE https://openrainbow.com/api/rainbow/admin/v1.0/companies/{company_id_A}/visible-by/{company_id_B}       `bp_admin` and `bp_finance` users can only remove visibility from a company they manage with a company they manage (i.e. management of End Customers companies for which bp_admin/bp_finance's company if the BP company).       `organization_admin` users can only remove visibility from a company they manage with a company they manage (i.e. management of the visibility between companies of his organization).       Using this API, the visibility is removed **uni-directionally**. This means that if company A and company B could see each other, if DELETE /api/rainbow/admin/v1.0/companies/{company_id_B}/visible-by/{company_id_A} is called, company B will no longer be able to see company A, but company A will still be able to see company B.
     * @param {String} otherCompanyId Company unique identifier to which the visibility will be given (like 56d6f00441255dd54b5b61ae)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteCompaniesVisibilitySuccess}
     */
    this.deleteCompaniesVisibility = function(otherCompanyId, companyId, accept) {
      return this.deleteCompaniesVisibilityWithHttpInfo(otherCompanyId, companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a pending visibility request
     * This API can be used by company `admin` users to delete a given visibility request he has received from admin of another companies (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} visibilityRequestId VisibilityRequest unique identifier (ex: 5762bd90650506b1a7229f63). Correspond to the id sent in the url query parameters of the email received by the company administrator using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeletePendingCompanyVisibilityReqByIdSuccess} and HTTP response
     */
    this.deletePendingCompanyVisibilityReqByIdWithHttpInfo = function(visibilityRequestId, companyId, accept) {
      var postBody = null;
      // verify the required parameter 'visibilityRequestId' is set
      if (visibilityRequestId === undefined || visibilityRequestId === null) {
        throw new Error("Missing the required parameter 'visibilityRequestId' when calling deletePendingCompanyVisibilityReqById");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deletePendingCompanyVisibilityReqById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deletePendingCompanyVisibilityReqById");
      }

      var pathParams = {
        'visibilityRequestId': visibilityRequestId,
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeletePendingCompanyVisibilityReqByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/visibility/requests/{visibilityRequestId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a pending visibility request
     * This API can be used by company `admin` users to delete a given visibility request he has received from admin of another companies (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} visibilityRequestId VisibilityRequest unique identifier (ex: 5762bd90650506b1a7229f63). Correspond to the id sent in the url query parameters of the email received by the company administrator using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeletePendingCompanyVisibilityReqByIdSuccess}
     */
    this.deletePendingCompanyVisibilityReqById = function(visibilityRequestId, companyId, accept) {
      return this.deletePendingCompanyVisibilityReqByIdWithHttpInfo(visibilityRequestId, companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get pending visibility requests
     * This API can be used by company `admin` users to list visibility request he has received from admin of another companies (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPendingCompanyVisibilityReqSuccess} and HTTP response
     */
    this.getPendingCompanyVisibilityReqWithHttpInfo = function(companyId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getPendingCompanyVisibilityReq");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getPendingCompanyVisibilityReq");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetPendingCompanyVisibilityReqSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/visibility/requests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get pending visibility requests
     * This API can be used by company `admin` users to list visibility request he has received from admin of another companies (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPendingCompanyVisibilityReqSuccess}
     */
    this.getPendingCompanyVisibilityReq = function(companyId, accept) {
      return this.getPendingCompanyVisibilityReqWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a pending visibility request
     * This API can be used by company `admin` users to retrieve a given visibility request he has received from admin of another companies (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} visibilityRequestId VisibilityRequest unique identifier (ex: 5762bd90650506b1a7229f63). Correspond to the id sent in the url query parameters of the email received by the company administrator using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPendingCompanyVisibilityReqByIdSuccess} and HTTP response
     */
    this.getPendingCompanyVisibilityReqByIdWithHttpInfo = function(visibilityRequestId, companyId, accept) {
      var postBody = null;
      // verify the required parameter 'visibilityRequestId' is set
      if (visibilityRequestId === undefined || visibilityRequestId === null) {
        throw new Error("Missing the required parameter 'visibilityRequestId' when calling getPendingCompanyVisibilityReqById");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getPendingCompanyVisibilityReqById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getPendingCompanyVisibilityReqById");
      }

      var pathParams = {
        'visibilityRequestId': visibilityRequestId,
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetPendingCompanyVisibilityReqByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/visibility/requests/{visibilityRequestId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a pending visibility request
     * This API can be used by company `admin` users to retrieve a given visibility request he has received from admin of another companies (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} visibilityRequestId VisibilityRequest unique identifier (ex: 5762bd90650506b1a7229f63). Correspond to the id sent in the url query parameters of the email received by the company administrator using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPendingCompanyVisibilityReqByIdSuccess}
     */
    this.getPendingCompanyVisibilityReqById = function(visibilityRequestId, companyId, accept) {
      return this.getPendingCompanyVisibilityReqByIdWithHttpInfo(visibilityRequestId, companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accept a visibility request
     * This API can be used by company `admin` users to accept a visibility request sent by the admin of another company (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).       Using this API, the visibility is given **bi-directionally**.       Visibility means that:   * `users` and `admins` from one of these companies will be able to see the other company using [GET /api/rainbow/enduser/v1.0/companies][1] and [GET /api/rainbow/enduser/v1.0/companies/{companyId}][2] * `users` and `admins` from one of these companies will be able to see users of the other company using [GET /api/rainbow/enduser/v1.0/users][3], [GET /api/rainbow/enduser/v1.0/users/{userId}][4] and [GET /api/rainbow/enduser/v1.0/search][5] and [POST /api/rainbow/enduser/v1.0/search][6]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility [1]: /enduser/#api-companies-enduser_GetCompanies [2]: /enduser/#api-companies-enduser_GetCompaniesId [3]: /enduser/#api-users-enduser_GetUsers [4]: /enduser/#api-users-enduser_GetUsersId [5]: /enduser/#api-search-enduser_Search_by_GET [6]: /enduser/#api-search-enduser_Search_by_POST
     * @param {String} visibilityRequestId VisibilityRequest unique identifier (ex: 5762bd90650506b1a7229f63). Correspond to the id sent in the url query parameters of the email received by the company administrator using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostAcceptCompanyVisibilityReqSuccess} and HTTP response
     */
    this.postAcceptCompanyVisibilityReqWithHttpInfo = function(visibilityRequestId, companyId) {
      var postBody = null;
      // verify the required parameter 'visibilityRequestId' is set
      if (visibilityRequestId === undefined || visibilityRequestId === null) {
        throw new Error("Missing the required parameter 'visibilityRequestId' when calling postAcceptCompanyVisibilityReq");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling postAcceptCompanyVisibilityReq");
      }

      var pathParams = {
        'visibilityRequestId': visibilityRequestId,
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PostAcceptCompanyVisibilityReqSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/visibility/requests/{visibilityRequestId}/accept', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept a visibility request
     * This API can be used by company `admin` users to accept a visibility request sent by the admin of another company (sent using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]).       Using this API, the visibility is given **bi-directionally**.       Visibility means that:   * `users` and `admins` from one of these companies will be able to see the other company using [GET /api/rainbow/enduser/v1.0/companies][1] and [GET /api/rainbow/enduser/v1.0/companies/{companyId}][2] * `users` and `admins` from one of these companies will be able to see users of the other company using [GET /api/rainbow/enduser/v1.0/users][3], [GET /api/rainbow/enduser/v1.0/users/{userId}][4] and [GET /api/rainbow/enduser/v1.0/search][5] and [POST /api/rainbow/enduser/v1.0/search][6]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility [1]: /enduser/#api-companies-enduser_GetCompanies [2]: /enduser/#api-companies-enduser_GetCompaniesId [3]: /enduser/#api-users-enduser_GetUsers [4]: /enduser/#api-users-enduser_GetUsersId [5]: /enduser/#api-search-enduser_Search_by_GET [6]: /enduser/#api-search-enduser_Search_by_POST
     * @param {String} visibilityRequestId VisibilityRequest unique identifier (ex: 5762bd90650506b1a7229f63). Correspond to the id sent in the url query parameters of the email received by the company administrator using API [POST /api/rainbow/admin/v1.0/notifications/emails/request-company-visibility][0]  [0]: #api-admin_notifications_emails-admin_RequestCompanyVisibility
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostAcceptCompanyVisibilityReqSuccess}
     */
    this.postAcceptCompanyVisibilityReq = function(visibilityRequestId, companyId) {
      return this.postAcceptCompanyVisibilityReqWithHttpInfo(visibilityRequestId, companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add visibility to a given company
     * This API can be used by `superadmin`, `organization_admin`, `bp_admin` and `bp_finance` users to make company A visible by company B:    POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/{company_id_A}/visible-by/{company_id_B}       `bp_admin` and `bp_finance` users can only add visibility from a company they manage to a company they manage (i.e. management of End Customers companies for which bp_admin/bp_finance's company if the BP company).       `organization_admin` users can only add visibility from a company they manage to a company they manage (i.e. management of the visibility between companies of his organization).       Using this API, the visibility is given **uni-directionally**. This means that if POST /api/rainbow/admin/v1.0/companies/{company_id_B}/visible-by/{company_id_A} is not called, company B will be able to see company A but company B won't be able to see company A.       Visibility means that:   * `users` and `admins` from company B will be able to see company A using [GET /api/rainbow/enduser/v1.0/companies][0] and [GET /api/rainbow/enduser/v1.0/companies/{companyId}][1] * `users` and `admins` from company B will be able to see users of company A using [GET /api/rainbow/enduser/v1.0/users][2], [GET /api/rainbow/enduser/v1.0/users/:userId][3] and [GET /api/rainbow/enduser/v1.0/search][4] and [POST /api/rainbow/enduser/v1.0/search][5]  [0]: /enduser/#api-companies-enduser_GetCompanies [1]: /enduser/#api-companies-enduser_GetCompaniesId [2]: /enduser/#api-users-enduser_GetUsers [3]: /enduser/#api-users-enduser_GetUsersId [4]: /enduser/#api-search-enduser_Search_by_GET [5]: /enduser/#api-search-enduser_Search_by_POST
     * @param {String} otherCompanyId Company unique identifier to which the visibility will be given (like 56d6f00441255dd54b5b61ae)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostCompaniesVisibilitySuccess} and HTTP response
     */
    this.postCompaniesVisibilityWithHttpInfo = function(otherCompanyId, companyId) {
      var postBody = null;
      // verify the required parameter 'otherCompanyId' is set
      if (otherCompanyId === undefined || otherCompanyId === null) {
        throw new Error("Missing the required parameter 'otherCompanyId' when calling postCompaniesVisibility");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling postCompaniesVisibility");
      }

      var pathParams = {
        'otherCompanyId': otherCompanyId,
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PostCompaniesVisibilitySuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/visible-by/{otherCompanyId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add visibility to a given company
     * This API can be used by `superadmin`, `organization_admin`, `bp_admin` and `bp_finance` users to make company A visible by company B:    POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/{company_id_A}/visible-by/{company_id_B}       `bp_admin` and `bp_finance` users can only add visibility from a company they manage to a company they manage (i.e. management of End Customers companies for which bp_admin/bp_finance's company if the BP company).       `organization_admin` users can only add visibility from a company they manage to a company they manage (i.e. management of the visibility between companies of his organization).       Using this API, the visibility is given **uni-directionally**. This means that if POST /api/rainbow/admin/v1.0/companies/{company_id_B}/visible-by/{company_id_A} is not called, company B will be able to see company A but company B won't be able to see company A.       Visibility means that:   * `users` and `admins` from company B will be able to see company A using [GET /api/rainbow/enduser/v1.0/companies][0] and [GET /api/rainbow/enduser/v1.0/companies/{companyId}][1] * `users` and `admins` from company B will be able to see users of company A using [GET /api/rainbow/enduser/v1.0/users][2], [GET /api/rainbow/enduser/v1.0/users/:userId][3] and [GET /api/rainbow/enduser/v1.0/search][4] and [POST /api/rainbow/enduser/v1.0/search][5]  [0]: /enduser/#api-companies-enduser_GetCompanies [1]: /enduser/#api-companies-enduser_GetCompaniesId [2]: /enduser/#api-users-enduser_GetUsers [3]: /enduser/#api-users-enduser_GetUsersId [4]: /enduser/#api-search-enduser_Search_by_GET [5]: /enduser/#api-search-enduser_Search_by_POST
     * @param {String} otherCompanyId Company unique identifier to which the visibility will be given (like 56d6f00441255dd54b5b61ae)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostCompaniesVisibilitySuccess}
     */
    this.postCompaniesVisibility = function(otherCompanyId, companyId) {
      return this.postCompaniesVisibilityWithHttpInfo(otherCompanyId, companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
