/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteCompanyIceServersSuccess', 'model/GetCompanyIceServers', 'model/GetCompanyIceServersSuccess', 'model/PostCompanyIceServers', 'model/PostCompanyIceServersSuccess', 'model/PutCompanyIceServers', 'model/PutCompanyIceServersSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteCompanyIceServersSuccess'), require('../model/GetCompanyIceServers'), require('../model/GetCompanyIceServersSuccess'), require('../model/PostCompanyIceServers'), require('../model/PostCompanyIceServersSuccess'), require('../model/PutCompanyIceServers'), require('../model/PutCompanyIceServersSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.CompaniesSettingsWebrtcApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.DeleteCompanyIceServersSuccess, root.RainbowAdminPortal.GetCompanyIceServers, root.RainbowAdminPortal.GetCompanyIceServersSuccess, root.RainbowAdminPortal.PostCompanyIceServers, root.RainbowAdminPortal.PostCompanyIceServersSuccess, root.RainbowAdminPortal.PutCompanyIceServers, root.RainbowAdminPortal.PutCompanyIceServersSuccess);
  }
}(this, function(ApiClient, DeleteCompanyIceServersSuccess, GetCompanyIceServers, GetCompanyIceServersSuccess, PostCompanyIceServers, PostCompanyIceServersSuccess, PutCompanyIceServers, PutCompanyIceServersSuccess) {
  'use strict';

  /**
   * CompaniesSettingsWebrtc service.
   * @module api/CompaniesSettingsWebrtcApi
   * @version 1.82.0
   */

  /**
   * Constructs a new CompaniesSettingsWebrtcApi. 
   * @alias module:api/CompaniesSettingsWebrtcApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete an ICE server
     * This API allows to delete an existing ICE server configuration for a given company.       Users with `superadmin` role can delete ICE servers of any company.       `bp_admin` users can only delete ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only delete ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only delete ICE servers of their own company.
     * @param {String} iceServerId ICE server unique identifier (like 5734a186070f38215854b61f)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {String} contentType application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteCompanyIceServersSuccess} and HTTP response
     */
    this.deleteCompanyIceServersWithHttpInfo = function(iceServerId, companyId, accept, contentType) {
      var postBody = null;
      // verify the required parameter 'iceServerId' is set
      if (iceServerId === undefined || iceServerId === null) {
        throw new Error("Missing the required parameter 'iceServerId' when calling deleteCompanyIceServers");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteCompanyIceServers");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteCompanyIceServers");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteCompanyIceServers");
      }

      var pathParams = {
        'iceServerId': iceServerId,
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept,
        'content-type': contentType
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteCompanyIceServersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/settings/iceservers/{iceServerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an ICE server
     * This API allows to delete an existing ICE server configuration for a given company.       Users with `superadmin` role can delete ICE servers of any company.       `bp_admin` users can only delete ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only delete ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only delete ICE servers of their own company.
     * @param {String} iceServerId ICE server unique identifier (like 5734a186070f38215854b61f)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {String} contentType application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteCompanyIceServersSuccess}
     */
    this.deleteCompanyIceServers = function(iceServerId, companyId, accept, contentType) {
      return this.deleteCompanyIceServersWithHttpInfo(iceServerId, companyId, accept, contentType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get ICE servers
     * This API allows to get ICE servers configuration for a given company.       Users with `superadmin` role can get ICE servers of any company.       `bp_admin` users can only get ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only get ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only get ICE servers of their own company.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {module:model/GetCompanyIceServers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCompanyIceServersSuccess} and HTTP response
     */
    this.getCompanyIceServersWithHttpInfo = function(companyId, accept, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompanyIceServers");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCompanyIceServers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCompanyIceServers");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCompanyIceServersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/settings/iceservers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get ICE servers
     * This API allows to get ICE servers configuration for a given company.       Users with `superadmin` role can get ICE servers of any company.       `bp_admin` users can only get ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only get ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only get ICE servers of their own company.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {module:model/GetCompanyIceServers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCompanyIceServersSuccess}
     */
    this.getCompanyIceServers = function(companyId, accept, body) {
      return this.getCompanyIceServersWithHttpInfo(companyId, accept, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an ICE server
     * This API allows to create an ICE server configuration for a given company.       Users with `superadmin` role can create ICE servers of any company.       `bp_admin` users can only create ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only create ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only create ICE servers of their own company.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PostCompanyIceServers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostCompanyIceServersSuccess} and HTTP response
     */
    this.postCompanyIceServersWithHttpInfo = function(companyId, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling postCompanyIceServers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCompanyIceServers");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostCompanyIceServersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/settings/iceservers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an ICE server
     * This API allows to create an ICE server configuration for a given company.       Users with `superadmin` role can create ICE servers of any company.       `bp_admin` users can only create ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only create ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only create ICE servers of their own company.
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PostCompanyIceServers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostCompanyIceServersSuccess}
     */
    this.postCompanyIceServers = function(companyId, body) {
      return this.postCompanyIceServersWithHttpInfo(companyId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an ICE server
     * This API allows to update an existing ICE server configuration for a given company.       Users with `superadmin` role can update ICE servers of any company.       `bp_admin` users can only update ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only update ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only update ICE servers of their own company.
     * @param {String} iceServerId ICE server unique identifier (like 5734a186070f38215854b61f)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutCompanyIceServers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutCompanyIceServersSuccess} and HTTP response
     */
    this.putCompanyIceServersWithHttpInfo = function(iceServerId, companyId, body) {
      var postBody = body;
      // verify the required parameter 'iceServerId' is set
      if (iceServerId === undefined || iceServerId === null) {
        throw new Error("Missing the required parameter 'iceServerId' when calling putCompanyIceServers");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling putCompanyIceServers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCompanyIceServers");
      }

      var pathParams = {
        'iceServerId': iceServerId,
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PutCompanyIceServersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/settings/iceservers/{iceServerId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an ICE server
     * This API allows to update an existing ICE server configuration for a given company.       Users with `superadmin` role can update ICE servers of any company.       `bp_admin` users can only update ICE servers for a company they manage (i.e. End Customer company for which bp_admin's company if the BP company).       `organization_admin` users can only update ICE servers for a company they manage (i.e. company linked to organization_admin's organization).       `company_admin` users can only update ICE servers of their own company.
     * @param {String} iceServerId ICE server unique identifier (like 5734a186070f38215854b61f)
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutCompanyIceServers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutCompanyIceServersSuccess}
     */
    this.putCompanyIceServers = function(iceServerId, companyId, body) {
      return this.putCompanyIceServersWithHttpInfo(iceServerId, companyId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
