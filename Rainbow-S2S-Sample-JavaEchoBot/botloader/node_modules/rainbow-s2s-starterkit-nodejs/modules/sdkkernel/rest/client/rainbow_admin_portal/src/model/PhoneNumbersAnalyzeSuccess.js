/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PhoneNumbersAnalyzeSuccessParseAndKeepRawInput'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PhoneNumbersAnalyzeSuccessParseAndKeepRawInput'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.PhoneNumbersAnalyzeSuccess = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.PhoneNumbersAnalyzeSuccessParseAndKeepRawInput);
  }
}(this, function(ApiClient, PhoneNumbersAnalyzeSuccessParseAndKeepRawInput) {
  'use strict';



  /**
   * The PhoneNumbersAnalyzeSuccess model module.
   * @module model/PhoneNumbersAnalyzeSuccess
   * @version 1.82.0
   */

  /**
   * Constructs a new <code>PhoneNumbersAnalyzeSuccess</code>.
   * @alias module:model/PhoneNumbersAnalyzeSuccess
   * @class
   * @param inputPhoneNumber {String} Input phone number
   * @param inputCountryCode {String} Input country code
   * @param checkedCountryCode {String} Country code sent to google libphonenumber (computed from inputCountryCode)
   * @param parseAndKeepRawInput {module:model/PhoneNumbersAnalyzeSuccessParseAndKeepRawInput} 
   * @param isPossibleNumber {String} Result of isPossibleNumber method
   * @param isPossibleNumberWithReason {String} Result of isPossibleNumberWithReason method
   * @param isValidNumber {String} Result of isValidNumber method
   * @param isValidNumberForRegion {String} Result of isValidNumberForRegion method
   * @param getRegionCodeForNumber {String} Result of getRegionCodeForNumber method
   * @param getNumberType {String} Result of getNumberType method
   * @param e164 {String} Result of format method with E164 format
   * @param international {String} Result of format method with INTERNATIONAL format
   * @param national {String} Result of format method with NATIONAL format
   * @param rfc3966 {String} Result of format method with RFC3966 format
   * @param canBeInternationallyDialled {String} Result of canBeInternationallyDialled method
   * @param getLengthOfGeographicalAreaCode {String} Result of getLengthOfGeographicalAreaCode method
   * @param getLengthOfNationalDestinationCode {String} Result of getLengthOfNationalDestinationCode method
   * @param isNumberGeographical {String} Result of isNumberGeographical method
   * @param getNationalSignificantNumber {String} Result of getNationalSignificantNumber method
   * @param getCountryCodeForRegion {String} Result of getCountryCodeForRegion method
   * @param getRegionCodeForCountryCode {String} Result of getRegionCodeForCountryCode method
   * @param getRegionCodesForCountryCode {String} Result of getRegionCodesForCountryCode method
   * @param isAlphaNumber {String} Result of isAlphaNumber method
   * @param maybeStripExtension {String} Result of maybeStripExtension method
   * @param hasNationalNumber {String} Result of hasNationalNumber method
   * @param nationalNumberCount {String} Result of nationalNumberCount method
   * @param getNationalNumber {String} Result of getNationalNumber method
   * @param hasCountryCode {String} Result of hasCountryCode method
   * @param countryCodeCount {String} Result of countryCodeCount method
   * @param getCountryCode {String} Result of getCountryCode method
   * @param hasExtension {String} Result of hasExtension method
   * @param hasItalianLeadingZero {String} Result of hasItalianLeadingZero method
   * @param hasNumberOfLeadingZeros {String} Result of hasNumberOfLeadingZeros method
   * @param hasRawInput {String} Result of hasRawInput method
   * @param hasCountryCodeSource {String} Result of hasCountryCodeSource method
   * @param hasPreferredDomesticCarrierCode {String} Result of hasPreferredDomesticCarrierCode method
   */
  var exports = function(inputPhoneNumber, inputCountryCode, checkedCountryCode, parseAndKeepRawInput, isPossibleNumber, isPossibleNumberWithReason, isValidNumber, isValidNumberForRegion, getRegionCodeForNumber, getNumberType, e164, international, national, rfc3966, canBeInternationallyDialled, getLengthOfGeographicalAreaCode, getLengthOfNationalDestinationCode, isNumberGeographical, getNationalSignificantNumber, getCountryCodeForRegion, getRegionCodeForCountryCode, getRegionCodesForCountryCode, isAlphaNumber, maybeStripExtension, hasNationalNumber, nationalNumberCount, getNationalNumber, hasCountryCode, countryCodeCount, getCountryCode, hasExtension, hasItalianLeadingZero, hasNumberOfLeadingZeros, hasRawInput, hasCountryCodeSource, hasPreferredDomesticCarrierCode) {
    var _this = this;

    _this['inputPhoneNumber'] = inputPhoneNumber;
    _this['inputCountryCode'] = inputCountryCode;
    _this['checkedCountryCode'] = checkedCountryCode;
    _this['parseAndKeepRawInput'] = parseAndKeepRawInput;
    _this['isPossibleNumber'] = isPossibleNumber;
    _this['isPossibleNumberWithReason'] = isPossibleNumberWithReason;
    _this['isValidNumber'] = isValidNumber;
    _this['isValidNumberForRegion'] = isValidNumberForRegion;
    _this['getRegionCodeForNumber'] = getRegionCodeForNumber;
    _this['getNumberType'] = getNumberType;
    _this['e164'] = e164;
    _this['international'] = international;
    _this['national'] = national;
    _this['rfc3966'] = rfc3966;
    _this['canBeInternationallyDialled'] = canBeInternationallyDialled;
    _this['getLengthOfGeographicalAreaCode'] = getLengthOfGeographicalAreaCode;
    _this['getLengthOfNationalDestinationCode'] = getLengthOfNationalDestinationCode;
    _this['isNumberGeographical'] = isNumberGeographical;
    _this['getNationalSignificantNumber'] = getNationalSignificantNumber;
    _this['getCountryCodeForRegion'] = getCountryCodeForRegion;
    _this['getRegionCodeForCountryCode'] = getRegionCodeForCountryCode;
    _this['getRegionCodesForCountryCode'] = getRegionCodesForCountryCode;
    _this['isAlphaNumber'] = isAlphaNumber;
    _this['maybeStripExtension'] = maybeStripExtension;
    _this['hasNationalNumber'] = hasNationalNumber;
    _this['nationalNumberCount'] = nationalNumberCount;
    _this['getNationalNumber'] = getNationalNumber;
    _this['hasCountryCode'] = hasCountryCode;
    _this['countryCodeCount'] = countryCodeCount;
    _this['getCountryCode'] = getCountryCode;
    _this['hasExtension'] = hasExtension;
    _this['hasItalianLeadingZero'] = hasItalianLeadingZero;
    _this['hasNumberOfLeadingZeros'] = hasNumberOfLeadingZeros;
    _this['hasRawInput'] = hasRawInput;
    _this['hasCountryCodeSource'] = hasCountryCodeSource;
    _this['hasPreferredDomesticCarrierCode'] = hasPreferredDomesticCarrierCode;
  };

  /**
   * Constructs a <code>PhoneNumbersAnalyzeSuccess</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PhoneNumbersAnalyzeSuccess} obj Optional instance to populate.
   * @return {module:model/PhoneNumbersAnalyzeSuccess} The populated <code>PhoneNumbersAnalyzeSuccess</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('inputPhoneNumber')) {
        obj['inputPhoneNumber'] = ApiClient.convertToType(data['inputPhoneNumber'], 'String');
      }
      if (data.hasOwnProperty('inputCountryCode')) {
        obj['inputCountryCode'] = ApiClient.convertToType(data['inputCountryCode'], 'String');
      }
      if (data.hasOwnProperty('checkedCountryCode')) {
        obj['checkedCountryCode'] = ApiClient.convertToType(data['checkedCountryCode'], 'String');
      }
      if (data.hasOwnProperty('parseAndKeepRawInput')) {
        obj['parseAndKeepRawInput'] = PhoneNumbersAnalyzeSuccessParseAndKeepRawInput.constructFromObject(data['parseAndKeepRawInput']);
      }
      if (data.hasOwnProperty('isPossibleNumber')) {
        obj['isPossibleNumber'] = ApiClient.convertToType(data['isPossibleNumber'], 'String');
      }
      if (data.hasOwnProperty('isPossibleNumberWithReason')) {
        obj['isPossibleNumberWithReason'] = ApiClient.convertToType(data['isPossibleNumberWithReason'], 'String');
      }
      if (data.hasOwnProperty('isValidNumber')) {
        obj['isValidNumber'] = ApiClient.convertToType(data['isValidNumber'], 'String');
      }
      if (data.hasOwnProperty('isValidNumberForRegion')) {
        obj['isValidNumberForRegion'] = ApiClient.convertToType(data['isValidNumberForRegion'], 'String');
      }
      if (data.hasOwnProperty('getRegionCodeForNumber')) {
        obj['getRegionCodeForNumber'] = ApiClient.convertToType(data['getRegionCodeForNumber'], 'String');
      }
      if (data.hasOwnProperty('getNumberType')) {
        obj['getNumberType'] = ApiClient.convertToType(data['getNumberType'], 'String');
      }
      if (data.hasOwnProperty('e164')) {
        obj['e164'] = ApiClient.convertToType(data['e164'], 'String');
      }
      if (data.hasOwnProperty('international')) {
        obj['international'] = ApiClient.convertToType(data['international'], 'String');
      }
      if (data.hasOwnProperty('national')) {
        obj['national'] = ApiClient.convertToType(data['national'], 'String');
      }
      if (data.hasOwnProperty('rfc3966')) {
        obj['rfc3966'] = ApiClient.convertToType(data['rfc3966'], 'String');
      }
      if (data.hasOwnProperty('canBeInternationallyDialled')) {
        obj['canBeInternationallyDialled'] = ApiClient.convertToType(data['canBeInternationallyDialled'], 'String');
      }
      if (data.hasOwnProperty('getLengthOfGeographicalAreaCode')) {
        obj['getLengthOfGeographicalAreaCode'] = ApiClient.convertToType(data['getLengthOfGeographicalAreaCode'], 'String');
      }
      if (data.hasOwnProperty('getLengthOfNationalDestinationCode')) {
        obj['getLengthOfNationalDestinationCode'] = ApiClient.convertToType(data['getLengthOfNationalDestinationCode'], 'String');
      }
      if (data.hasOwnProperty('isNumberGeographical')) {
        obj['isNumberGeographical'] = ApiClient.convertToType(data['isNumberGeographical'], 'String');
      }
      if (data.hasOwnProperty('getNationalSignificantNumber')) {
        obj['getNationalSignificantNumber'] = ApiClient.convertToType(data['getNationalSignificantNumber'], 'String');
      }
      if (data.hasOwnProperty('getCountryCodeForRegion')) {
        obj['getCountryCodeForRegion'] = ApiClient.convertToType(data['getCountryCodeForRegion'], 'String');
      }
      if (data.hasOwnProperty('getRegionCodeForCountryCode')) {
        obj['getRegionCodeForCountryCode'] = ApiClient.convertToType(data['getRegionCodeForCountryCode'], 'String');
      }
      if (data.hasOwnProperty('getRegionCodesForCountryCode')) {
        obj['getRegionCodesForCountryCode'] = ApiClient.convertToType(data['getRegionCodesForCountryCode'], 'String');
      }
      if (data.hasOwnProperty('isAlphaNumber')) {
        obj['isAlphaNumber'] = ApiClient.convertToType(data['isAlphaNumber'], 'String');
      }
      if (data.hasOwnProperty('maybeStripExtension')) {
        obj['maybeStripExtension'] = ApiClient.convertToType(data['maybeStripExtension'], 'String');
      }
      if (data.hasOwnProperty('hasNationalNumber')) {
        obj['hasNationalNumber'] = ApiClient.convertToType(data['hasNationalNumber'], 'String');
      }
      if (data.hasOwnProperty('nationalNumberCount')) {
        obj['nationalNumberCount'] = ApiClient.convertToType(data['nationalNumberCount'], 'String');
      }
      if (data.hasOwnProperty('getNationalNumber')) {
        obj['getNationalNumber'] = ApiClient.convertToType(data['getNationalNumber'], 'String');
      }
      if (data.hasOwnProperty('hasCountryCode')) {
        obj['hasCountryCode'] = ApiClient.convertToType(data['hasCountryCode'], 'String');
      }
      if (data.hasOwnProperty('countryCodeCount')) {
        obj['countryCodeCount'] = ApiClient.convertToType(data['countryCodeCount'], 'String');
      }
      if (data.hasOwnProperty('getCountryCode')) {
        obj['getCountryCode'] = ApiClient.convertToType(data['getCountryCode'], 'String');
      }
      if (data.hasOwnProperty('hasExtension')) {
        obj['hasExtension'] = ApiClient.convertToType(data['hasExtension'], 'String');
      }
      if (data.hasOwnProperty('hasItalianLeadingZero')) {
        obj['hasItalianLeadingZero'] = ApiClient.convertToType(data['hasItalianLeadingZero'], 'String');
      }
      if (data.hasOwnProperty('hasNumberOfLeadingZeros')) {
        obj['hasNumberOfLeadingZeros'] = ApiClient.convertToType(data['hasNumberOfLeadingZeros'], 'String');
      }
      if (data.hasOwnProperty('hasRawInput')) {
        obj['hasRawInput'] = ApiClient.convertToType(data['hasRawInput'], 'String');
      }
      if (data.hasOwnProperty('hasCountryCodeSource')) {
        obj['hasCountryCodeSource'] = ApiClient.convertToType(data['hasCountryCodeSource'], 'String');
      }
      if (data.hasOwnProperty('hasPreferredDomesticCarrierCode')) {
        obj['hasPreferredDomesticCarrierCode'] = ApiClient.convertToType(data['hasPreferredDomesticCarrierCode'], 'String');
      }
    }
    return obj;
  }

  /**
   * Input phone number
   * @member {String} inputPhoneNumber
   */
  exports.prototype['inputPhoneNumber'] = undefined;
  /**
   * Input country code
   * @member {String} inputCountryCode
   */
  exports.prototype['inputCountryCode'] = undefined;
  /**
   * Country code sent to google libphonenumber (computed from inputCountryCode)
   * @member {String} checkedCountryCode
   */
  exports.prototype['checkedCountryCode'] = undefined;
  /**
   * @member {module:model/PhoneNumbersAnalyzeSuccessParseAndKeepRawInput} parseAndKeepRawInput
   */
  exports.prototype['parseAndKeepRawInput'] = undefined;
  /**
   * Result of isPossibleNumber method
   * @member {String} isPossibleNumber
   */
  exports.prototype['isPossibleNumber'] = undefined;
  /**
   * Result of isPossibleNumberWithReason method
   * @member {String} isPossibleNumberWithReason
   */
  exports.prototype['isPossibleNumberWithReason'] = undefined;
  /**
   * Result of isValidNumber method
   * @member {String} isValidNumber
   */
  exports.prototype['isValidNumber'] = undefined;
  /**
   * Result of isValidNumberForRegion method
   * @member {String} isValidNumberForRegion
   */
  exports.prototype['isValidNumberForRegion'] = undefined;
  /**
   * Result of getRegionCodeForNumber method
   * @member {String} getRegionCodeForNumber
   */
  exports.prototype['getRegionCodeForNumber'] = undefined;
  /**
   * Result of getNumberType method
   * @member {String} getNumberType
   */
  exports.prototype['getNumberType'] = undefined;
  /**
   * Result of format method with E164 format
   * @member {String} e164
   */
  exports.prototype['e164'] = undefined;
  /**
   * Result of format method with INTERNATIONAL format
   * @member {String} international
   */
  exports.prototype['international'] = undefined;
  /**
   * Result of format method with NATIONAL format
   * @member {String} national
   */
  exports.prototype['national'] = undefined;
  /**
   * Result of format method with RFC3966 format
   * @member {String} rfc3966
   */
  exports.prototype['rfc3966'] = undefined;
  /**
   * Result of canBeInternationallyDialled method
   * @member {String} canBeInternationallyDialled
   */
  exports.prototype['canBeInternationallyDialled'] = undefined;
  /**
   * Result of getLengthOfGeographicalAreaCode method
   * @member {String} getLengthOfGeographicalAreaCode
   */
  exports.prototype['getLengthOfGeographicalAreaCode'] = undefined;
  /**
   * Result of getLengthOfNationalDestinationCode method
   * @member {String} getLengthOfNationalDestinationCode
   */
  exports.prototype['getLengthOfNationalDestinationCode'] = undefined;
  /**
   * Result of isNumberGeographical method
   * @member {String} isNumberGeographical
   */
  exports.prototype['isNumberGeographical'] = undefined;
  /**
   * Result of getNationalSignificantNumber method
   * @member {String} getNationalSignificantNumber
   */
  exports.prototype['getNationalSignificantNumber'] = undefined;
  /**
   * Result of getCountryCodeForRegion method
   * @member {String} getCountryCodeForRegion
   */
  exports.prototype['getCountryCodeForRegion'] = undefined;
  /**
   * Result of getRegionCodeForCountryCode method
   * @member {String} getRegionCodeForCountryCode
   */
  exports.prototype['getRegionCodeForCountryCode'] = undefined;
  /**
   * Result of getRegionCodesForCountryCode method
   * @member {String} getRegionCodesForCountryCode
   */
  exports.prototype['getRegionCodesForCountryCode'] = undefined;
  /**
   * Result of isAlphaNumber method
   * @member {String} isAlphaNumber
   */
  exports.prototype['isAlphaNumber'] = undefined;
  /**
   * Result of maybeStripExtension method
   * @member {String} maybeStripExtension
   */
  exports.prototype['maybeStripExtension'] = undefined;
  /**
   * Result of hasNationalNumber method
   * @member {String} hasNationalNumber
   */
  exports.prototype['hasNationalNumber'] = undefined;
  /**
   * Result of nationalNumberCount method
   * @member {String} nationalNumberCount
   */
  exports.prototype['nationalNumberCount'] = undefined;
  /**
   * Result of getNationalNumber method
   * @member {String} getNationalNumber
   */
  exports.prototype['getNationalNumber'] = undefined;
  /**
   * Result of hasCountryCode method
   * @member {String} hasCountryCode
   */
  exports.prototype['hasCountryCode'] = undefined;
  /**
   * Result of countryCodeCount method
   * @member {String} countryCodeCount
   */
  exports.prototype['countryCodeCount'] = undefined;
  /**
   * Result of getCountryCode method
   * @member {String} getCountryCode
   */
  exports.prototype['getCountryCode'] = undefined;
  /**
   * Result of hasExtension method
   * @member {String} hasExtension
   */
  exports.prototype['hasExtension'] = undefined;
  /**
   * Result of hasItalianLeadingZero method
   * @member {String} hasItalianLeadingZero
   */
  exports.prototype['hasItalianLeadingZero'] = undefined;
  /**
   * Result of hasNumberOfLeadingZeros method
   * @member {String} hasNumberOfLeadingZeros
   */
  exports.prototype['hasNumberOfLeadingZeros'] = undefined;
  /**
   * Result of hasRawInput method
   * @member {String} hasRawInput
   */
  exports.prototype['hasRawInput'] = undefined;
  /**
   * Result of hasCountryCodeSource method
   * @member {String} hasCountryCodeSource
   */
  exports.prototype['hasCountryCodeSource'] = undefined;
  /**
   * Result of hasPreferredDomesticCarrierCode method
   * @member {String} hasPreferredDomesticCarrierCode
   */
  exports.prototype['hasPreferredDomesticCarrierCode'] = undefined;



  return exports;
}));


