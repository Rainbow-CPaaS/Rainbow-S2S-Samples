/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.CreateCompany = factory(root.RainbowEnduserPortal.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The CreateCompany model module.
   * @module model/CreateCompany
   * @version 1.84.0
   */

  /**
   * Constructs a new <code>CreateCompany</code>.
   * @alias module:model/CreateCompany
   * @class
   * @param name {String} Company name
   */
  var exports = function(name) {
    var _this = this;

    _this['name'] = name;
  };

  /**
   * Constructs a <code>CreateCompany</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateCompany} obj Optional instance to populate.
   * @return {module:model/CreateCompany} The populated <code>CreateCompany</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('visibility')) {
        obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('slogan')) {
        obj['slogan'] = ApiClient.convertToType(data['slogan'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'String');
      }
      if (data.hasOwnProperty('economicActivityClassification')) {
        obj['economicActivityClassification'] = ApiClient.convertToType(data['economicActivityClassification'], 'String');
      }
      if (data.hasOwnProperty('website')) {
        obj['website'] = ApiClient.convertToType(data['website'], 'String');
      }
      if (data.hasOwnProperty('avatarShape')) {
        obj['avatarShape'] = ApiClient.convertToType(data['avatarShape'], 'String');
      }
      if (data.hasOwnProperty('giphyEnabled')) {
        obj['giphyEnabled'] = ApiClient.convertToType(data['giphyEnabled'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Company name
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Company visibility (define if users being in this company can be searched by users being in other company).    Under the same organisation, a company can choose the visibility=organisation. That means users belonging to this company are visible for users of foreign companies having the same visibility inside the same organisation.    The visibility=organisation is same as visibility=private outside the organisation. That is to say users can't be searched.
   * @member {module:model/CreateCompany.VisibilityEnum} visibility
   * @default 'public'
   */
  exports.prototype['visibility'] = 'public';
  /**
   * Company country (ISO 3166-1 alpha3 format)
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * When country is 'USA' or 'CAN', a state must be defined. Else it is not managed.    USA states code list: `AA`:\"Armed Forces America\", `AE`:\"Armed Forces\", `AP`:\"Armed Forces Pacific\", `AK`:\"Alaska\", `AL`:\"Alabama\", `AR`:\"Arkansas\", `AZ`:\"Arizona\", `CA`:\"California\", `CO`:\"Colorado\", `CT`:\"Connecticut\", `DC`:\"Washington DC\", `DE`:\"Delaware\", `FL`:\"Florida\", `GA`:\"Georgia\", `GU`:\"Guam\", `HI`:\"Hawaii\", `IA`:\"Iowa\", `ID`:\"Idaho\", `IL`:\"Illinois\", `IN`:\"Indiana\", `KS`:\"Kansas\", `KY`:\"Kentucky\", `LA`:\"Louisiana\", `MA`:\"Massachusetts\", `MD`:\"Maryland\", `ME`:\"Maine\", `MI`:\"Michigan\", `MN`:\"Minnesota\", `MO`:\"Missouri\", `MS`:\"Mississippi\", `MT`:\"Montana\", `NC`:\"North Carolina\", `ND`:\"North Dakota\", `NE`:\"Nebraska\", `NH`:\"New Hampshire\", `NJ`:\"New Jersey\", `NM`:\"New Mexico\", `NV`:\"Nevada\", `NY`:\"New York\", `OH`:\"Ohio\", `OK`:\"Oklahoma\", `OR`:\"Oregon\", `PA`:\"Pennsylvania\", `PR`:\"Puerto Rico\", `RI`:\"Rhode Island\", `SC`:\"South Carolina\", `SD`:\"South Dakota\", `TN`:\"Tennessee\", `TX`:\"Texas\", `UT`:\"Utah\", `VA`:\"Virginia\", `VI`:\"Virgin Islands\", `VT`:\"Vermont\", `WA`:\"Washington\", `WI`:\"Wisconsin\", `WV`:\"West Virginia\", `WY`:\"Wyoming\"    Canada states code list: `AB`: \"Alberta\", `BC`: \"British Columbia\", `MB`: \"Manitoba\", `NB`: \"New Brunswick\", `NL`: \"Newfoundland and Labrador\", `NS`: \"Nova Scotia\", `NT`: \"Northwest Territories\", `NU`: \"Nunavut\", `ON`: \"Ontario\", `PE`: \"Prince Edward Island\", `QC`: \"Quebec\", `SK`: \"Saskatchewan\", `YT`: \"Yukon\" 
   * @member {module:model/CreateCompany.StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * A free string corresponding to the slogan of the company
   * @member {String} slogan
   */
  exports.prototype['slogan'] = undefined;
  /**
   * A free string that describes the company
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   *  An overview of the number of employees
   * @member {module:model/CreateCompany.SizeEnum} size
   */
  exports.prototype['size'] = undefined;
  /**
   * * `A`: AGRICULTURE, FORESTRY AND FISHING * `B`: MINING AND QUARRYING * `C`: MANUFACTURING * `D`: ELECTRICITY, GAS, STEAM AND AIR CONDITIONING SUPPLY * `E`: WATER SUPPLY; SEWERAGE, WASTE MANAGEMENT AND REMEDIATION ACTIVITIES * `F`: CONSTRUCTION * `G`: WHOLESALE AND RETAIL TRADE; REPAIR OF MOTOR VEHICLES AND MOTORCYCLES * `H`: TRANSPORTATION AND STORAGE * `I`: ACCOMMODATION AND FOOD SERVICE ACTIVITIES * `J`: INFORMATION AND COMMUNICATION * `K`: FINANCIAL AND INSURANCE ACTIVITIES * `L`: REAL ESTATE ACTIVITIES * `M`: PROFESSIONAL, SCIENTIFIC AND TECHNICAL ACTIVITIES * `N`: ADMINISTRATIVE AND SUPPORT SERVICE ACTIVITIES * `O`: PUBLIC ADMINISTRATION AND DEFENCE; COMPULSORY SOCIAL SECURITY * `P`: EDUCATION * `Q`: HUMAN HEALTH AND SOCIAL WORK ACTIVITIES * `R`: ARTS, ENTERTAINMENT AND RECREATION * `S`: OTHER SERVICE ACTIVITIES * `T`: ACTIVITIES OF HOUSEHOLDS AS EMPLOYERS; UNDIFFERENTIATED GOODS- AND SERVICES-PRODUCING ACTIVITIES OF HOUSEHOLDS FOR OWN USE * `U`: ACTIVITIES OF EXTRATERRITORIAL ORGANISATIONS AND BODIES 
   * @member {module:model/CreateCompany.EconomicActivityClassificationEnum} economicActivityClassification
   */
  exports.prototype['economicActivityClassification'] = undefined;
  /**
   * Company website URL
   * @member {String} website
   */
  exports.prototype['website'] = undefined;
  /**
   * Company's avatar customization
   * @member {module:model/CreateCompany.AvatarShapeEnum} avatarShape
   */
  exports.prototype['avatarShape'] = undefined;
  /**
   * Whether or not giphy feature is enabled for users belonging to this company (possibility to use animated gifs in conversations)
   * @member {Boolean} giphyEnabled
   */
  exports.prototype['giphyEnabled'] = undefined;


  /**
   * Allowed values for the <code>visibility</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VisibilityEnum = {
    /**
     * value: "public"
     * @const
     */
    "public": "public",
    /**
     * value: "private"
     * @const
     */
    "private": "private",
    /**
     * value: "organisation"
     * @const
     */
    "organisation": "organisation"  };

  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "null"
     * @const
     */
    "null": "null",
    /**
     * value: "AA"
     * @const
     */
    "AA": "AA",
    /**
     * value: "AE"
     * @const
     */
    "AE": "AE",
    /**
     * value: "AP"
     * @const
     */
    "AP": "AP",
    /**
     * value: "AK"
     * @const
     */
    "AK": "AK",
    /**
     * value: "AL"
     * @const
     */
    "AL": "AL",
    /**
     * value: "AR"
     * @const
     */
    "AR": "AR",
    /**
     * value: "AZ"
     * @const
     */
    "AZ": "AZ",
    /**
     * value: "CA"
     * @const
     */
    "CA": "CA",
    /**
     * value: "CO"
     * @const
     */
    "CO": "CO",
    /**
     * value: "CT"
     * @const
     */
    "CT": "CT",
    /**
     * value: "DC"
     * @const
     */
    "DC": "DC",
    /**
     * value: "DE"
     * @const
     */
    "DE": "DE",
    /**
     * value: "FL"
     * @const
     */
    "FL": "FL",
    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",
    /**
     * value: "GU"
     * @const
     */
    "GU": "GU",
    /**
     * value: "HI"
     * @const
     */
    "HI": "HI",
    /**
     * value: "IA"
     * @const
     */
    "IA": "IA",
    /**
     * value: "ID"
     * @const
     */
    "ID": "ID",
    /**
     * value: "IL"
     * @const
     */
    "IL": "IL",
    /**
     * value: "IN"
     * @const
     */
    "IN": "IN",
    /**
     * value: "KS"
     * @const
     */
    "KS": "KS",
    /**
     * value: "KY"
     * @const
     */
    "KY": "KY",
    /**
     * value: "LA"
     * @const
     */
    "LA": "LA",
    /**
     * value: "MA"
     * @const
     */
    "MA": "MA",
    /**
     * value: "MD"
     * @const
     */
    "MD": "MD",
    /**
     * value: "ME"
     * @const
     */
    "ME": "ME",
    /**
     * value: "MI"
     * @const
     */
    "MI": "MI",
    /**
     * value: "MN"
     * @const
     */
    "MN": "MN",
    /**
     * value: "MO"
     * @const
     */
    "MO": "MO",
    /**
     * value: "MS"
     * @const
     */
    "MS": "MS",
    /**
     * value: "MT"
     * @const
     */
    "MT": "MT",
    /**
     * value: "NC"
     * @const
     */
    "NC": "NC",
    /**
     * value: "ND"
     * @const
     */
    "ND": "ND",
    /**
     * value: "NE"
     * @const
     */
    "NE": "NE",
    /**
     * value: "NH"
     * @const
     */
    "NH": "NH",
    /**
     * value: "NJ"
     * @const
     */
    "NJ": "NJ",
    /**
     * value: "NM"
     * @const
     */
    "NM": "NM",
    /**
     * value: "NV"
     * @const
     */
    "NV": "NV",
    /**
     * value: "NY"
     * @const
     */
    "NY": "NY",
    /**
     * value: "OH"
     * @const
     */
    "OH": "OH",
    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",
    /**
     * value: "OR"
     * @const
     */
    "OR": "OR",
    /**
     * value: "PA"
     * @const
     */
    "PA": "PA",
    /**
     * value: "PR"
     * @const
     */
    "PR": "PR",
    /**
     * value: "RI"
     * @const
     */
    "RI": "RI",
    /**
     * value: "SC"
     * @const
     */
    "SC": "SC",
    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",
    /**
     * value: "TN"
     * @const
     */
    "TN": "TN",
    /**
     * value: "TX"
     * @const
     */
    "TX": "TX",
    /**
     * value: "UT"
     * @const
     */
    "UT": "UT",
    /**
     * value: "VA"
     * @const
     */
    "VA": "VA",
    /**
     * value: "VI"
     * @const
     */
    "VI": "VI",
    /**
     * value: "VT"
     * @const
     */
    "VT": "VT",
    /**
     * value: "WA"
     * @const
     */
    "WA": "WA",
    /**
     * value: "WI"
     * @const
     */
    "WI": "WI",
    /**
     * value: "WV"
     * @const
     */
    "WV": "WV",
    /**
     * value: "WY"
     * @const
     */
    "WY": "WY",
    /**
     * value: "AB"
     * @const
     */
    "AB": "AB",
    /**
     * value: "BC"
     * @const
     */
    "BC": "BC",
    /**
     * value: "MB"
     * @const
     */
    "MB": "MB",
    /**
     * value: "NB"
     * @const
     */
    "NB": "NB",
    /**
     * value: "NL"
     * @const
     */
    "NL": "NL",
    /**
     * value: "NS"
     * @const
     */
    "NS": "NS",
    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",
    /**
     * value: "NU"
     * @const
     */
    "NU": "NU",
    /**
     * value: "ON"
     * @const
     */
    "ON": "ON",
    /**
     * value: "PE"
     * @const
     */
    "PE": "PE",
    /**
     * value: "QC"
     * @const
     */
    "QC": "QC",
    /**
     * value: "SK"
     * @const
     */
    "SK": "SK",
    /**
     * value: "YT"
     * @const
     */
    "YT": "YT"  };

  /**
   * Allowed values for the <code>size</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SizeEnum = {
    /**
     * value: "self-employed"
     * @const
     */
    "self-employed": "self-employed",
    /**
     * value: "1-10 employees"
     * @const
     */
    "1-10 employees": "1-10 employees",
    /**
     * value: "11-50 employees"
     * @const
     */
    "11-50 employees": "11-50 employees",
    /**
     * value: "51-200 employees"
     * @const
     */
    "51-200 employees": "51-200 employees",
    /**
     * value: "201-500 employees"
     * @const
     */
    "201-500 employees": "201-500 employees",
    /**
     * value: "501-1000 employees"
     * @const
     */
    "501-1000 employees": "501-1000 employees",
    /**
     * value: "1001-5000 employees"
     * @const
     */
    "1001-5000 employees": "1001-5000 employees",
    /**
     * value: "5001-10,000 employees"
     * @const
     */
    "5001-10,000 employees": "5001-10,000 employees",
    /**
     * value: "10,001+ employees"
     * @const
     */
    "10,001+ employees": "10,001+ employees"  };

  /**
   * Allowed values for the <code>economicActivityClassification</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EconomicActivityClassificationEnum = {
    /**
     * value: "A"
     * @const
     */
    "A": "A",
    /**
     * value: "B"
     * @const
     */
    "B": "B",
    /**
     * value: "C"
     * @const
     */
    "C": "C",
    /**
     * value: "D"
     * @const
     */
    "D": "D",
    /**
     * value: "E"
     * @const
     */
    "E": "E",
    /**
     * value: "F"
     * @const
     */
    "F": "F",
    /**
     * value: "G"
     * @const
     */
    "G": "G",
    /**
     * value: "H"
     * @const
     */
    "H": "H",
    /**
     * value: "I"
     * @const
     */
    "I": "I",
    /**
     * value: "J"
     * @const
     */
    "J": "J",
    /**
     * value: "K"
     * @const
     */
    "K": "K",
    /**
     * value: "L"
     * @const
     */
    "L": "L",
    /**
     * value: "M"
     * @const
     */
    "M": "M",
    /**
     * value: "N"
     * @const
     */
    "N": "N",
    /**
     * value: "O"
     * @const
     */
    "O": "O",
    /**
     * value: "P"
     * @const
     */
    "P": "P",
    /**
     * value: "Q"
     * @const
     */
    "Q": "Q",
    /**
     * value: "R"
     * @const
     */
    "R": "R",
    /**
     * value: "S"
     * @const
     */
    "S": "S",
    /**
     * value: "T"
     * @const
     */
    "T": "T",
    /**
     * value: "U"
     * @const
     */
    "U": "U"  };

  /**
   * Allowed values for the <code>avatarShape</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AvatarShapeEnum = {
    /**
     * value: "square"
     * @const
     */
    "square": "square",
    /**
     * value: "circle"
     * @const
     */
    "circle": "circle"  };


  return exports;
}));


