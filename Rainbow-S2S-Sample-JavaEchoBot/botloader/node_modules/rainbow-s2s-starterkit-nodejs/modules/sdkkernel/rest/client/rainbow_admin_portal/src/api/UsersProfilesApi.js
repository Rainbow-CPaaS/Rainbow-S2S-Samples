/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminUsersDeleteUserProfilesSuccess', 'model/AdminUsersGetUserProfilesSuccess', 'model/AdminUsersPostUserProfilesSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminUsersDeleteUserProfilesSuccess'), require('../model/AdminUsersGetUserProfilesSuccess'), require('../model/AdminUsersPostUserProfilesSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.UsersProfilesApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminUsersDeleteUserProfilesSuccess, root.RainbowAdminPortal.AdminUsersGetUserProfilesSuccess, root.RainbowAdminPortal.AdminUsersPostUserProfilesSuccess);
  }
}(this, function(ApiClient, AdminUsersDeleteUserProfilesSuccess, AdminUsersGetUserProfilesSuccess, AdminUsersPostUserProfilesSuccess) {
  'use strict';

  /**
   * UsersProfiles service.
   * @module api/UsersProfilesApi
   * @version 1.82.0
   */

  /**
   * Constructs a new UsersProfilesApi. 
   * @alias module:api/UsersProfilesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a user profile
     * This API can be used to un-assign a company's subscription from user profiles.       Profile linked to company's default subscription can't be removed.       `superadmin` can remove a profile from any user existing in Rainbow.    `bp_admin` and `bp_finance` can remove a profile for users being in End Customer companies linked to their BP company and from users being in their own BP company (or organisation).    `organization_admin` can only remove a profile for users being in companies under their organisation.    `company_admin` can only remove a profile for users being in their company.       Example: DELETE https://openrainbow.com/api/rainbow/admin/v1.0/users/56d0277a0261b53142a5cab5/profiles/subscriptions/5808afeb4372eb19547e90cf
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} subscriptionId Company subscription unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminUsersDeleteUserProfilesSuccess} and HTTP response
     */
    this.adminUsersDeleteUserProfilesWithHttpInfo = function(userId, subscriptionId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersDeleteUserProfiles");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling adminUsersDeleteUserProfiles");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminUsersDeleteUserProfiles");
      }

      var pathParams = {
        'userId': userId,
        'subscriptionId': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['text/xml', 'application/json'];
      var returnType = AdminUsersDeleteUserProfilesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/users/{userId}/profiles/subscriptions/{subscriptionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user profile
     * This API can be used to un-assign a company's subscription from user profiles.       Profile linked to company's default subscription can't be removed.       `superadmin` can remove a profile from any user existing in Rainbow.    `bp_admin` and `bp_finance` can remove a profile for users being in End Customer companies linked to their BP company and from users being in their own BP company (or organisation).    `organization_admin` can only remove a profile for users being in companies under their organisation.    `company_admin` can only remove a profile for users being in their company.       Example: DELETE https://openrainbow.com/api/rainbow/admin/v1.0/users/56d0277a0261b53142a5cab5/profiles/subscriptions/5808afeb4372eb19547e90cf
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} subscriptionId Company subscription unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminUsersDeleteUserProfilesSuccess}
     */
    this.adminUsersDeleteUserProfiles = function(userId, subscriptionId, accept) {
      return this.adminUsersDeleteUserProfilesWithHttpInfo(userId, subscriptionId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user profiles
     * This API can be used to get a user's profiles.       `superadmin` and `support` can get profiles from any existing user in Rainbow.    `bp_admin` and `bp_finance` can only retrieve profiles of users being in End Customer companies linked to their BP company.    `organization_admin` can only retrieve profiles of users being in companies under their organisation.    `company_admin` can only get profiles of users being in their company.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/users/56d0277a0261b53142a5cab5/profiles
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminUsersGetUserProfilesSuccess} and HTTP response
     */
    this.adminUsersGetUserProfilesWithHttpInfo = function(userId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersGetUserProfiles");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminUsersGetUserProfiles");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminUsersGetUserProfilesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/users/{userId}/profiles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user profiles
     * This API can be used to get a user's profiles.       `superadmin` and `support` can get profiles from any existing user in Rainbow.    `bp_admin` and `bp_finance` can only retrieve profiles of users being in End Customer companies linked to their BP company.    `organization_admin` can only retrieve profiles of users being in companies under their organisation.    `company_admin` can only get profiles of users being in their company.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/users/56d0277a0261b53142a5cab5/profiles
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminUsersGetUserProfilesSuccess}
     */
    this.adminUsersGetUserProfiles = function(userId, accept) {
      return this.adminUsersGetUserProfilesWithHttpInfo(userId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a user profile
     * This API can be used to assign a company's subscription to user profiles (user must be in the same company than the company which own the subscription).       By default, when users are created or moved to a company, user's company's subscription to the default offer (Essential) is automatically added to user's profiles (therefore user's profiles should never be empty)       `superadmin` can add a profile from any user existing in Rainbow.    `bp_admin` and `bp_finance` can add a profile to users being in End Customer companies linked to their BP company and to users being in their own BP company (or organisation).    `organization_admin` can only add a profile to users being in companies under their organisation.    `company_admin` can only add a profile to users being in their company.       Provided subscriptionId must be one of the subscriptions available in user's company's subscriptions list (it can be the company's subscription to the default offer (Essential)).    The subscription must have the status `active` and not being synchronizing with Business Store / Zuora (`syncOngoing` equal to false), otherwise 403 errors are returned.    Subscription with businessModel `flat_fee` can not be assigned to user profiles (they are fees at company level).    If the subscription has a `maxNumberUsers` and the subscription is already assigned to this number of users, the assignation to the user is denied.    If the provided subscriptionId is already assigned to user's profiles, a conflict error is returned.       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/users/56d0277a0261b53142a5cab5/profiles/subscriptions/5808afeb4372eb19547e90cf
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} subscriptionId Company subscription unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminUsersPostUserProfilesSuccess} and HTTP response
     */
    this.adminUsersPostUserProfilesWithHttpInfo = function(userId, subscriptionId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersPostUserProfiles");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling adminUsersPostUserProfiles");
      }

      var pathParams = {
        'userId': userId,
        'subscriptionId': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['text/xml', 'application/json'];
      var returnType = AdminUsersPostUserProfilesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/users/{userId}/profiles/subscriptions/{subscriptionId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a user profile
     * This API can be used to assign a company's subscription to user profiles (user must be in the same company than the company which own the subscription).       By default, when users are created or moved to a company, user's company's subscription to the default offer (Essential) is automatically added to user's profiles (therefore user's profiles should never be empty)       `superadmin` can add a profile from any user existing in Rainbow.    `bp_admin` and `bp_finance` can add a profile to users being in End Customer companies linked to their BP company and to users being in their own BP company (or organisation).    `organization_admin` can only add a profile to users being in companies under their organisation.    `company_admin` can only add a profile to users being in their company.       Provided subscriptionId must be one of the subscriptions available in user's company's subscriptions list (it can be the company's subscription to the default offer (Essential)).    The subscription must have the status `active` and not being synchronizing with Business Store / Zuora (`syncOngoing` equal to false), otherwise 403 errors are returned.    Subscription with businessModel `flat_fee` can not be assigned to user profiles (they are fees at company level).    If the subscription has a `maxNumberUsers` and the subscription is already assigned to this number of users, the assignation to the user is denied.    If the provided subscriptionId is already assigned to user's profiles, a conflict error is returned.       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/users/56d0277a0261b53142a5cab5/profiles/subscriptions/5808afeb4372eb19547e90cf
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} subscriptionId Company subscription unique identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminUsersPostUserProfilesSuccess}
     */
    this.adminUsersPostUserProfiles = function(userId, subscriptionId) {
      return this.adminUsersPostUserProfilesWithHttpInfo(userId, subscriptionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
