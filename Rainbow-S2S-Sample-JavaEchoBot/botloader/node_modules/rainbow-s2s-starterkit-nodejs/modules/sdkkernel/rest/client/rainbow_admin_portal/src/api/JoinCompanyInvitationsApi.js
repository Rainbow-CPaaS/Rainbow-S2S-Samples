/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminPostJoinCompanyInvite', 'model/AdminPostJoinCompanyInviteSuccess', 'model/GetJoinCompanyInvitationsSuccess', 'model/GetJoinCompanyInviteByIdSuccess', 'model/PutCancelJoinCompanyInviteById', 'model/PutCancelJoinCompanyInviteByIdSuccess', 'model/PutFailedJoinCompanyInviteByIdSuccess', 'model/ResendJoinCompanyInviteById', 'model/ResendJoinCompanyInviteByIdSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminPostJoinCompanyInvite'), require('../model/AdminPostJoinCompanyInviteSuccess'), require('../model/GetJoinCompanyInvitationsSuccess'), require('../model/GetJoinCompanyInviteByIdSuccess'), require('../model/PutCancelJoinCompanyInviteById'), require('../model/PutCancelJoinCompanyInviteByIdSuccess'), require('../model/PutFailedJoinCompanyInviteByIdSuccess'), require('../model/ResendJoinCompanyInviteById'), require('../model/ResendJoinCompanyInviteByIdSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.JoinCompanyInvitationsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminPostJoinCompanyInvite, root.RainbowAdminPortal.AdminPostJoinCompanyInviteSuccess, root.RainbowAdminPortal.GetJoinCompanyInvitationsSuccess, root.RainbowAdminPortal.GetJoinCompanyInviteByIdSuccess, root.RainbowAdminPortal.PutCancelJoinCompanyInviteById, root.RainbowAdminPortal.PutCancelJoinCompanyInviteByIdSuccess, root.RainbowAdminPortal.PutFailedJoinCompanyInviteByIdSuccess, root.RainbowAdminPortal.ResendJoinCompanyInviteById, root.RainbowAdminPortal.ResendJoinCompanyInviteByIdSuccess);
  }
}(this, function(ApiClient, AdminPostJoinCompanyInvite, AdminPostJoinCompanyInviteSuccess, GetJoinCompanyInvitationsSuccess, GetJoinCompanyInviteByIdSuccess, PutCancelJoinCompanyInviteById, PutCancelJoinCompanyInviteByIdSuccess, PutFailedJoinCompanyInviteByIdSuccess, ResendJoinCompanyInviteById, ResendJoinCompanyInviteByIdSuccess) {
  'use strict';

  /**
   * JoinCompanyInvitations service.
   * @module api/JoinCompanyInvitationsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new JoinCompanyInvitationsApi. 
   * @alias module:api/JoinCompanyInvitationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a join company invitation
     * This API can be used by admin (`superadmin`, `bp_admin`, `bp_finance`, `organization_admin`, `company_admin`)    This API can be used by admin (`superadmin`, `bp_admin`, `bp_finance`, `organization_admin`, `company_admin`) users to create a join company invitation to a Rainbow user for a given company.       > `superadmin` can invite users to join all Rainbow companies    >    > `bp_admin` and `bp_finance` can only invite users to join their own company or End Customer companies for which their company is the BP company.    > `organization_admin` can only invite users to join companies being under their organisation.    > `company_admin` can only invite users to join their company.       ### Users can be invited:    #### by `email`    * by `email`:    * if no user is found with the provided email as loginEmail:      * an invitation to create his account in Rainbow and join the company is sent to the provided email address.     * User will be able to create his account using API [POST /api/rainbow/enduser/v1.0/users/self-register][0].     * InvitationId from the email link should be provided as joinCompanyInvitationId parameter of this API.    In that case, the join company invitation will be accepted and the user is created in the inviting company.     * If joinCompanyInvitationId is not provided, if the user registers with the same loginEmail than the join company invitation email, the join company invitation is auto-accepted and the user is created directly in the inviting company.     * If previous join company invitation has already been sent for another company to this email, the previous one is deleted and is replaced by a new join company invitation for the provided companyId.    In this case, admins of the other company are notified with the following XMPP message:         ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"delete\" id='582048dfe2e68a79f4979624'       status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ```   * if the loginEmail of a Rainbow user matches the provided email:      * user can only be invited if he is in the default company (otherwise an error is thrown)     * an invitation to join admin's company is sent by email and with an XMPP message:         ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"create\" id='57cd5922d341df5812bbcb72'       status='pending' type='received' xmlns='jabber:iq:configuration'/> </message> ```           * It is possible for an existing Rainbow user to be invited by several admins of different companies.     * Invited user is able to list join company invitations he received using API [GET /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations][1]     * Invited user is able to accept a join company invitation using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/accept][2]     * Invited user is able to decline a join company invitation using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/decline][3] * by Rainbow user id (`invitedUserId`):    * if no user is found with the provided invitedUserId, an error 404 is returned   * otherwise, an invitation to join admin's company is sent by email and with an XMPP message.    Same documentation than existing user invited by email apply (see above).     For every use cases detailed above, all company administrators of the provided companyId are notified about the join company request creation with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"create\" id='57cd5922d341df5812bbcb72'      status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ```       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations  [0]: /enduser/#api-users-enduser_SelfRegisterUsers [1]: #api-join_company_invitations-enduser_GetJoinCompanyInvitations [2]: #api-join_company_invitations-enduser_PostAcceptJoinCompanyInvitation [3]: #api-join_company_invitations-enduser_PostDeclineJoinCompanyInvitation
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/AdminPostJoinCompanyInvite} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostJoinCompanyInviteSuccess} and HTTP response
     */
    this.adminPostJoinCompanyInviteWithHttpInfo = function(companyId, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling adminPostJoinCompanyInvite");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminPostJoinCompanyInvite");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminPostJoinCompanyInviteSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/join-companies/invitations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a join company invitation
     * This API can be used by admin (`superadmin`, `bp_admin`, `bp_finance`, `organization_admin`, `company_admin`)    This API can be used by admin (`superadmin`, `bp_admin`, `bp_finance`, `organization_admin`, `company_admin`) users to create a join company invitation to a Rainbow user for a given company.       > `superadmin` can invite users to join all Rainbow companies    >    > `bp_admin` and `bp_finance` can only invite users to join their own company or End Customer companies for which their company is the BP company.    > `organization_admin` can only invite users to join companies being under their organisation.    > `company_admin` can only invite users to join their company.       ### Users can be invited:    #### by `email`    * by `email`:    * if no user is found with the provided email as loginEmail:      * an invitation to create his account in Rainbow and join the company is sent to the provided email address.     * User will be able to create his account using API [POST /api/rainbow/enduser/v1.0/users/self-register][0].     * InvitationId from the email link should be provided as joinCompanyInvitationId parameter of this API.    In that case, the join company invitation will be accepted and the user is created in the inviting company.     * If joinCompanyInvitationId is not provided, if the user registers with the same loginEmail than the join company invitation email, the join company invitation is auto-accepted and the user is created directly in the inviting company.     * If previous join company invitation has already been sent for another company to this email, the previous one is deleted and is replaced by a new join company invitation for the provided companyId.    In this case, admins of the other company are notified with the following XMPP message:         ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"delete\" id='582048dfe2e68a79f4979624'       status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ```   * if the loginEmail of a Rainbow user matches the provided email:      * user can only be invited if he is in the default company (otherwise an error is thrown)     * an invitation to join admin's company is sent by email and with an XMPP message:         ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"create\" id='57cd5922d341df5812bbcb72'       status='pending' type='received' xmlns='jabber:iq:configuration'/> </message> ```           * It is possible for an existing Rainbow user to be invited by several admins of different companies.     * Invited user is able to list join company invitations he received using API [GET /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations][1]     * Invited user is able to accept a join company invitation using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/accept][2]     * Invited user is able to decline a join company invitation using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/decline][3] * by Rainbow user id (`invitedUserId`):    * if no user is found with the provided invitedUserId, an error 404 is returned   * otherwise, an invitation to join admin's company is sent by email and with an XMPP message.    Same documentation than existing user invited by email apply (see above).     For every use cases detailed above, all company administrators of the provided companyId are notified about the join company request creation with the following XMPP message:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"create\" id='57cd5922d341df5812bbcb72'      status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ```       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations  [0]: /enduser/#api-users-enduser_SelfRegisterUsers [1]: #api-join_company_invitations-enduser_GetJoinCompanyInvitations [2]: #api-join_company_invitations-enduser_PostAcceptJoinCompanyInvitation [3]: #api-join_company_invitations-enduser_PostDeclineJoinCompanyInvitation
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/AdminPostJoinCompanyInvite} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostJoinCompanyInviteSuccess}
     */
    this.adminPostJoinCompanyInvite = function(companyId, body) {
      return this.adminPostJoinCompanyInviteWithHttpInfo(companyId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all join company invitations
     * This API can be used by company `admin` users to list invitations he sent to Rainbow users so that they join his company.       Join company invitations allow users to join the related company using:   * API [POST /api/rainbow/enduser/v1.0/users/self-register][0] if invited email does not exist in Rainbow, * API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/accept][1] if invited email matched an existing Rainbow user's loginEmail.     Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations?status=pending    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations?status=accepted&status=auto-accepted  [0]: /enduser/#api-users-enduser_SelfRegisterUsers [1]: /enduser/#api-join_company_invitations-enduser_PostAcceptJoinCompanyInvitation
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.status List all join company invitations having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less invitation details in response.    - `small`: id, companyId, invitedUserId, invitedUserLoginEmail, invitingAdminId, status    - `medium`: id, companyId, companyName, invitedUserId, invitedUserLoginEmail, invitingAdminId, invitingAdminLoginEmail, status, lastNotificationDate, invitingDate, acceptationDate, declinationDate    - `full`: all join company invitation fields
     * @param {Number} opts.limit Allow to specify the number of invitations to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first invitation to retrieve (first invitation if not specified, i.e. offset=0). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort invitation list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting invitation list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetJoinCompanyInvitationsSuccess} and HTTP response
     */
    this.getJoinCompanyInvitationsWithHttpInfo = function(companyId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getJoinCompanyInvitations");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getJoinCompanyInvitations");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
        'status': opts['status'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetJoinCompanyInvitationsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/join-companies/invitations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all join company invitations
     * This API can be used by company `admin` users to list invitations he sent to Rainbow users so that they join his company.       Join company invitations allow users to join the related company using:   * API [POST /api/rainbow/enduser/v1.0/users/self-register][0] if invited email does not exist in Rainbow, * API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/accept][1] if invited email matched an existing Rainbow user's loginEmail.     Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations?status=pending    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations?status=accepted&status=auto-accepted  [0]: /enduser/#api-users-enduser_SelfRegisterUsers [1]: /enduser/#api-join_company_invitations-enduser_PostAcceptJoinCompanyInvitation
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.status List all join company invitations having the provided status(es)
     * @param {String} opts.format Allows to retrieve more or less invitation details in response.    - `small`: id, companyId, invitedUserId, invitedUserLoginEmail, invitingAdminId, status    - `medium`: id, companyId, companyName, invitedUserId, invitedUserLoginEmail, invitingAdminId, invitingAdminLoginEmail, status, lastNotificationDate, invitingDate, acceptationDate, declinationDate    - `full`: all join company invitation fields
     * @param {Number} opts.limit Allow to specify the number of invitations to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first invitation to retrieve (first invitation if not specified, i.e. offset=0). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort invitation list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting invitation list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetJoinCompanyInvitationsSuccess}
     */
    this.getJoinCompanyInvitations = function(companyId, accept, opts) {
      return this.getJoinCompanyInvitationsWithHttpInfo(companyId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a join company invitation
     * This API can be used by company `admin` users to get a join company invitation he sent to a Rainbow user so that he join his company.       Join company invitations allow users to join the related company using:   * API [POST /api/rainbow/enduser/v1.0/users/self-register][0] if invited email does not exist in Rainbow, * API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/accept][1] if invited email matched an existing Rainbow user's loginEmail.     Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations/5819ed7c9547b313509237d6  [0]: /enduser/#api-users-enduser_SelfRegisterUsers [1]: /enduser/#api-join_company_invitations-enduser_PostAcceptJoinCompanyInvitation
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetJoinCompanyInviteByIdSuccess} and HTTP response
     */
    this.getJoinCompanyInviteByIdWithHttpInfo = function(companyId, invitationId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getJoinCompanyInviteById");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling getJoinCompanyInviteById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getJoinCompanyInviteById");
      }

      var pathParams = {
        'companyId': companyId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetJoinCompanyInviteByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/join-companies/invitations/{invitationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a join company invitation
     * This API can be used by company `admin` users to get a join company invitation he sent to a Rainbow user so that he join his company.       Join company invitations allow users to join the related company using:   * API [POST /api/rainbow/enduser/v1.0/users/self-register][0] if invited email does not exist in Rainbow, * API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/invitations/:invitationId/accept][1] if invited email matched an existing Rainbow user's loginEmail.     Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations/5819ed7c9547b313509237d6  [0]: /enduser/#api-users-enduser_SelfRegisterUsers [1]: /enduser/#api-join_company_invitations-enduser_PostAcceptJoinCompanyInvitation
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetJoinCompanyInviteByIdSuccess}
     */
    this.getJoinCompanyInviteById = function(companyId, invitationId, accept) {
      return this.getJoinCompanyInviteByIdWithHttpInfo(companyId, invitationId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel a join company invitation
     * This API can be used by company `admin` users to cancel a join company invitation already sent for his company to a given user / email.       Invitation must be pending, declined or failed (otherwise error 409 is returned).       Once invitation has been canceled, user won't be able to accept or decline it anymore.       All company admins are notified with an XMPP message that the invitation has been canceled:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"update\" id='57cd5922d341df5812bbcb72'      status='canceled' type='sent' xmlns='jabber:iq:configuration'/> </message> ```       User (if he exist) is notified with an XMPP message that the invitation has been canceled:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"update\" id='57cd5922d341df5812bbcb72'      status='canceled' type='received' xmlns='jabber:iq:configuration'/> </message> ```       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations/5819ed7c9547b313509237d6/cancel
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @param {module:model/PutCancelJoinCompanyInviteById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutCancelJoinCompanyInviteByIdSuccess} and HTTP response
     */
    this.putCancelJoinCompanyInviteByIdWithHttpInfo = function(companyId, invitationId, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling putCancelJoinCompanyInviteById");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling putCancelJoinCompanyInviteById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCancelJoinCompanyInviteById");
      }

      var pathParams = {
        'companyId': companyId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PutCancelJoinCompanyInviteByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/join-companies/invitations/{invitationId}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a join company invitation
     * This API can be used by company `admin` users to cancel a join company invitation already sent for his company to a given user / email.       Invitation must be pending, declined or failed (otherwise error 409 is returned).       Once invitation has been canceled, user won't be able to accept or decline it anymore.       All company admins are notified with an XMPP message that the invitation has been canceled:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"update\" id='57cd5922d341df5812bbcb72'      status='canceled' type='sent' xmlns='jabber:iq:configuration'/> </message> ```       User (if he exist) is notified with an XMPP message that the invitation has been canceled:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"update\" id='57cd5922d341df5812bbcb72'      status='canceled' type='received' xmlns='jabber:iq:configuration'/> </message> ```       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations/5819ed7c9547b313509237d6/cancel
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @param {module:model/PutCancelJoinCompanyInviteById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutCancelJoinCompanyInviteByIdSuccess}
     */
    this.putCancelJoinCompanyInviteById = function(companyId, invitationId, body) {
      return this.putCancelJoinCompanyInviteByIdWithHttpInfo(companyId, invitationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Tag as failed a join company invitation
     * This API can be used by a `superadmin` to tag an invitation sent by companies `admin` as 'failed'.    This API can only be used by a superadmin    Only invitations with the status 'pending' can be tagged.       Inviting admin is notified with an XMPP message that the invitation has been failed.    The XMPP message is the following:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite id='57cd5922d341df5812bbcb72' action=\"update\"      type='sent' status='failed' xmlns='jabber:iq:configuration'/> </message> ```    
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutFailedJoinCompanyInviteByIdSuccess} and HTTP response
     */
    this.putFailedJoinCompanyInviteByIdWithHttpInfo = function(companyId, invitationId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling putFailedJoinCompanyInviteById");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling putFailedJoinCompanyInviteById");
      }

      var pathParams = {
        'companyId': companyId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PutFailedJoinCompanyInviteByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/join-companies/invitations/{invitationId}/failed', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Tag as failed a join company invitation
     * This API can be used by a `superadmin` to tag an invitation sent by companies `admin` as 'failed'.    This API can only be used by a superadmin    Only invitations with the status 'pending' can be tagged.       Inviting admin is notified with an XMPP message that the invitation has been failed.    The XMPP message is the following:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite id='57cd5922d341df5812bbcb72' action=\"update\"      type='sent' status='failed' xmlns='jabber:iq:configuration'/> </message> ```    
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutFailedJoinCompanyInviteByIdSuccess}
     */
    this.putFailedJoinCompanyInviteById = function(companyId, invitationId) {
      return this.putFailedJoinCompanyInviteByIdWithHttpInfo(companyId, invitationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Re-send a join company invitation
     * This API can be used by company `admin` users to re-send a join company invitation already sent for his company to a given user / email.       If invitation is canceled or declined or failed, it is set back to pending and then re-sent.    If invitation is accepted or auto-accepted, error 409 is returned.       Invited user receives a new email notification.    All company admins are notified with an XMPP message that the invitation has been re-sent:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"re-send\" id='57cd5922d341df5812bbcb72'      status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ```       User (if he exist) is notified with an XMPP message that the invitation has been re-sent:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"re-send\" id='57cd5922d341df5812bbcb72'      status='pending' type='received' xmlns='jabber:iq:configuration'/> </message> ```       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations/5819ed7c9547b313509237d6/re-send
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @param {module:model/ResendJoinCompanyInviteById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResendJoinCompanyInviteByIdSuccess} and HTTP response
     */
    this.resendJoinCompanyInviteByIdWithHttpInfo = function(companyId, invitationId, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling resendJoinCompanyInviteById");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling resendJoinCompanyInviteById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resendJoinCompanyInviteById");
      }

      var pathParams = {
        'companyId': companyId,
        'invitationId': invitationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResendJoinCompanyInviteByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/join-companies/invitations/{invitationId}/re-send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Re-send a join company invitation
     * This API can be used by company `admin` users to re-send a join company invitation already sent for his company to a given user / email.       If invitation is canceled or declined or failed, it is set back to pending and then re-sent.    If invitation is accepted or auto-accepted, error 409 is returned.       Invited user receives a new email notification.    All company admins are notified with an XMPP message that the invitation has been re-sent:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"re-send\" id='57cd5922d341df5812bbcb72'      status='pending' type='sent' xmlns='jabber:iq:configuration'/> </message> ```       User (if he exist) is notified with an XMPP message that the invitation has been re-sent:        ```html <message type='management' id='122'         from='jid_from@openrainbow.com'         to='jid_to@openrainbow.com'         xmlns='jabber:client'>      <joincompanyinvite action=\"re-send\" id='57cd5922d341df5812bbcb72'      status='pending' type='received' xmlns='jabber:iq:configuration'/> </message> ```       Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/companies/5703d0d49ccf39843c7ef897/join-companies/invitations/5819ed7c9547b313509237d6/re-send
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} invitationId Join company invitation unique identifier (like 5819ed7c9547b313509237d6)
     * @param {module:model/ResendJoinCompanyInviteById} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResendJoinCompanyInviteByIdSuccess}
     */
    this.resendJoinCompanyInviteById = function(companyId, invitationId, body) {
      return this.resendJoinCompanyInviteByIdWithHttpInfo(companyId, invitationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
