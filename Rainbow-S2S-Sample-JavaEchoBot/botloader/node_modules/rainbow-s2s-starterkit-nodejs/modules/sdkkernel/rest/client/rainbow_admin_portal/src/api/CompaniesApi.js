/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteCompaniesSuccess', 'model/GetCompaniesAdministratorsSuccess', 'model/GetCompaniesIdSuccess', 'model/GetCompaniesServiceDescriptionSuccess', 'model/GetCompaniesSuccess', 'model/GetDefaultCompanySuccess', 'model/PostCompanies', 'model/PostCompaniesSuccess', 'model/PutCompanies', 'model/PutCompaniesSuccess', 'model/SetCompanyCustomisationSuccess', 'model/SetCompanyFeatureCustomisationSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteCompaniesSuccess'), require('../model/GetCompaniesAdministratorsSuccess'), require('../model/GetCompaniesIdSuccess'), require('../model/GetCompaniesServiceDescriptionSuccess'), require('../model/GetCompaniesSuccess'), require('../model/GetDefaultCompanySuccess'), require('../model/PostCompanies'), require('../model/PostCompaniesSuccess'), require('../model/PutCompanies'), require('../model/PutCompaniesSuccess'), require('../model/SetCompanyCustomisationSuccess'), require('../model/SetCompanyFeatureCustomisationSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.CompaniesApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.DeleteCompaniesSuccess, root.RainbowAdminPortal.GetCompaniesAdministratorsSuccess, root.RainbowAdminPortal.GetCompaniesIdSuccess, root.RainbowAdminPortal.GetCompaniesServiceDescriptionSuccess, root.RainbowAdminPortal.GetCompaniesSuccess, root.RainbowAdminPortal.GetDefaultCompanySuccess, root.RainbowAdminPortal.PostCompanies, root.RainbowAdminPortal.PostCompaniesSuccess, root.RainbowAdminPortal.PutCompanies, root.RainbowAdminPortal.PutCompaniesSuccess, root.RainbowAdminPortal.SetCompanyCustomisationSuccess, root.RainbowAdminPortal.SetCompanyFeatureCustomisationSuccess);
  }
}(this, function(ApiClient, DeleteCompaniesSuccess, GetCompaniesAdministratorsSuccess, GetCompaniesIdSuccess, GetCompaniesServiceDescriptionSuccess, GetCompaniesSuccess, GetDefaultCompanySuccess, PostCompanies, PostCompaniesSuccess, PutCompanies, PutCompaniesSuccess, SetCompanyCustomisationSuccess, SetCompanyFeatureCustomisationSuccess) {
  'use strict';

  /**
   * Companies service.
   * @module api/CompaniesApi
   * @version 1.82.0
   */

  /**
   * Constructs a new CompaniesApi. 
   * @alias module:api/CompaniesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a company
     * This API allows administrators to delete a company.       Users with `superadmin` role can delete any company (except default and terminated companies).       Users with `bp_admin` or `bp_finance` role can only delete companies of their End Customers (i.e. all the companies having bpId equal to their companyId).       Users with `admin` role can delete companies they can manage. That is to say:   * an `organization_admin` can delete companies he manages (i.e. companies having organisationId equal to his organisationId) * a `company_admin` can only delete his company     A company can be deleted only if :   * it's not the default company nor the terminated company * in case of BP company, it's not linked to EC / BP IR companies which are not themselves terminated * it's not linked to site(s) * it has no subscription(s) * it's not already seen as terminated (status equal terminated) * there are no more users in this company (except for company_admin asking to delete his company if he is alone in it)     If company has default subscriptions and/or subscriptions with status equal terminated, company won't be deleted but only disabled (status and name of company changed to terminated)    Note that following data linked to the company will be deleted too :   * join company link(s) * join company invitation(s) * join company request(s) * avatar(s) * banner(s)  
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteCompaniesSuccess} and HTTP response
     */
    this.deleteCompaniesWithHttpInfo = function(companyId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteCompanies");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteCompanies");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteCompaniesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a company
     * This API allows administrators to delete a company.       Users with `superadmin` role can delete any company (except default and terminated companies).       Users with `bp_admin` or `bp_finance` role can only delete companies of their End Customers (i.e. all the companies having bpId equal to their companyId).       Users with `admin` role can delete companies they can manage. That is to say:   * an `organization_admin` can delete companies he manages (i.e. companies having organisationId equal to his organisationId) * a `company_admin` can only delete his company     A company can be deleted only if :   * it's not the default company nor the terminated company * in case of BP company, it's not linked to EC / BP IR companies which are not themselves terminated * it's not linked to site(s) * it has no subscription(s) * it's not already seen as terminated (status equal terminated) * there are no more users in this company (except for company_admin asking to delete his company if he is alone in it)     If company has default subscriptions and/or subscriptions with status equal terminated, company won't be deleted but only disabled (status and name of company changed to terminated)    Note that following data linked to the company will be deleted too :   * join company link(s) * join company invitation(s) * join company request(s) * avatar(s) * banner(s)  
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteCompaniesSuccess}
     */
    this.deleteCompanies = function(companyId, accept) {
      return this.deleteCompaniesWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all companies
     * This API allows administrator to retrieve companies they can administrate.       Users with 'superadmin', 'support' or 'business_admin' role can retrieve all companies.       Users with admin role (and not having superadmin nor support role) can only retrieve their own company and companies they can manage, i.e.:   * organisation admins can retrieve all companies being in their organisation, * bp admins or bp finance of BP DR or BP IR companies can retrieve their company and all of their EC companies (i.e. all companies for which their company is the BP), * bp admins or bp finance of BP VAD companies can retrieve their company, all of their BP IR and EC companies, and all the EC companies linked to their BP IR companies, * company admins and site admin can only retrieve their own company.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies?name=My com&format=small&limit=100&offset=0&sortField=name&sortOrder=-1 
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less company details in response.    - `small`: _id, name    - `medium`: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape, visibility    - `full` for superadmin, support, business_admin, bp_admin and bp_finance: All fields    - `full` for admin: All fields except BP fields (bpType, bpBusinessModel, bpApplicantNumber, bpCRDid, bpHasRightToSell, bpHasRightToConnect, bpIsContractAccepted, bpContractAcceptationInfo)
     * @param {String} opts.bpId Allows to filter companies list on bpId field.    This filter allow to get all the End Customer companies associated to a given Business Partner company.       Only users with role `superadmin`, `support`, `business_admin`, `bp_admin` or `bp_finance` can use this filter.    Users with role `bp_admin` or `bp_finance` can use this filter on their own company.
     * @param {String} opts.catalogId Allows to filter companies list on catalogId field.    This filter allow to get all the companies linked to a given catalogId.       Only users with role `superadmin`, `support` or `business_admin` can use this filter.
     * @param {String} opts.offerId Allows to filter companies list on companies having subscribed to the provided offerId.
     * @param {Boolean} opts.offerCanBeSold Allows to filter companies list on companies having subscribed to offers with canBeSold=true.    This filter can only be used with the value true (false is not relevant, as all companies have a subscription to Essential which has canBeSold=false, so all companies would match offerCanBeSold=false).
     * @param {String} opts.externalReference Allows to filter companies list on companies based on externalReference field.    The search is done on externalReference starting with the input characters, case sensitive (ex: ABC will match companies with externalReference ABC, ABCD, ABC12... ; but externalReference abc, AABC, 1ABC, ... will not match).       Only users with role `superadmin`, `support`, `business_admin`, `bp_admin` or `bp_finance` can use this filter.
     * @param {String} opts.externalReference2 Allows to filter companies list on companies based on externalReference2 field.    The search is done on externalReference2 starting with the input characters, case sensitive (ex: ABC will match companies with externalReference2 ABC, ABCD, ABC12... ; but externalReference2 abc, AABC, 1ABC, ... will not match).       Only users with role `superadmin`, `support`, `business_admin`, `bp_admin` or `bp_finance` can use this filter.
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first company to retrieve (first company if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort company list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting company list.
     * @param {String} opts.name Allows to filter companies list on the given keyword(s) on field name.       The filtering is case insensitive and on partial name match: all companies **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _comp_, companies with the following names are match the filter 'My company', 'Company', 'A comp 1', 'Comp of comps', ...
     * @param {String} opts.status Allows to filter companies list on the provided status(es)
     * @param {String} opts.visibility Allows to filter companies list on the provided visibility(ies)
     * @param {String} opts.organisationId Allows to filter companies list on the organisationIds provided in this option.       This filter can only be used if user has role(s) `superadmin`, `support`, `bp_admin` or `admin`
     * @param {Boolean} opts.isBP Allows to filter companies list on isBP field:   * true returns only Business Partner companies, * false return only companies which are not Business Partner.     This filter can only be used if user has role(s) `superadmin`, `support`, `bp_admin` or `admin`.
     * @param {Boolean} opts.hasBP Allows to filter companies list on companies being linked or not to a BP:   * true returns only companies linked to a BP (BP IR companies are also returned), * false return only companies which are not linked to a BP.     This filter can only be used if user has role(s) `superadmin`, `support` or `bp_admin`.    Users with role `bp_admin` can only use this filter with value `false`.
     * @param {String} opts.bpType Allows to filter companies list on bpType field.    This filter allow to get all the Business Partner companies from a given bpType.       Only users with role `superadmin`, `support` or `bp_admin` can use this filter.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCompaniesSuccess} and HTTP response
     */
    this.getCompaniesWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCompanies");
      }

      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'bpId': opts['bpId'],
        'catalogId': opts['catalogId'],
        'offerId': opts['offerId'],
        'offerCanBeSold': opts['offerCanBeSold'],
        'externalReference': opts['externalReference'],
        'externalReference2': opts['externalReference2'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'name': opts['name'],
        'status': opts['status'],
        'visibility': opts['visibility'],
        'organisationId': opts['organisationId'],
        'isBP': opts['isBP'],
        'hasBP': opts['hasBP'],
        'bpType': opts['bpType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCompaniesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all companies
     * This API allows administrator to retrieve companies they can administrate.       Users with 'superadmin', 'support' or 'business_admin' role can retrieve all companies.       Users with admin role (and not having superadmin nor support role) can only retrieve their own company and companies they can manage, i.e.:   * organisation admins can retrieve all companies being in their organisation, * bp admins or bp finance of BP DR or BP IR companies can retrieve their company and all of their EC companies (i.e. all companies for which their company is the BP), * bp admins or bp finance of BP VAD companies can retrieve their company, all of their BP IR and EC companies, and all the EC companies linked to their BP IR companies, * company admins and site admin can only retrieve their own company.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies?name=My com&format=small&limit=100&offset=0&sortField=name&sortOrder=-1 
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less company details in response.    - `small`: _id, name    - `medium`: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape, visibility    - `full` for superadmin, support, business_admin, bp_admin and bp_finance: All fields    - `full` for admin: All fields except BP fields (bpType, bpBusinessModel, bpApplicantNumber, bpCRDid, bpHasRightToSell, bpHasRightToConnect, bpIsContractAccepted, bpContractAcceptationInfo)
     * @param {String} opts.bpId Allows to filter companies list on bpId field.    This filter allow to get all the End Customer companies associated to a given Business Partner company.       Only users with role `superadmin`, `support`, `business_admin`, `bp_admin` or `bp_finance` can use this filter.    Users with role `bp_admin` or `bp_finance` can use this filter on their own company.
     * @param {String} opts.catalogId Allows to filter companies list on catalogId field.    This filter allow to get all the companies linked to a given catalogId.       Only users with role `superadmin`, `support` or `business_admin` can use this filter.
     * @param {String} opts.offerId Allows to filter companies list on companies having subscribed to the provided offerId.
     * @param {Boolean} opts.offerCanBeSold Allows to filter companies list on companies having subscribed to offers with canBeSold=true.    This filter can only be used with the value true (false is not relevant, as all companies have a subscription to Essential which has canBeSold=false, so all companies would match offerCanBeSold=false).
     * @param {String} opts.externalReference Allows to filter companies list on companies based on externalReference field.    The search is done on externalReference starting with the input characters, case sensitive (ex: ABC will match companies with externalReference ABC, ABCD, ABC12... ; but externalReference abc, AABC, 1ABC, ... will not match).       Only users with role `superadmin`, `support`, `business_admin`, `bp_admin` or `bp_finance` can use this filter.
     * @param {String} opts.externalReference2 Allows to filter companies list on companies based on externalReference2 field.    The search is done on externalReference2 starting with the input characters, case sensitive (ex: ABC will match companies with externalReference2 ABC, ABCD, ABC12... ; but externalReference2 abc, AABC, 1ABC, ... will not match).       Only users with role `superadmin`, `support`, `business_admin`, `bp_admin` or `bp_finance` can use this filter.
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first company to retrieve (first company if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort company list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting company list.
     * @param {String} opts.name Allows to filter companies list on the given keyword(s) on field name.       The filtering is case insensitive and on partial name match: all companies **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _comp_, companies with the following names are match the filter 'My company', 'Company', 'A comp 1', 'Comp of comps', ...
     * @param {String} opts.status Allows to filter companies list on the provided status(es)
     * @param {String} opts.visibility Allows to filter companies list on the provided visibility(ies)
     * @param {String} opts.organisationId Allows to filter companies list on the organisationIds provided in this option.       This filter can only be used if user has role(s) `superadmin`, `support`, `bp_admin` or `admin`
     * @param {Boolean} opts.isBP Allows to filter companies list on isBP field:   * true returns only Business Partner companies, * false return only companies which are not Business Partner.     This filter can only be used if user has role(s) `superadmin`, `support`, `bp_admin` or `admin`.
     * @param {Boolean} opts.hasBP Allows to filter companies list on companies being linked or not to a BP:   * true returns only companies linked to a BP (BP IR companies are also returned), * false return only companies which are not linked to a BP.     This filter can only be used if user has role(s) `superadmin`, `support` or `bp_admin`.    Users with role `bp_admin` can only use this filter with value `false`.
     * @param {String} opts.bpType Allows to filter companies list on bpType field.    This filter allow to get all the Business Partner companies from a given bpType.       Only users with role `superadmin`, `support` or `bp_admin` can use this filter.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCompaniesSuccess}
     */
    this.getCompanies = function(accept, opts) {
      return this.getCompaniesWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get company administrators
     * This API allows administrators to list users being administrator of a company.       Users with `superadmin`, `support` role can list administrators from any company.       Users with `bp_admin` or `bp_finance` role can only list administrators for companies being End Customers of their BP company (i.e. all the companies having bpId equal to their companyId).       Users with `admin` role can only list administrators belonging to companies they can manage. That is to say:   * an organization_admin can get list administrators belonging to each companies he manages (i.e. companies having organisationId equal to his organisationId) * a company_admin gets list administrators being in his company * a site_admin gets nothing        This API can return more or less user information using format option in query string arguments (default is small).    This API implement pagination, using limit and offset options in query string arguments (default is limit on 100 users). Result sorting can also be done using sort and order options (default is sort on displayName on ascending order).       Examples:   * basic: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/administrators * with format options: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/administrators?format=full * with pagination options: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/administrators?limit=10&offset=20&sortField=loginEmail&sortOrder=-1  
     * @param {String} companyId Company for which list of administrators is requested
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less user details in response.    - `small`: id, loginEmail, firstName, lastName, displayName, companyId, companyName, isTerminated    - `medium`: id, loginEmail, firstName, lastName, displayName, jid_im, jid_tel, companyId, companyName, lastUpdateDate, lastAvatarUpdateDate, isTerminated, guestMode    - `full`: all user fields
     * @param {Number} opts.limit Allow to specify the number of users to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first user to retrieve (first user if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort user list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting user list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCompaniesAdministratorsSuccess} and HTTP response
     */
    this.getCompaniesAdministratorsWithHttpInfo = function(companyId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompaniesAdministrators");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCompaniesAdministrators");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCompaniesAdministratorsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/administrators', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get company administrators
     * This API allows administrators to list users being administrator of a company.       Users with `superadmin`, `support` role can list administrators from any company.       Users with `bp_admin` or `bp_finance` role can only list administrators for companies being End Customers of their BP company (i.e. all the companies having bpId equal to their companyId).       Users with `admin` role can only list administrators belonging to companies they can manage. That is to say:   * an organization_admin can get list administrators belonging to each companies he manages (i.e. companies having organisationId equal to his organisationId) * a company_admin gets list administrators being in his company * a site_admin gets nothing        This API can return more or less user information using format option in query string arguments (default is small).    This API implement pagination, using limit and offset options in query string arguments (default is limit on 100 users). Result sorting can also be done using sort and order options (default is sort on displayName on ascending order).       Examples:   * basic: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/administrators * with format options: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/administrators?format=full * with pagination options: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/administrators?limit=10&offset=20&sortField=loginEmail&sortOrder=-1  
     * @param {String} companyId Company for which list of administrators is requested
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less user details in response.    - `small`: id, loginEmail, firstName, lastName, displayName, companyId, companyName, isTerminated    - `medium`: id, loginEmail, firstName, lastName, displayName, jid_im, jid_tel, companyId, companyName, lastUpdateDate, lastAvatarUpdateDate, isTerminated, guestMode    - `full`: all user fields
     * @param {Number} opts.limit Allow to specify the number of users to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first user to retrieve (first user if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort user list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting user list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCompaniesAdministratorsSuccess}
     */
    this.getCompaniesAdministrators = function(companyId, accept, opts) {
      return this.getCompaniesAdministratorsWithHttpInfo(companyId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a company data
     * Users with 'superadmin', 'support' or 'business_admin' role can retrieve any company.    **Users with admin role (and not having superadmin nor support role) can only retrieve their own company and companies they manage** (case of organization_admin). They also have right to retrieve their BP company if they have one.    **Users with bp_admin of bp_finance role (and not having superadmin nor support role) can only retrieve their own company and companies they manage** (their EC companies). They also have right to retrieve their BP company if they have one. In the case of bp_admin or bp_finance of BP VAD companies, they can also retrieve EC companies being linked to their BP IR companies.       If user request his own company or a company he manages (superadmin, support, organisation admin), `numberUsers` field is returned with the number of Rainbow users being in this company.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/569d0ef3ef7816921f7e94fa
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less company details in response.    - `small`: id, name    - `medium`: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape, visibility    - `full` for superadmin, support, business_admin, bp_admin and bp_finance: All fields, including (dataLocation)    - `full` for admin: All fields including BP field 'bpType' and dataLocation, but without fields (subscriptions, bsCompanyId, zuoraCompanyId, bpBusinessModel, bpApplicantNumber, bpCRDid, bpIsContractAccepted, bpContractAcceptationInfo, bpHasRightToSell, bpHasRightToConnect)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCompaniesIdSuccess} and HTTP response
     */
    this.getCompaniesIdWithHttpInfo = function(companyId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompaniesId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCompaniesId");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCompaniesIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a company data
     * Users with 'superadmin', 'support' or 'business_admin' role can retrieve any company.    **Users with admin role (and not having superadmin nor support role) can only retrieve their own company and companies they manage** (case of organization_admin). They also have right to retrieve their BP company if they have one.    **Users with bp_admin of bp_finance role (and not having superadmin nor support role) can only retrieve their own company and companies they manage** (their EC companies). They also have right to retrieve their BP company if they have one. In the case of bp_admin or bp_finance of BP VAD companies, they can also retrieve EC companies being linked to their BP IR companies.       If user request his own company or a company he manages (superadmin, support, organisation admin), `numberUsers` field is returned with the number of Rainbow users being in this company.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/569d0ef3ef7816921f7e94fa
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less company details in response.    - `small`: id, name    - `medium`: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape, visibility    - `full` for superadmin, support, business_admin, bp_admin and bp_finance: All fields, including (dataLocation)    - `full` for admin: All fields including BP field 'bpType' and dataLocation, but without fields (subscriptions, bsCompanyId, zuoraCompanyId, bpBusinessModel, bpApplicantNumber, bpCRDid, bpIsContractAccepted, bpContractAcceptationInfo, bpHasRightToSell, bpHasRightToConnect)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCompaniesIdSuccess}
     */
    this.getCompaniesId = function(companyId, accept, opts) {
      return this.getCompaniesIdWithHttpInfo(companyId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get company service description file
     * This API allows administrators to get service description pdf file uploaded by superadmin
     * @param {String} companyId Company for which service description file is requested
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCompaniesServiceDescriptionSuccess} and HTTP response
     */
    this.getCompaniesServiceDescriptionWithHttpInfo = function(companyId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompaniesServiceDescription");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCompaniesServiceDescription");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCompaniesServiceDescriptionSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/service-description', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get company service description file
     * This API allows administrators to get service description pdf file uploaded by superadmin
     * @param {String} companyId Company for which service description file is requested
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCompaniesServiceDescriptionSuccess}
     */
    this.getCompaniesServiceDescription = function(companyId, accept) {
      return this.getCompaniesServiceDescriptionWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get company App Customisation
     * This API allows administrators to list the customisation elements of the UI for the company.       Retrieves the application UI customisation elements (e.g. background, foreground, text or border colors) for the given company.    The list of supported UI elements is the following (naming convention given from the desktop UI):   * mainBackgroundColor: Background color on the side of the main pane. * secondBackgroundColor: Background color inside the main pane (Bubbles, meetings, Contacts...). * asideBackgroundColor: Background color of left pane (e.g. conversations). * headerBackgroundColor: Background color of top menu (The one grouping action buttons : Life, Bubbles...). * headerContrastedBackgroundColor: Background color of hover in top menu. * tabsMenuBackgroundColor: Background color of search bars and tabs. * footerBackgroundColor: Background color of footer bar. * contrastedBackgroundColor: Default color of hover in left pane. * activeBackgroundColor: Default color of selected item in left pane. * homeTopBackgroundColor: Default color of the top background in the home page. * homeBackgroundColor: Default color of the bottom background in the home page. * buttonBackgroundColor: Background color of square button. * mainTitlesColor: Default color of titles (Bubbles, Meetings...) and selected item in top menu. * contrastedTitlesColor: Default color of text in top menu. * contrastedTextColor: Default color of text in search bars. * contrastedHoverTextColor: Default hover color of text in top menu. * textColor: Default color of text in left menu. * textHoverColor: Default hover color of text in left menu. * textActiveColor: Default color of selected text in left menu. * buttonTextColor: Default color of text in square button. * badgeCounterColor: Background color of counters (e.g. missed calls). * contrastedIconColor: Default color of icon for groups contact. * shadowsColor: Default color of shadows in main pane. * asideBorderColor: Default color of border between conversation pane and main pane. * contrastedBordersColor: Default color of borders in top menu.  
     * @param {String} companyId Company for which list of custom elements is requested.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getCompanyAppCustomisationWithHttpInfo = function(companyId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompanyAppCustomisation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCompanyAppCustomisation");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/app-customisation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get company App Customisation
     * This API allows administrators to list the customisation elements of the UI for the company.       Retrieves the application UI customisation elements (e.g. background, foreground, text or border colors) for the given company.    The list of supported UI elements is the following (naming convention given from the desktop UI):   * mainBackgroundColor: Background color on the side of the main pane. * secondBackgroundColor: Background color inside the main pane (Bubbles, meetings, Contacts...). * asideBackgroundColor: Background color of left pane (e.g. conversations). * headerBackgroundColor: Background color of top menu (The one grouping action buttons : Life, Bubbles...). * headerContrastedBackgroundColor: Background color of hover in top menu. * tabsMenuBackgroundColor: Background color of search bars and tabs. * footerBackgroundColor: Background color of footer bar. * contrastedBackgroundColor: Default color of hover in left pane. * activeBackgroundColor: Default color of selected item in left pane. * homeTopBackgroundColor: Default color of the top background in the home page. * homeBackgroundColor: Default color of the bottom background in the home page. * buttonBackgroundColor: Background color of square button. * mainTitlesColor: Default color of titles (Bubbles, Meetings...) and selected item in top menu. * contrastedTitlesColor: Default color of text in top menu. * contrastedTextColor: Default color of text in search bars. * contrastedHoverTextColor: Default hover color of text in top menu. * textColor: Default color of text in left menu. * textHoverColor: Default hover color of text in left menu. * textActiveColor: Default color of selected text in left menu. * buttonTextColor: Default color of text in square button. * badgeCounterColor: Background color of counters (e.g. missed calls). * contrastedIconColor: Default color of icon for groups contact. * shadowsColor: Default color of shadows in main pane. * asideBorderColor: Default color of border between conversation pane and main pane. * contrastedBordersColor: Default color of borders in top menu.  
     * @param {String} companyId Company for which list of custom elements is requested.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getCompanyAppCustomisation = function(companyId, accept) {
      return this.getCompanyAppCustomisationWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get company App feature Customisation
     * This API allows administrators to list the features customisation elements for the company.       Retrieves the application features customisation elements (e.g. conversation pane, menu pane, services) for the given company.    The list of supported features elements is the following (naming convention given from the desktop):   * featureConversationPane: Left pane containing conversations. * callContact: Button call a contact from conversations pane. * searchContact: Search bar in the conversations pane. * featureTopPane: Top pane containing the menu. * featureServices: Services available for the users. * meeting: Allow to create a meeting. * uploadFile: Allow user to upload a file. * shareFile: Allow user to share file with other user . * callHistory: Allow user to have a call history. * createBubble: Allow user to create bubble.  
     * @param {String} companyId Company for which list of custom feature elements is requested.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getCompanyAppFeatureCustomisationWithHttpInfo = function(companyId, accept) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompanyAppFeatureCustomisation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCompanyAppFeatureCustomisation");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/app-feature-customisation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get company App feature Customisation
     * This API allows administrators to list the features customisation elements for the company.       Retrieves the application features customisation elements (e.g. conversation pane, menu pane, services) for the given company.    The list of supported features elements is the following (naming convention given from the desktop):   * featureConversationPane: Left pane containing conversations. * callContact: Button call a contact from conversations pane. * searchContact: Search bar in the conversations pane. * featureTopPane: Top pane containing the menu. * featureServices: Services available for the users. * meeting: Allow to create a meeting. * uploadFile: Allow user to upload a file. * shareFile: Allow user to share file with other user . * callHistory: Allow user to have a call history. * createBubble: Allow user to create bubble.  
     * @param {String} companyId Company for which list of custom feature elements is requested.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getCompanyAppFeatureCustomisation = function(companyId, accept) {
      return this.getCompanyAppFeatureCustomisationWithHttpInfo(companyId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get default company data
     * This API allows to get the default Rainbow company.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/default
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less company details in response.    - `small`: _id, name    - `medium`: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape    - `full` for superadmin and support: All fields    - `full` for admin: All fields except BP fields (bpType, bpBusinessModel, bpApplicantNumber, bpCRDid, bpHasRightToSell, bpHasRightToConnect, bpIsContractAccepted, bpContractAcceptationInfo)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetDefaultCompanySuccess} and HTTP response
     */
    this.getDefaultCompanyWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getDefaultCompany");
      }

      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetDefaultCompanySuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/default', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get default company data
     * This API allows to get the default Rainbow company.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/companies/default
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less company details in response.    - `small`: _id, name    - `medium`: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape    - `full` for superadmin and support: All fields    - `full` for admin: All fields except BP fields (bpType, bpBusinessModel, bpApplicantNumber, bpCRDid, bpHasRightToSell, bpHasRightToConnect, bpIsContractAccepted, bpContractAcceptationInfo)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetDefaultCompanySuccess}
     */
    this.getDefaultCompany = function(accept, opts) {
      return this.getDefaultCompanyWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a company
     * Only superadmin, BP admin, BP finance and organisation admin can create companies with this API.       Companies created by a `bp_admin` or a `bp_finance` (without organisation admin role) are automatically attached to his BP company (bpId set to BP company). They are created with the status `initializing`.    Companies created by a `bp_admin` or a `bp_finance` having also organisation admin role can be either be created in their organisation (default) or under a BP they manage in their organization (if they provide a bpId). to his BP company (bpId set to BP company). They are created with the status `initializing`.   * If BP company has `bpType` equal to `VAD`, the field `isBp` can be set to true or false: In that case, the created company will be a BP with bpType Indirect Reseller:    * If the field `isBp` is set to true, the company is created with isBP = true, bpType = 'IR', bpBusinessModel = 'resell' and bpHasRightToConnect = true (it will be a BP Indirect Reseller company linked to this BP VAD company, this BP IR company will be able to have his own EC companies attached to it)   * If the field `isBp` is set to false (or not defined), the company is created with bpId = BP companyId (it will be an End Customer company directly attached to this BP VAD company)   * The status of the company will be updated to `active` once the first invited bp_admin / bp_finance (invited using join company invitation with flag invitedToBeBpAdmin set to true) will join this company. * If BP company has `bpType` equal to `DR` or `IR`, the created company will be an End Customer company:    * The company is created with bpId = BP companyId   * The status of the company will be updated to `active` once the first invited company_admin (invited using join company invitation with flag invitedToBeCompanyAdmin set to true) will join this company.     Companies created by a `Organisation admin` are automatically attached to his organisation.       `Users` being in Default company can create their own company using API enduser/PostCompanies [POST /api/rainbow/enduser/v1.0/companies][0]      When a company is created, a subscription to the Default offer is assigned to this company. All users of this company will be assigned to this default subscription when they are created or when they arrive in the company.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A Company can't change the CENTREX status, when some sites are already created for it.  [0]: /enduser/#api-companies-enduser_PostCompanies
     * @param {module:model/PostCompanies} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostCompaniesSuccess} and HTTP response
     */
    this.postCompaniesWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCompanies");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostCompaniesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a company
     * Only superadmin, BP admin, BP finance and organisation admin can create companies with this API.       Companies created by a `bp_admin` or a `bp_finance` (without organisation admin role) are automatically attached to his BP company (bpId set to BP company). They are created with the status `initializing`.    Companies created by a `bp_admin` or a `bp_finance` having also organisation admin role can be either be created in their organisation (default) or under a BP they manage in their organization (if they provide a bpId). to his BP company (bpId set to BP company). They are created with the status `initializing`.   * If BP company has `bpType` equal to `VAD`, the field `isBp` can be set to true or false: In that case, the created company will be a BP with bpType Indirect Reseller:    * If the field `isBp` is set to true, the company is created with isBP = true, bpType = 'IR', bpBusinessModel = 'resell' and bpHasRightToConnect = true (it will be a BP Indirect Reseller company linked to this BP VAD company, this BP IR company will be able to have his own EC companies attached to it)   * If the field `isBp` is set to false (or not defined), the company is created with bpId = BP companyId (it will be an End Customer company directly attached to this BP VAD company)   * The status of the company will be updated to `active` once the first invited bp_admin / bp_finance (invited using join company invitation with flag invitedToBeBpAdmin set to true) will join this company. * If BP company has `bpType` equal to `DR` or `IR`, the created company will be an End Customer company:    * The company is created with bpId = BP companyId   * The status of the company will be updated to `active` once the first invited company_admin (invited using join company invitation with flag invitedToBeCompanyAdmin set to true) will join this company.     Companies created by a `Organisation admin` are automatically attached to his organisation.       `Users` being in Default company can create their own company using API enduser/PostCompanies [POST /api/rainbow/enduser/v1.0/companies][0]      When a company is created, a subscription to the Default offer is assigned to this company. All users of this company will be assigned to this default subscription when they are created or when they arrive in the company.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A Company can't change the CENTREX status, when some sites are already created for it.  [0]: /enduser/#api-companies-enduser_PostCompanies
     * @param {module:model/PostCompanies} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostCompaniesSuccess}
     */
    this.postCompanies = function(body) {
      return this.postCompaniesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a company
     * Users with superadmin role can update any company. Users with admin role (and not having superadmin role) can only update their own company.       Default and Terminated companies can't be renamed, and their name can't be use to rename another company
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutCompanies} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutCompaniesSuccess} and HTTP response
     */
    this.putCompaniesWithHttpInfo = function(companyId, body) {
      var postBody = body;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling putCompanies");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putCompanies");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PutCompaniesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a company
     * Users with superadmin role can update any company. Users with admin role (and not having superadmin role) can only update their own company.       Default and Terminated companies can't be renamed, and their name can't be use to rename another company
     * @param {String} companyId Company unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutCompanies} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutCompaniesSuccess}
     */
    this.putCompanies = function(companyId, body) {
      return this.putCompaniesWithHttpInfo(companyId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set company App Customisation
     * This API allows administrators to set or update the customisation elements of the UI for the company.       These elements (e.g. background, foreground, text or border colors) will then be available to the end user to customise graphical elements of the application's user interface.    See supported element names in above GET request.       The whole object will replace the existing one, if found.    The customisation object has some limitations:   * Element name can't exceed 50 characters. * Element value can't exceed 50 characters.     Example:   * PUT https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/app-customisation  
     * @param {String} companyId Company for which update of customisation elements is requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetCompanyCustomisationSuccess} and HTTP response
     */
    this.setCompanyCustomisationWithHttpInfo = function(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling setCompanyCustomisation");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SetCompanyCustomisationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/app-customisation', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set company App Customisation
     * This API allows administrators to set or update the customisation elements of the UI for the company.       These elements (e.g. background, foreground, text or border colors) will then be available to the end user to customise graphical elements of the application's user interface.    See supported element names in above GET request.       The whole object will replace the existing one, if found.    The customisation object has some limitations:   * Element name can't exceed 50 characters. * Element value can't exceed 50 characters.     Example:   * PUT https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/app-customisation  
     * @param {String} companyId Company for which update of customisation elements is requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetCompanyCustomisationSuccess}
     */
    this.setCompanyCustomisation = function(companyId) {
      return this.setCompanyCustomisationWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set company App feature Customisation
     * This API allows administrators to set or update the feature customisation elements for the company.       These elements (e.g. conversation pane, menu pane, services) will then be available to the end user to customise their rainbow application.    See supported element names in above GET request.       The whole object will replace the existing one, if found.    The customisation object has some limitations:   * Element name can't exceed 50 characters. * Element value can't exceed 50 characters.     Example:   * PUT https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/app-feature-customisation  
     * @param {String} companyId Company for which update of customisation elements is requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetCompanyFeatureCustomisationSuccess} and HTTP response
     */
    this.setCompanyFeatureCustomisationWithHttpInfo = function(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling setCompanyFeatureCustomisation");
      }

      var pathParams = {
        'companyId': companyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SetCompanyFeatureCustomisationSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/companies/{companyId}/app-feature-customisation', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set company App feature Customisation
     * This API allows administrators to set or update the feature customisation elements for the company.       These elements (e.g. conversation pane, menu pane, services) will then be available to the end user to customise their rainbow application.    See supported element names in above GET request.       The whole object will replace the existing one, if found.    The customisation object has some limitations:   * Element name can't exceed 50 characters. * Element value can't exceed 50 characters.     Example:   * PUT https://openrainbow.com/api/rainbow/admin/v1.0/companies/5749aa51245015fe0d36e968/app-feature-customisation  
     * @param {String} companyId Company for which update of customisation elements is requested.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetCompanyFeatureCustomisationSuccess}
     */
    this.setCompanyFeatureCustomisation = function(companyId) {
      return this.setCompanyFeatureCustomisationWithHttpInfo(companyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
