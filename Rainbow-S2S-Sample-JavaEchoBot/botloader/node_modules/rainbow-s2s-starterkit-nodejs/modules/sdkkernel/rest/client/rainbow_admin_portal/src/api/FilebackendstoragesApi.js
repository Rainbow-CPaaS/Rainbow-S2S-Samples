/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminFilebackendstoragesDeleteBackendsSuccess', 'model/AdminFilebackendstoragesGetBackendIdSuccess', 'model/AdminFilebackendstoragesGetBackendsSuccess', 'model/AdminFilebackendstoragesPostBackends', 'model/AdminFilebackendstoragesPostBackendsSuccess', 'model/AdminFilebackendstoragesPutBots', 'model/AdminFilebackendstoragesPutBotsSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminFilebackendstoragesDeleteBackendsSuccess'), require('../model/AdminFilebackendstoragesGetBackendIdSuccess'), require('../model/AdminFilebackendstoragesGetBackendsSuccess'), require('../model/AdminFilebackendstoragesPostBackends'), require('../model/AdminFilebackendstoragesPostBackendsSuccess'), require('../model/AdminFilebackendstoragesPutBots'), require('../model/AdminFilebackendstoragesPutBotsSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.FilebackendstoragesApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminFilebackendstoragesDeleteBackendsSuccess, root.RainbowAdminPortal.AdminFilebackendstoragesGetBackendIdSuccess, root.RainbowAdminPortal.AdminFilebackendstoragesGetBackendsSuccess, root.RainbowAdminPortal.AdminFilebackendstoragesPostBackends, root.RainbowAdminPortal.AdminFilebackendstoragesPostBackendsSuccess, root.RainbowAdminPortal.AdminFilebackendstoragesPutBots, root.RainbowAdminPortal.AdminFilebackendstoragesPutBotsSuccess);
  }
}(this, function(ApiClient, AdminFilebackendstoragesDeleteBackendsSuccess, AdminFilebackendstoragesGetBackendIdSuccess, AdminFilebackendstoragesGetBackendsSuccess, AdminFilebackendstoragesPostBackends, AdminFilebackendstoragesPostBackendsSuccess, AdminFilebackendstoragesPutBots, AdminFilebackendstoragesPutBotsSuccess) {
  'use strict';

  /**
   * Filebackendstorages service.
   * @module api/FilebackendstoragesApi
   * @version 1.82.0
   */

  /**
   * Constructs a new FilebackendstoragesApi. 
   * @alias module:api/FilebackendstoragesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a backend.
     * @param {String} backendId File backend unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminFilebackendstoragesDeleteBackendsSuccess} and HTTP response
     */
    this.adminFilebackendstoragesDeleteBackendsWithHttpInfo = function(backendId, accept) {
      var postBody = null;
      // verify the required parameter 'backendId' is set
      if (backendId === undefined || backendId === null) {
        throw new Error("Missing the required parameter 'backendId' when calling adminFilebackendstoragesDeleteBackends");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminFilebackendstoragesDeleteBackends");
      }

      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminFilebackendstoragesDeleteBackendsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/filebackendstorages/{backendId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a backend.
     * @param {String} backendId File backend unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminFilebackendstoragesDeleteBackendsSuccess}
     */
    this.adminFilebackendstoragesDeleteBackends = function(backendId, accept) {
      return this.adminFilebackendstoragesDeleteBackendsWithHttpInfo(backendId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a file backend data
     * @param {String} backendId File backend unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminFilebackendstoragesGetBackendIdSuccess} and HTTP response
     */
    this.adminFilebackendstoragesGetBackendIdWithHttpInfo = function(backendId, accept) {
      var postBody = null;
      // verify the required parameter 'backendId' is set
      if (backendId === undefined || backendId === null) {
        throw new Error("Missing the required parameter 'backendId' when calling adminFilebackendstoragesGetBackendId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminFilebackendstoragesGetBackendId");
      }

      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminFilebackendstoragesGetBackendIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/filebackendstorages/{backendId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a file backend data
     * @param {String} backendId File backend unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminFilebackendstoragesGetBackendIdSuccess}
     */
    this.adminFilebackendstoragesGetBackendId = function(backendId, accept) {
      return this.adminFilebackendstoragesGetBackendIdWithHttpInfo(backendId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all filebackendstorages
     * This API can be used to retrieve the list of file backend storage .
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less file backend storage config details in response.    - `small`: id, hostName, regionName    - `medium`: id, hostName, regionName, endPoint    - `full`: id, hostName, regionName, endPoint, tenantId, tenantName, userName, password, rootStorageURL
     * @param {Number} opts.limit Allow to specify the number of file backend storage to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first file backend storage to retrieve (first file backend if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort file backend storage list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting backend storage list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminFilebackendstoragesGetBackendsSuccess} and HTTP response
     */
    this.adminFilebackendstoragesGetBackendsWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminFilebackendstoragesGetBackends");
      }

      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminFilebackendstoragesGetBackendsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/filebackendstorages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all filebackendstorages
     * This API can be used to retrieve the list of file backend storage .
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less file backend storage config details in response.    - `small`: id, hostName, regionName    - `medium`: id, hostName, regionName, endPoint    - `full`: id, hostName, regionName, endPoint, tenantId, tenantName, userName, password, rootStorageURL
     * @param {Number} opts.limit Allow to specify the number of file backend storage to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first file backend storage to retrieve (first file backend if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort file backend storage list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting backend storage list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminFilebackendstoragesGetBackendsSuccess}
     */
    this.adminFilebackendstoragesGetBackends = function(accept, opts) {
      return this.adminFilebackendstoragesGetBackendsWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a backend
     * Rainbow File sharing leans on Openstack/Swift backends to store documents so called Objects. A Swift backend must be configured first. So that a superadmin can report the configuration using the filebackendstorages API. To give an overview of the parameters awaited, here is a short description. For more details, refer to [https://docs.openstack.org/swift/latest/index.html][0] The Swift Object Storage is defined by an endPoint. (ex: **http://swift.rainbow.rdna:5000/v3**) The Swift Object Storage system organizes data in a hierarchy, as follows:   * **Account:** Represents the top-level of the hierarchy. The goal of 'filebackendstorages' api is to manage a Swift account. The account defines a namespace for containers as a container might have the same name in two different accounts. * **Container:** Defines a namespace for objects. An object with the same name in two different containers represents two different objects. * **Object:** Stores data content, such as documents, images, and so on.  The rootStorageURL indicates the beginning of the path to access to a resource. This path lead to the account. (ex: **http://swift.rainbow.rdna:8080/v1/AUTH_a67b0e12592941488a5f53189c61022d**) The resource path has the pattern **{rootStorageUrl}/{container}/{object}** For example, if the endpoint for a Swift Object Storage is **objects.mycloud.com**, the returned URL is https://objects.mycloud.com/v1/12345678912345. The endPoint domain name is replicated in the field 'hostName'. This value has to be used inside the zone.json file managed by Rainbow operation team.  [0]: https://docs.openstack.org/swift/latest/index.html
     * @param {module:model/AdminFilebackendstoragesPostBackends} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminFilebackendstoragesPostBackendsSuccess} and HTTP response
     */
    this.adminFilebackendstoragesPostBackendsWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminFilebackendstoragesPostBackends");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminFilebackendstoragesPostBackendsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/filebackendstorages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a backend
     * Rainbow File sharing leans on Openstack/Swift backends to store documents so called Objects. A Swift backend must be configured first. So that a superadmin can report the configuration using the filebackendstorages API. To give an overview of the parameters awaited, here is a short description. For more details, refer to [https://docs.openstack.org/swift/latest/index.html][0] The Swift Object Storage is defined by an endPoint. (ex: **http://swift.rainbow.rdna:5000/v3**) The Swift Object Storage system organizes data in a hierarchy, as follows:   * **Account:** Represents the top-level of the hierarchy. The goal of 'filebackendstorages' api is to manage a Swift account. The account defines a namespace for containers as a container might have the same name in two different accounts. * **Container:** Defines a namespace for objects. An object with the same name in two different containers represents two different objects. * **Object:** Stores data content, such as documents, images, and so on.  The rootStorageURL indicates the beginning of the path to access to a resource. This path lead to the account. (ex: **http://swift.rainbow.rdna:8080/v1/AUTH_a67b0e12592941488a5f53189c61022d**) The resource path has the pattern **{rootStorageUrl}/{container}/{object}** For example, if the endpoint for a Swift Object Storage is **objects.mycloud.com**, the returned URL is https://objects.mycloud.com/v1/12345678912345. The endPoint domain name is replicated in the field 'hostName'. This value has to be used inside the zone.json file managed by Rainbow operation team.  [0]: https://docs.openstack.org/swift/latest/index.html
     * @param {module:model/AdminFilebackendstoragesPostBackends} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminFilebackendstoragesPostBackendsSuccess}
     */
    this.adminFilebackendstoragesPostBackends = function(body) {
      return this.adminFilebackendstoragesPostBackendsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a backend
     * @param {String} backendId File backend unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {module:model/AdminFilebackendstoragesPutBots} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminFilebackendstoragesPutBotsSuccess} and HTTP response
     */
    this.adminFilebackendstoragesPutBotsWithHttpInfo = function(backendId, body) {
      var postBody = body;
      // verify the required parameter 'backendId' is set
      if (backendId === undefined || backendId === null) {
        throw new Error("Missing the required parameter 'backendId' when calling adminFilebackendstoragesPutBots");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminFilebackendstoragesPutBots");
      }

      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminFilebackendstoragesPutBotsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/filebackendstorages/{backendId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a backend
     * @param {String} backendId File backend unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {module:model/AdminFilebackendstoragesPutBots} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminFilebackendstoragesPutBotsSuccess}
     */
    this.adminFilebackendstoragesPutBots = function(backendId, body) {
      return this.adminFilebackendstoragesPutBotsWithHttpInfo(backendId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
