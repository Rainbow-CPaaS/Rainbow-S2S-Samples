/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminDeleteRainbowOffersSuccess', 'model/AdminGetRainbowOfferByIdSuccess', 'model/AdminGetRainbowOffersSuccess', 'model/AdminPostRainbowOffers', 'model/AdminPostRainbowOffersSuccess', 'model/AdminPutRainbowOffers', 'model/AdminPutRainbowOffersDefault', 'model/AdminPutRainbowOffersDefaultSuccess', 'model/AdminPutRainbowOffersSuccess', 'model/GetApiRainbowAdminV10OffersSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminDeleteRainbowOffersSuccess'), require('../model/AdminGetRainbowOfferByIdSuccess'), require('../model/AdminGetRainbowOffersSuccess'), require('../model/AdminPostRainbowOffers'), require('../model/AdminPostRainbowOffersSuccess'), require('../model/AdminPutRainbowOffers'), require('../model/AdminPutRainbowOffersDefault'), require('../model/AdminPutRainbowOffersDefaultSuccess'), require('../model/AdminPutRainbowOffersSuccess'), require('../model/GetApiRainbowAdminV10OffersSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.RainbowOffersApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.AdminDeleteRainbowOffersSuccess, root.RainbowAdminPortal.AdminGetRainbowOfferByIdSuccess, root.RainbowAdminPortal.AdminGetRainbowOffersSuccess, root.RainbowAdminPortal.AdminPostRainbowOffers, root.RainbowAdminPortal.AdminPostRainbowOffersSuccess, root.RainbowAdminPortal.AdminPutRainbowOffers, root.RainbowAdminPortal.AdminPutRainbowOffersDefault, root.RainbowAdminPortal.AdminPutRainbowOffersDefaultSuccess, root.RainbowAdminPortal.AdminPutRainbowOffersSuccess, root.RainbowAdminPortal.GetApiRainbowAdminV10OffersSuccess);
  }
}(this, function(ApiClient, AdminDeleteRainbowOffersSuccess, AdminGetRainbowOfferByIdSuccess, AdminGetRainbowOffersSuccess, AdminPostRainbowOffers, AdminPostRainbowOffersSuccess, AdminPutRainbowOffers, AdminPutRainbowOffersDefault, AdminPutRainbowOffersDefaultSuccess, AdminPutRainbowOffersSuccess, GetApiRainbowAdminV10OffersSuccess) {
  'use strict';

  /**
   * RainbowOffers service.
   * @module api/RainbowOffersApi
   * @version 1.82.0
   */

  /**
   * Constructs a new RainbowOffersApi. 
   * @alias module:api/RainbowOffersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete an offer
     * This API can be used to delete an offer.
     * @param {String} offerId Offer unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminDeleteRainbowOffersSuccess} and HTTP response
     */
    this.adminDeleteRainbowOffersWithHttpInfo = function(offerId, accept) {
      var postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling adminDeleteRainbowOffers");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminDeleteRainbowOffers");
      }

      var pathParams = {
        'offerId': offerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminDeleteRainbowOffersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/offers/{offerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an offer
     * This API can be used to delete an offer.
     * @param {String} offerId Offer unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminDeleteRainbowOffersSuccess}
     */
    this.adminDeleteRainbowOffers = function(offerId, accept) {
      return this.adminDeleteRainbowOffersWithHttpInfo(offerId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an offer
     * Get an offer from its id    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/offers/58072f646237427a3687dc90
     * @param {String} offerId Offer unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminGetRainbowOfferByIdSuccess} and HTTP response
     */
    this.adminGetRainbowOfferByIdWithHttpInfo = function(offerId, accept) {
      var postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling adminGetRainbowOfferById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminGetRainbowOfferById");
      }

      var pathParams = {
        'offerId': offerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminGetRainbowOfferByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/offers/{offerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an offer
     * Get an offer from its id    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/offers/58072f646237427a3687dc90
     * @param {String} offerId Offer unique identifier.
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminGetRainbowOfferByIdSuccess}
     */
    this.adminGetRainbowOfferById = function(offerId, accept) {
      return this.adminGetRainbowOfferByIdWithHttpInfo(offerId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get default offer
     * Get the default Rainbow offer (Essential)    Default offer is the offer which related profile is automatically assigned to newly created companies and users.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/offers/default
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminGetRainbowOffersSuccess} and HTTP response
     */
    this.adminGetRainbowOffersWithHttpInfo = function(accept) {
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling adminGetRainbowOffers");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AdminGetRainbowOffersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/offers/default', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get default offer
     * Get the default Rainbow offer (Essential)    Default offer is the offer which related profile is automatically assigned to newly created companies and users.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/offers/default
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminGetRainbowOffersSuccess}
     */
    this.adminGetRainbowOffers = function(accept) {
      return this.adminGetRainbowOffersWithHttpInfo(accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an offer
     * This API can be used to create an offer.
     * @param {module:model/AdminPostRainbowOffers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPostRainbowOffersSuccess} and HTTP response
     */
    this.adminPostRainbowOffersWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminPostRainbowOffers");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminPostRainbowOffersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/offers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an offer
     * This API can be used to create an offer.
     * @param {module:model/AdminPostRainbowOffers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPostRainbowOffersSuccess}
     */
    this.adminPostRainbowOffers = function(body) {
      return this.adminPostRainbowOffersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an offer
     * This API can be used to update an offer.
     * @param {String} offerId Offer unique identifier.
     * @param {module:model/AdminPutRainbowOffers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPutRainbowOffersSuccess} and HTTP response
     */
    this.adminPutRainbowOffersWithHttpInfo = function(offerId, body) {
      var postBody = body;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling adminPutRainbowOffers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminPutRainbowOffers");
      }

      var pathParams = {
        'offerId': offerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminPutRainbowOffersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/offers/{offerId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an offer
     * This API can be used to update an offer.
     * @param {String} offerId Offer unique identifier.
     * @param {module:model/AdminPutRainbowOffers} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPutRainbowOffersSuccess}
     */
    this.adminPutRainbowOffers = function(offerId, body) {
      return this.adminPutRainbowOffersWithHttpInfo(offerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set an offer as default
     * This API can be used to change default Rainbow offer.    The flag isDefault of previous default offer is set to false, and the flag isDefault of the specified offer is set to true.    Previous default offer stays default offer for companies having already this subscription as default.
     * @param {String} offerId Offer unique identifier.
     * @param {module:model/AdminPutRainbowOffersDefault} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdminPutRainbowOffersDefaultSuccess} and HTTP response
     */
    this.adminPutRainbowOffersDefaultWithHttpInfo = function(offerId, body) {
      var postBody = body;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling adminPutRainbowOffersDefault");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminPutRainbowOffersDefault");
      }

      var pathParams = {
        'offerId': offerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AdminPutRainbowOffersDefaultSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/offers/default/{offerId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set an offer as default
     * This API can be used to change default Rainbow offer.    The flag isDefault of previous default offer is set to false, and the flag isDefault of the specified offer is set to true.    Previous default offer stays default offer for companies having already this subscription as default.
     * @param {String} offerId Offer unique identifier.
     * @param {module:model/AdminPutRainbowOffersDefault} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AdminPutRainbowOffersDefaultSuccess}
     */
    this.adminPutRainbowOffersDefault = function(offerId, body) {
      return this.adminPutRainbowOffersDefaultWithHttpInfo(offerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all offers
     * List available offers which can be subscribed by companies.    This corresponds to Marketing Rainbow offers. They are linked to a profile.    If the offers are charged (i.e. can be sold), field canBeSold has to be set to true, and associated IDs in Zuora catalog offers has to be set (fields zuoraOfferId, zuoraProductRatePlanId and zuoraProductRatePlanChargeId).    When a subscription to a charged offer is done for a company, a subscription is created in Zuora for the related Zuora offer.       In all cases (i.e. even if the offer is not charged), when a subscription to an offer is done for a company, the subscription is added to the company subscriptions list. Each subscription entry contains the subscribed Rainbow OfferId and the related profileId.       If the profile associated to an offer is changed, existing company subscriptions are still linked to the previous profile.
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.businessSpecific Allows to filter offer list on field businessSpecific.
     * @param {String} opts.format Allows to retrieve more or less offer details in response.    - `small`: id name    - `medium`: id name description    - `full`: all offer fields
     * @param {String} opts.name Allows to filter offer list on field name.
     * @param {Boolean} opts.canBeSold Allows to filter offer list on field canBeSold.
     * @param {Boolean} opts.autoSubscribe Allows to filter offer list on field autoSubscribe.
     * @param {Boolean} opts.isExclusive Allows to filter offer list on field isExclusive.
     * @param {Boolean} opts.isPrepaid Allows to filter offer list on field isPrepaid.
     * @param {Boolean} opts.profileId Allows to filter offer list on field profileId.
     * @param {Boolean} opts.offerReference Allows to filter offer list on field offerReference.
     * @param {Boolean} opts.sapReference Allows to filter offer list on field sapReference.
     * @param {Number} opts.limit Allow to specify the number of offers to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first offer to retrieve (first offer if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort offer list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting offer list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetApiRainbowAdminV10OffersSuccess} and HTTP response
     */
    this.getApiRainbowAdminV10OffersWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getApiRainbowAdminV10Offers");
      }

      var pathParams = {
      };
      var queryParams = {
        'businessSpecific': opts['businessSpecific'],
        'format': opts['format'],
        'name': opts['name'],
        'canBeSold': opts['canBeSold'],
        'autoSubscribe': opts['autoSubscribe'],
        'isExclusive': opts['isExclusive'],
        'isPrepaid': opts['isPrepaid'],
        'profileId': opts['profileId'],
        'offerReference': opts['offerReference'],
        'sapReference': opts['sapReference'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetApiRainbowAdminV10OffersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/offers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all offers
     * List available offers which can be subscribed by companies.    This corresponds to Marketing Rainbow offers. They are linked to a profile.    If the offers are charged (i.e. can be sold), field canBeSold has to be set to true, and associated IDs in Zuora catalog offers has to be set (fields zuoraOfferId, zuoraProductRatePlanId and zuoraProductRatePlanChargeId).    When a subscription to a charged offer is done for a company, a subscription is created in Zuora for the related Zuora offer.       In all cases (i.e. even if the offer is not charged), when a subscription to an offer is done for a company, the subscription is added to the company subscriptions list. Each subscription entry contains the subscribed Rainbow OfferId and the related profileId.       If the profile associated to an offer is changed, existing company subscriptions are still linked to the previous profile.
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.businessSpecific Allows to filter offer list on field businessSpecific.
     * @param {String} opts.format Allows to retrieve more or less offer details in response.    - `small`: id name    - `medium`: id name description    - `full`: all offer fields
     * @param {String} opts.name Allows to filter offer list on field name.
     * @param {Boolean} opts.canBeSold Allows to filter offer list on field canBeSold.
     * @param {Boolean} opts.autoSubscribe Allows to filter offer list on field autoSubscribe.
     * @param {Boolean} opts.isExclusive Allows to filter offer list on field isExclusive.
     * @param {Boolean} opts.isPrepaid Allows to filter offer list on field isPrepaid.
     * @param {Boolean} opts.profileId Allows to filter offer list on field profileId.
     * @param {Boolean} opts.offerReference Allows to filter offer list on field offerReference.
     * @param {Boolean} opts.sapReference Allows to filter offer list on field sapReference.
     * @param {Number} opts.limit Allow to specify the number of offers to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first offer to retrieve (first offer if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort offer list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting offer list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetApiRainbowAdminV10OffersSuccess}
     */
    this.getApiRainbowAdminV10Offers = function(accept, opts) {
      return this.getApiRainbowAdminV10OffersWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
