/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteOrganisationsSuccess', 'model/GetOrganisationsIdSuccess', 'model/GetOrganisationsSuccess', 'model/PostOrganisations', 'model/PostOrganisationsSuccess', 'model/PutOrganisations', 'model/PutOrganisationsSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteOrganisationsSuccess'), require('../model/GetOrganisationsIdSuccess'), require('../model/GetOrganisationsSuccess'), require('../model/PostOrganisations'), require('../model/PostOrganisationsSuccess'), require('../model/PutOrganisations'), require('../model/PutOrganisationsSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.OrganisationsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.DeleteOrganisationsSuccess, root.RainbowAdminPortal.GetOrganisationsIdSuccess, root.RainbowAdminPortal.GetOrganisationsSuccess, root.RainbowAdminPortal.PostOrganisations, root.RainbowAdminPortal.PostOrganisationsSuccess, root.RainbowAdminPortal.PutOrganisations, root.RainbowAdminPortal.PutOrganisationsSuccess);
  }
}(this, function(ApiClient, DeleteOrganisationsSuccess, GetOrganisationsIdSuccess, GetOrganisationsSuccess, PostOrganisations, PostOrganisationsSuccess, PutOrganisations, PutOrganisationsSuccess) {
  'use strict';

  /**
   * Organisations service.
   * @module api/OrganisationsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new OrganisationsApi. 
   * @alias module:api/OrganisationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete an organisation
     * @param {String} organisationId Organisation unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteOrganisationsSuccess} and HTTP response
     */
    this.deleteOrganisationsWithHttpInfo = function(organisationId, accept) {
      var postBody = null;
      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling deleteOrganisations");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteOrganisations");
      }

      var pathParams = {
        'organisationId': organisationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteOrganisationsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/organisations/{organisationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an organisation
     * @param {String} organisationId Organisation unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteOrganisationsSuccess}
     */
    this.deleteOrganisations = function(organisationId, accept) {
      return this.deleteOrganisationsWithHttpInfo(organisationId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all organisations
     * Users with 'superadmin', 'support', 'business_admin' or 'admin' role can retrieve all organisations. Users with admin role (and not having superadmin, business_admin nor support role) can only retrieve organisations he has to manage.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/organisations?format=small&limit=100&offset=0&sortField=name&sortOrder=-1
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less organisation details in response.    - `small`: _id, name    - `medium`: _id, name    - `full`: all company fields
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first company to retrieve (first company if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort organisation list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting company list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOrganisationsSuccess} and HTTP response
     */
    this.getOrganisationsWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOrganisations");
      }

      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetOrganisationsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/organisations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all organisations
     * Users with 'superadmin', 'support', 'business_admin' or 'admin' role can retrieve all organisations. Users with admin role (and not having superadmin, business_admin nor support role) can only retrieve organisations he has to manage.    Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/organisations?format=small&limit=100&offset=0&sortField=name&sortOrder=-1
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less organisation details in response.    - `small`: _id, name    - `medium`: _id, name    - `full`: all company fields
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first company to retrieve (first company if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort organisation list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting company list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOrganisationsSuccess}
     */
    this.getOrganisations = function(accept, opts) {
      return this.getOrganisationsWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an organisation data
     * Users with 'superadmin', 'business_admin', 'support' or 'admin' role can retrieve any company.   **Users with admin role (and not having superadmin, business_admin nor support role) can only retrieve organisations he has to manage..**   Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/organisations/57486e5d807a594145e510d6
     * @param {String} organisationId Organisation unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOrganisationsIdSuccess} and HTTP response
     */
    this.getOrganisationsIdWithHttpInfo = function(organisationId, accept) {
      var postBody = null;
      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling getOrganisationsId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOrganisationsId");
      }

      var pathParams = {
        'organisationId': organisationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetOrganisationsIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/organisations/{organisationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an organisation data
     * Users with 'superadmin', 'business_admin', 'support' or 'admin' role can retrieve any company.   **Users with admin role (and not having superadmin, business_admin nor support role) can only retrieve organisations he has to manage..**   Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/organisations/57486e5d807a594145e510d6
     * @param {String} organisationId Organisation unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOrganisationsIdSuccess}
     */
    this.getOrganisationsId = function(organisationId, accept) {
      return this.getOrganisationsIdWithHttpInfo(organisationId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an organisation
     * For the 'Enterprise (E1)' offer, the premium offer, the Multi-Layer organization is defined. It describes a hierarchy including ORGANIZATIONS/COMPANIES/SITES/SYSTEMS.    The organization is the highest level of the customer structure. It can federate several companies.    An administrator of an organization has the view of all companies below it.    Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/organisations (body \"name\":\"Organization name\")
     * @param {module:model/PostOrganisations} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostOrganisationsSuccess} and HTTP response
     */
    this.postOrganisationsWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postOrganisations");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostOrganisationsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/organisations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an organisation
     * For the 'Enterprise (E1)' offer, the premium offer, the Multi-Layer organization is defined. It describes a hierarchy including ORGANIZATIONS/COMPANIES/SITES/SYSTEMS.    The organization is the highest level of the customer structure. It can federate several companies.    An administrator of an organization has the view of all companies below it.    Example: POST https://openrainbow.com/api/rainbow/admin/v1.0/organisations (body \"name\":\"Organization name\")
     * @param {module:model/PostOrganisations} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostOrganisationsSuccess}
     */
    this.postOrganisations = function(body) {
      return this.postOrganisationsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an organisation
     * @param {String} organisationId Organisation unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutOrganisations} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutOrganisationsSuccess} and HTTP response
     */
    this.putOrganisationsWithHttpInfo = function(organisationId, body) {
      var postBody = body;
      // verify the required parameter 'organisationId' is set
      if (organisationId === undefined || organisationId === null) {
        throw new Error("Missing the required parameter 'organisationId' when calling putOrganisations");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putOrganisations");
      }

      var pathParams = {
        'organisationId': organisationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PutOrganisationsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/organisations/{organisationId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an organisation
     * @param {String} organisationId Organisation unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutOrganisations} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutOrganisationsSuccess}
     */
    this.putOrganisations = function(organisationId, body) {
      return this.putOrganisationsWithHttpInfo(organisationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
