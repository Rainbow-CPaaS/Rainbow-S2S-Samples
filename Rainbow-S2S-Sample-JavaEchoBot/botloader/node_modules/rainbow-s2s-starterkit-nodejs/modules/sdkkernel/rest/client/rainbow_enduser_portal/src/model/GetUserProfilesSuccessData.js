/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.GetUserProfilesSuccessData = factory(root.RainbowEnduserPortal.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The GetUserProfilesSuccessData model module.
   * @module model/GetUserProfilesSuccessData
   * @version 1.84.0
   */

  /**
   * Constructs a new <code>GetUserProfilesSuccessData</code>.
   * @alias module:model/GetUserProfilesSuccessData
   * @class
   * @param subscriptionId {String} Id of company subscription to which user profile is assigned (one of the subscriptions available to user's company)
   * @param offerId {String} Id of the Rainbow offer to which company subscription is attached
   * @param offerName {String} Name of the Rainbow offer to which company subscription is attached
   * @param profileId {String} Id of the Rainbow profile to which company subscription is attached
   * @param profileName {String} Name of the Rainbow profile to which company subscription is attached
   * @param status {String} Status of the company subscription to which user profile is assigned
   * @param isDefault {Boolean} Indicates if this profile lis linked to user's company's subscription to default offer (i.e. Essential)       Possible values: `active`, `alerting`, `hold`, `terminated`
   * @param assignationDate {String} Date when the subscription was attached to user profile
   */
  var exports = function(subscriptionId, offerId, offerName, profileId, profileName, status, isDefault, assignationDate) {
    var _this = this;

    _this['subscriptionId'] = subscriptionId;
    _this['offerId'] = offerId;
    _this['offerName'] = offerName;
    _this['profileId'] = profileId;
    _this['profileName'] = profileName;
    _this['status'] = status;
    _this['isDefault'] = isDefault;
    _this['assignationDate'] = assignationDate;
  };

  /**
   * Constructs a <code>GetUserProfilesSuccessData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetUserProfilesSuccessData} obj Optional instance to populate.
   * @return {module:model/GetUserProfilesSuccessData} The populated <code>GetUserProfilesSuccessData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('subscriptionId')) {
        obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
      }
      if (data.hasOwnProperty('offerId')) {
        obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
      }
      if (data.hasOwnProperty('offerName')) {
        obj['offerName'] = ApiClient.convertToType(data['offerName'], 'String');
      }
      if (data.hasOwnProperty('profileId')) {
        obj['profileId'] = ApiClient.convertToType(data['profileId'], 'String');
      }
      if (data.hasOwnProperty('profileName')) {
        obj['profileName'] = ApiClient.convertToType(data['profileName'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('isDefault')) {
        obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
      }
      if (data.hasOwnProperty('assignationDate')) {
        obj['assignationDate'] = ApiClient.convertToType(data['assignationDate'], 'String');
      }
    }
    return obj;
  }

  /**
   * Id of company subscription to which user profile is assigned (one of the subscriptions available to user's company)
   * @member {String} subscriptionId
   */
  exports.prototype['subscriptionId'] = undefined;
  /**
   * Id of the Rainbow offer to which company subscription is attached
   * @member {String} offerId
   */
  exports.prototype['offerId'] = undefined;
  /**
   * Name of the Rainbow offer to which company subscription is attached
   * @member {String} offerName
   */
  exports.prototype['offerName'] = undefined;
  /**
   * Id of the Rainbow profile to which company subscription is attached
   * @member {String} profileId
   */
  exports.prototype['profileId'] = undefined;
  /**
   * Name of the Rainbow profile to which company subscription is attached
   * @member {String} profileName
   */
  exports.prototype['profileName'] = undefined;
  /**
   * Status of the company subscription to which user profile is assigned
   * @member {String} status
   */
  exports.prototype['status'] = undefined;
  /**
   * Indicates if this profile lis linked to user's company's subscription to default offer (i.e. Essential)       Possible values: `active`, `alerting`, `hold`, `terminated`
   * @member {Boolean} isDefault
   */
  exports.prototype['isDefault'] = undefined;
  /**
   * Date when the subscription was attached to user profile
   * @member {String} assignationDate
   */
  exports.prototype['assignationDate'] = undefined;



  return exports;
}));


