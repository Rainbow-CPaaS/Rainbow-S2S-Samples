/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetUserProfilesFeaturesSuccess', 'model/GetUserProfilesSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetUserProfilesFeaturesSuccess'), require('../model/GetUserProfilesSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.ProfileApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.GetUserProfilesFeaturesSuccess, root.RainbowEnduserPortal.GetUserProfilesSuccess);
  }
}(this, function(ApiClient, GetUserProfilesFeaturesSuccess, GetUserProfilesSuccess) {
  'use strict';

  /**
   * Profile service.
   * @module api/ProfileApi
   * @version 1.84.0
   */

  /**
   * Constructs a new ProfileApi. 
   * @alias module:api/ProfileApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get user profiles
     * This API can be used to get user profiles.       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/profiles
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserProfilesSuccess} and HTTP response
     */
    this.getUserProfilesWithHttpInfo = function(userId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserProfiles");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUserProfiles");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUserProfilesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/profiles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user profiles
     * This API can be used to get user profiles.       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/profiles
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserProfilesSuccess}
     */
    this.getUserProfiles = function(userId, accept) {
      return this.getUserProfilesWithHttpInfo(userId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user profiles features
     * This API can be used to get features associated to the user through its profiles.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       User can be assigned to several profiles (if his company has subscribed to commercial offers linked to these profiles, and if an admin has assigned these profiles to the user).    By default, user is at least assigned to the subscription of his company to the default offer (i.e. Essential).       Each profile has his own list of features with his own values.    This API allows to aggregate all features from all user's profiles.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/profiles/features
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserProfilesFeaturesSuccess} and HTTP response
     */
    this.getUserProfilesFeaturesWithHttpInfo = function(userId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserProfilesFeatures");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUserProfilesFeatures");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUserProfilesFeaturesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/profiles/features', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user profiles features
     * This API can be used to get features associated to the user through its profiles.    This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       User can be assigned to several profiles (if his company has subscribed to commercial offers linked to these profiles, and if an admin has assigned these profiles to the user).    By default, user is at least assigned to the subscription of his company to the default offer (i.e. Essential).       Each profile has his own list of features with his own values.    This API allows to aggregate all features from all user's profiles.       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/56d0277a0261b53142a5cab5/profiles/features
     * @param {String} userId User unique identifier (like 56d0277a0261b53142a5cab5)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserProfilesFeaturesSuccess}
     */
    this.getUserProfilesFeatures = function(userId, accept) {
      return this.getUserProfilesFeaturesWithHttpInfo(userId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
