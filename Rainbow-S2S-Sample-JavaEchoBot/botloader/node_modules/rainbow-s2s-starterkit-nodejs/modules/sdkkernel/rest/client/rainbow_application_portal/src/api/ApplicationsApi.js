/**
 * Rainbow Application Portal
 * # Rainbow application portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow Application portal. This portal is dedicated to app features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.78.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationsApplicationsDeleteAppsSuccess', 'model/ApplicationsApplicationsGetAppsSuccess', 'model/ApplicationsApplicationsPostApps', 'model/ApplicationsApplicationsPostAppsSuccess', 'model/ApplicationsApplicationsPutApps', 'model/ApplicationsApplicationsPutAppsSuccess', 'model/ApplicationsApplicationsRequestDeployAppSuccess', 'model/ApplicationsApplicationsRestartAppSuccess', 'model/ApplicationsApplicationsStopAppSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationsApplicationsDeleteAppsSuccess'), require('../model/ApplicationsApplicationsGetAppsSuccess'), require('../model/ApplicationsApplicationsPostApps'), require('../model/ApplicationsApplicationsPostAppsSuccess'), require('../model/ApplicationsApplicationsPutApps'), require('../model/ApplicationsApplicationsPutAppsSuccess'), require('../model/ApplicationsApplicationsRequestDeployAppSuccess'), require('../model/ApplicationsApplicationsRestartAppSuccess'), require('../model/ApplicationsApplicationsStopAppSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowApplicationPortal) {
      root.RainbowApplicationPortal = {};
    }
    root.RainbowApplicationPortal.ApplicationsApi = factory(root.RainbowApplicationPortal.ApiClient, root.RainbowApplicationPortal.ApplicationsApplicationsDeleteAppsSuccess, root.RainbowApplicationPortal.ApplicationsApplicationsGetAppsSuccess, root.RainbowApplicationPortal.ApplicationsApplicationsPostApps, root.RainbowApplicationPortal.ApplicationsApplicationsPostAppsSuccess, root.RainbowApplicationPortal.ApplicationsApplicationsPutApps, root.RainbowApplicationPortal.ApplicationsApplicationsPutAppsSuccess, root.RainbowApplicationPortal.ApplicationsApplicationsRequestDeployAppSuccess, root.RainbowApplicationPortal.ApplicationsApplicationsRestartAppSuccess, root.RainbowApplicationPortal.ApplicationsApplicationsStopAppSuccess);
  }
}(this, function(ApiClient, ApplicationsApplicationsDeleteAppsSuccess, ApplicationsApplicationsGetAppsSuccess, ApplicationsApplicationsPostApps, ApplicationsApplicationsPostAppsSuccess, ApplicationsApplicationsPutApps, ApplicationsApplicationsPutAppsSuccess, ApplicationsApplicationsRequestDeployAppSuccess, ApplicationsApplicationsRestartAppSuccess, ApplicationsApplicationsStopAppSuccess) {
  'use strict';

  /**
   * Applications service.
   * @module api/ApplicationsApi
   * @version 1.78.0
   */

  /**
   * Constructs a new ApplicationsApi. 
   * @alias module:api/ApplicationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete an application.
     * Rainbow developers can delete their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsDeleteAppsSuccess} and HTTP response
     */
    this.applicationsApplicationsDeleteAppsWithHttpInfo = function(appId, accept) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationsApplicationsDeleteApps");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling applicationsApplicationsDeleteApps");
      }

      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsDeleteAppsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications/{appId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an application.
     * Rainbow developers can delete their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsDeleteAppsSuccess}
     */
    this.applicationsApplicationsDeleteApps = function(appId, accept) {
      return this.applicationsApplicationsDeleteAppsWithHttpInfo(appId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all applications created by the user.
     * This API can be used to retrieve the list of applications created by the user.
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Allows to filter applications by name.
     * @param {String} opts.env Allows to filter applications by environnement (Allowed values: not_deployed, in_deployment, deployed).
     * @param {String} opts.state Allows to filter applications by state. (Allowed values: new, active, blocked, deleted, stopped). Can be a comma separated string.
     * @param {String} opts.type Allows to filter applications by type (Allowed values: web, mobile, desktop, server, bot, iot, admin).
     * @param {String} opts.ownerId Only for superadmin/app_superadmin users. Allows to filter applications by ownerId .
     * @param {String} opts.subscriptionStatus Allows to filter applications by subscription status. (Allowed values: creating, active, alerting, hold, terminating, terminated, failed, unknown). Can be a comma separated string.
     * @param {String} opts.format Allows to retrieve more or less application details in response.    - `small`: appId, name, state, type, ownerId    - `medium`: appId, name, state, type, origin, dateOfCreation, env, activity, ownerId    - `full`: appId, name, ownerId, appSecret, state, env, type, kpi, activity, origin, dateOfCreation, dateOfLastTokenWhenRenew, dateOfDeploymentRequest, dateOfDeployment,deployReason, deployedByUserId, isRainbowClientDefault, isNoIdApplication, profileId, platform, subscriptions
     * @param {Number} opts.limit Allow to specify the number of applications to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first application to retrieve (first app if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort applications list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting applications list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsGetAppsSuccess} and HTTP response
     */
    this.applicationsApplicationsGetAppsWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling applicationsApplicationsGetApps");
      }

      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'env': opts['env'],
        'state': opts['state'],
        'type': opts['type'],
        'ownerId': opts['ownerId'],
        'subscriptionStatus': opts['subscriptionStatus'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsGetAppsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all applications created by the user.
     * This API can be used to retrieve the list of applications created by the user.
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Allows to filter applications by name.
     * @param {String} opts.env Allows to filter applications by environnement (Allowed values: not_deployed, in_deployment, deployed).
     * @param {String} opts.state Allows to filter applications by state. (Allowed values: new, active, blocked, deleted, stopped). Can be a comma separated string.
     * @param {String} opts.type Allows to filter applications by type (Allowed values: web, mobile, desktop, server, bot, iot, admin).
     * @param {String} opts.ownerId Only for superadmin/app_superadmin users. Allows to filter applications by ownerId .
     * @param {String} opts.subscriptionStatus Allows to filter applications by subscription status. (Allowed values: creating, active, alerting, hold, terminating, terminated, failed, unknown). Can be a comma separated string.
     * @param {String} opts.format Allows to retrieve more or less application details in response.    - `small`: appId, name, state, type, ownerId    - `medium`: appId, name, state, type, origin, dateOfCreation, env, activity, ownerId    - `full`: appId, name, ownerId, appSecret, state, env, type, kpi, activity, origin, dateOfCreation, dateOfLastTokenWhenRenew, dateOfDeploymentRequest, dateOfDeployment,deployReason, deployedByUserId, isRainbowClientDefault, isNoIdApplication, profileId, platform, subscriptions
     * @param {Number} opts.limit Allow to specify the number of applications to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first application to retrieve (first app if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort applications list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting applications list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsGetAppsSuccess}
     */
    this.applicationsApplicationsGetApps = function(accept, opts) {
      return this.applicationsApplicationsGetAppsWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an application data.
     * Rainbow users can see their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsGetAppsSuccess} and HTTP response
     */
    this.applicationsApplicationsGetApps_0WithHttpInfo = function(appId, accept) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationsApplicationsGetApps_0");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling applicationsApplicationsGetApps_0");
      }

      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsGetAppsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications/{appId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an application data.
     * Rainbow users can see their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsGetAppsSuccess}
     */
    this.applicationsApplicationsGetApps_0 = function(appId, accept) {
      return this.applicationsApplicationsGetApps_0WithHttpInfo(appId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an application.
     * Rainbow users can create their own applications.
     * @param {module:model/ApplicationsApplicationsPostApps} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsPostAppsSuccess} and HTTP response
     */
    this.applicationsApplicationsPostAppsWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applicationsApplicationsPostApps");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsPostAppsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an application.
     * Rainbow users can create their own applications.
     * @param {module:model/ApplicationsApplicationsPostApps} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsPostAppsSuccess}
     */
    this.applicationsApplicationsPostApps = function(body) {
      return this.applicationsApplicationsPostAppsWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an application.
     * Rainbow users can update their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {module:model/ApplicationsApplicationsPutApps} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsPutAppsSuccess} and HTTP response
     */
    this.applicationsApplicationsPutAppsWithHttpInfo = function(appId, body) {
      var postBody = body;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationsApplicationsPutApps");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applicationsApplicationsPutApps");
      }

      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsPutAppsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications/{appId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an application.
     * Rainbow users can update their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @param {module:model/ApplicationsApplicationsPutApps} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsPutAppsSuccess}
     */
    this.applicationsApplicationsPutApps = function(appId, body) {
      return this.applicationsApplicationsPutAppsWithHttpInfo(appId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request the deployment of an application.
     * Rainbow users can update their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsRequestDeployAppSuccess} and HTTP response
     */
    this.applicationsApplicationsRequestDeployAppWithHttpInfo = function(appId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationsApplicationsRequestDeployApp");
      }

      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsRequestDeployAppSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications/{appId}/request-deploy', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request the deployment of an application.
     * Rainbow users can update their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsRequestDeployAppSuccess}
     */
    this.applicationsApplicationsRequestDeployApp = function(appId) {
      return this.applicationsApplicationsRequestDeployAppWithHttpInfo(appId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restart an application.
     * Rainbow developers can restart their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsRestartAppSuccess} and HTTP response
     */
    this.applicationsApplicationsRestartAppWithHttpInfo = function(appId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationsApplicationsRestartApp");
      }

      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsRestartAppSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications/{appId}/restart', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restart an application.
     * Rainbow developers can restart their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsRestartAppSuccess}
     */
    this.applicationsApplicationsRestartApp = function(appId) {
      return this.applicationsApplicationsRestartAppWithHttpInfo(appId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop an application.
     * Rainbow users can stop their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationsApplicationsStopAppSuccess} and HTTP response
     */
    this.applicationsApplicationsStopAppWithHttpInfo = function(appId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling applicationsApplicationsStopApp");
      }

      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApplicationsApplicationsStopAppSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/applications/v1.0/applications/{appId}/stop', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop an application.
     * Rainbow users can stop their own applications.
     * @param {String} appId Application unique identifier (like 578bb08dc0d8c107725ef8c4)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationsApplicationsStopAppSuccess}
     */
    this.applicationsApplicationsStopApp = function(appId) {
      return this.applicationsApplicationsStopAppWithHttpInfo(appId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
