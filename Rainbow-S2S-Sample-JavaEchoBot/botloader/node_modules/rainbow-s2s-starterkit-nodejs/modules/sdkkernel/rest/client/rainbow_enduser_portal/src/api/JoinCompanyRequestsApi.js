/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CancelJoinCompanyRequestSuccess', 'model/GetJoinCompanyRequestByIdSuccess', 'model/GetJoinCompanyRequestsSuccess', 'model/ResendJoinCompanyRequestSuccess', 'model/SendJoinCompanyRequest', 'model/SendJoinCompanyRequestSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CancelJoinCompanyRequestSuccess'), require('../model/GetJoinCompanyRequestByIdSuccess'), require('../model/GetJoinCompanyRequestsSuccess'), require('../model/ResendJoinCompanyRequestSuccess'), require('../model/SendJoinCompanyRequest'), require('../model/SendJoinCompanyRequestSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.JoinCompanyRequestsApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.CancelJoinCompanyRequestSuccess, root.RainbowEnduserPortal.GetJoinCompanyRequestByIdSuccess, root.RainbowEnduserPortal.GetJoinCompanyRequestsSuccess, root.RainbowEnduserPortal.ResendJoinCompanyRequestSuccess, root.RainbowEnduserPortal.SendJoinCompanyRequest, root.RainbowEnduserPortal.SendJoinCompanyRequestSuccess);
  }
}(this, function(ApiClient, CancelJoinCompanyRequestSuccess, GetJoinCompanyRequestByIdSuccess, GetJoinCompanyRequestsSuccess, ResendJoinCompanyRequestSuccess, SendJoinCompanyRequest, SendJoinCompanyRequestSuccess) {
  'use strict';

  /**
   * JoinCompanyRequests service.
   * @module api/JoinCompanyRequestsApi
   * @version 1.84.0
   */

  /**
   * Constructs a new JoinCompanyRequestsApi. 
   * @alias module:api/JoinCompanyRequestsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Cancel a join company request
     * This API can be used by logged in user to cancel a request to join a company he sent.       Request must be pending or declined (otherwise error 409 is returned).       Once request has been canceled, administrators won't be able to accept or decline it anymore.       All company admins are notified with an XMPP message that the request has been canceled:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/users/5819e52ccf95fa196aa3f38a/join-companies/requests/5819ed7c9547b313509237d6/cancel
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} joinCompanyRequestId Join company request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CancelJoinCompanyRequestSuccess} and HTTP response
     */
    this.cancelJoinCompanyRequestWithHttpInfo = function(userId, joinCompanyRequestId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling cancelJoinCompanyRequest");
      }
      // verify the required parameter 'joinCompanyRequestId' is set
      if (joinCompanyRequestId === undefined || joinCompanyRequestId === null) {
        throw new Error("Missing the required parameter 'joinCompanyRequestId' when calling cancelJoinCompanyRequest");
      }

      var pathParams = {
        'userId': userId,
        'joinCompanyRequestId': joinCompanyRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CancelJoinCompanyRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/join-companies/requests/{joinCompanyRequestId}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a join company request
     * This API can be used by logged in user to cancel a request to join a company he sent.       Request must be pending or declined (otherwise error 409 is returned).       Once request has been canceled, administrators won't be able to accept or decline it anymore.       All company admins are notified with an XMPP message that the request has been canceled:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' status='canceled' xmlns='jabber:iq:configuration'/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/users/5819e52ccf95fa196aa3f38a/join-companies/requests/5819ed7c9547b313509237d6/cancel
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} joinCompanyRequestId Join company request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CancelJoinCompanyRequestSuccess}
     */
    this.cancelJoinCompanyRequest = function(userId, joinCompanyRequestId) {
      return this.cancelJoinCompanyRequestWithHttpInfo(userId, joinCompanyRequestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a join company request
     * This API allows to get a join company request sent by the user (sent using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests][0]).       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    User must be the one who sent the request (requestingUserId).       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/5819e52ccf95fa196aa3f38a/join-companies/requests/5819ed7c9547b313509237d6  [0]: #api-enduser_join_company-enduser_RequestJoinCompany
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} joinCompanyRequestId Join company request unique identifier (like 5819ed7c9547b313509237d6)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetJoinCompanyRequestByIdSuccess} and HTTP response
     */
    this.getJoinCompanyRequestByIdWithHttpInfo = function(userId, joinCompanyRequestId, accept) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getJoinCompanyRequestById");
      }
      // verify the required parameter 'joinCompanyRequestId' is set
      if (joinCompanyRequestId === undefined || joinCompanyRequestId === null) {
        throw new Error("Missing the required parameter 'joinCompanyRequestId' when calling getJoinCompanyRequestById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getJoinCompanyRequestById");
      }

      var pathParams = {
        'userId': userId,
        'joinCompanyRequestId': joinCompanyRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetJoinCompanyRequestByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/join-companies/requests/{joinCompanyRequestId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a join company request
     * This API allows to get a join company request sent by the user (sent using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests][0]).       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    User must be the one who sent the request (requestingUserId).       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/5819e52ccf95fa196aa3f38a/join-companies/requests/5819ed7c9547b313509237d6  [0]: #api-enduser_join_company-enduser_RequestJoinCompany
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} joinCompanyRequestId Join company request unique identifier (like 5819ed7c9547b313509237d6)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetJoinCompanyRequestByIdSuccess}
     */
    this.getJoinCompanyRequestById = function(userId, joinCompanyRequestId, accept) {
      return this.getJoinCompanyRequestByIdWithHttpInfo(userId, joinCompanyRequestId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all join company requests
     * This API allows to list all join company requests sent by the user (sent using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests][0]).       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/5819e52ccf95fa196aa3f38a/join-companies/requests  [0]: #api-enduser_join_company-enduser_RequestJoinCompany
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less requests details in response. > - `small`: id, requestingUserId, requestedCompanyId, status > - `medium`: id, requestingUserId, requestingUserLoginEmail, requestedCompanyId, status, requestingDate > - `full`: all request fields
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all join company requests having the provided status(es)
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetJoinCompanyRequestsSuccess} and HTTP response
     */
    this.getJoinCompanyRequestsWithHttpInfo = function(userId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getJoinCompanyRequests");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getJoinCompanyRequests");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'format': opts['format'],
        'sortField': opts['sortField'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetJoinCompanyRequestsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/join-companies/requests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all join company requests
     * This API allows to list all join company requests sent by the user (sent using API [POST /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests][0]).       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL)       Example: GET https://openrainbow.com/api/rainbow/enduser/v1.0/users/5819e52ccf95fa196aa3f38a/join-companies/requests  [0]: #api-enduser_join_company-enduser_RequestJoinCompany
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less requests details in response. > - `small`: id, requestingUserId, requestedCompanyId, status > - `medium`: id, requestingUserId, requestingUserLoginEmail, requestedCompanyId, status, requestingDate > - `full`: all request fields
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.status List all join company requests having the provided status(es)
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetJoinCompanyRequestsSuccess}
     */
    this.getJoinCompanyRequests = function(userId, accept, opts) {
      return this.getJoinCompanyRequestsWithHttpInfo(userId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Re-send a join company request
     * This API can be used by logged in user to re-send a request to join a company.       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    User must be in **Default** company and have only `user` role.       If request is canceled or declined, it is set back to pending and then re-sent.    If request is accepted or auto-accepted, error 409 is returned.       All company admins will receive a new email notification.    All company admins are notified with an XMPP message that the request has been re-sent:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"re-send\" id='5819ed7c9547b313509237d6' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/users/5819e52ccf95fa196aa3f38a/join-companies/requests/5819ed7c9547b313509237d6/re-send
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} joinCompanyRequestId Join company request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResendJoinCompanyRequestSuccess} and HTTP response
     */
    this.resendJoinCompanyRequestWithHttpInfo = function(userId, joinCompanyRequestId) {
      var postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling resendJoinCompanyRequest");
      }
      // verify the required parameter 'joinCompanyRequestId' is set
      if (joinCompanyRequestId === undefined || joinCompanyRequestId === null) {
        throw new Error("Missing the required parameter 'joinCompanyRequestId' when calling resendJoinCompanyRequest");
      }

      var pathParams = {
        'userId': userId,
        'joinCompanyRequestId': joinCompanyRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResendJoinCompanyRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/join-companies/requests/{joinCompanyRequestId}/re-send', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Re-send a join company request
     * This API can be used by logged in user to re-send a request to join a company.       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    User must be in **Default** company and have only `user` role.       If request is canceled or declined, it is set back to pending and then re-sent.    If request is accepted or auto-accepted, error 409 is returned.       All company admins will receive a new email notification.    All company admins are notified with an XMPP message that the request has been re-sent:        ```html <message type='management' id='122'            from='jid_from@openrainbow.com'            to='jid_to@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"re-send\" id='5819ed7c9547b313509237d6' status='pending' xmlns='jabber:iq:configuration'/>     </message> ```    Example: POST https://openrainbow.com/api/rainbow/users/5819e52ccf95fa196aa3f38a/join-companies/requests/5819ed7c9547b313509237d6/re-send
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {String} joinCompanyRequestId Join company request unique identifier (like 5819ed7c9547b313509237d6)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResendJoinCompanyRequestSuccess}
     */
    this.resendJoinCompanyRequest = function(userId, joinCompanyRequestId) {
      return this.resendJoinCompanyRequestWithHttpInfo(userId, joinCompanyRequestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request to join a company
     * This API allows logged in user to send a request to join a company.       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    User must be in **Default** company and have only `user` role.       This API can be called with one of these three parameters, depending of the use case:   * `requestedCompanyId`: in the case the company can be found by the user (public company), the user can send the join company request directly using the companyId of the requested company.    In that case, all users having role/admin type company_admin for the requested company will be notified (they will receive an email and a XMPP message (see below)). * `requestedCompanyAdminId`: in the case the company can not be found by the user (private company), the user must know the loginEmail of a company_admin of the company he wants to join.    He will first have to invite this company_admin by email (invite user process, see API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user][0]).    Once the company_admin will be in user's contact, he will be able to request to join company_admin's company using company_admin id.    All users having role/admin type company_admin for the requested company_admin's company will be notified (they will receive an email and a XMPP message (see below)). * `requestedCompanyLinkId`: in the case the user received a joinCompanyLink Id from a company admin (generated with [POST /api/rainbow/admin/v1.0/companies/:companyId/join-companies/links][1]), he can use it to send the join company request to the associated company.    All users having role/admin type company_admin for the company associated to the joinCompanyInvite will be notified (they will receive an email and a XMPP message (see below)).  The XMPP message company_admins receive when a user send a join company request is the following:        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"create\" id='5819ed7c9547b313509237d6' status='pending' type='received' xmlns='jabber:iq:configuration'/>     </message> ``` All company's company_admins will be able to:   * list of all join company requests received for their company with the API [GET /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests(?status=pending|accepted|declined|canceled)][2] * get a given join company request with the API [GET /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests/:joinCompanyRequestId][3] * accept a join company request using API [POST /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests/:joinCompanyRequestId/accept][4]   Once accepted, requesting user is moved from Default company to the requested company.    The following XMPP message is sent to requesting user:        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='accepted'** **type='received'** xmlns='jabber:iq:configuration'/>     </message> ```    The following XMPP message is sent to all company's company_admins (including the administrator who accepted the request if superadmin, organisation_admin or bp_admin):        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='accepted'** **type='sent'** xmlns='jabber:iq:configuration'/>     </message> ``` * decline a join company request using API [POST /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests/:joinCompanyRequestId/decline][5]   The following XMPP message is sent to requesting user:        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='declined'** **type='sent'** xmlns='jabber:iq:configuration'/>     </message> ```    The following XMPP message is sent to all company's company_admins (including the administrator who declined the request if superadmin, organisation_admin or bp_admin):        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='declined'** **type='received'** xmlns='jabber:iq:configuration'/>     </message> ```    Once the join company request has been declined, requesting user won't be able to re-sent a join company request to this company.    Company's company_admin are able to accept a declined request using accept API.  User requesting to join a company is able to:   * list all join company requests he sent, with their status, using the API [GET /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests(?status=pending|accepted|declined)][6] * get a join company request he sent, using the API [GET /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests/:joinCompanyRequestId][7] * re-send a join company request notification to all company's company_admins (only by email) using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][8]   [0]: #api-notifications_emails-enduser_InviteByEndUser [1]: /admin/#api-join_companies_links-PostJoinCompaniesLinks [2]: /admin/#api-join_company_requests-GetJoinCompanyRequests [3]: /admin/#api-join_company_requests-GetJoinCompanyRequestById [4]: /admin/#api-join_company_requests-PostAcceptJoinCompanyReq [5]: /admin/#api-join_company_requests-PostDeclineJoinCompanyReq [6]: #api-enduser_join_company-enduser_GetJoinCompanyRequests [7]: #api-enduser_join_company-enduser_GetJoinCompanyRequestById [8]: #api-enduser_notifications_emails-enduser_ResendInvite
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {module:model/SendJoinCompanyRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendJoinCompanyRequestSuccess} and HTTP response
     */
    this.sendJoinCompanyRequestWithHttpInfo = function(userId, body) {
      var postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling sendJoinCompanyRequest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendJoinCompanyRequest");
      }

      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SendJoinCompanyRequestSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/users/{userId}/join-companies/requests', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request to join a company
     * This API allows logged in user to send a request to join a company.       This API can only be used by user himself (i.e. userId of logged in user = value of userId parameter in URL).    User must be in **Default** company and have only `user` role.       This API can be called with one of these three parameters, depending of the use case:   * `requestedCompanyId`: in the case the company can be found by the user (public company), the user can send the join company request directly using the companyId of the requested company.    In that case, all users having role/admin type company_admin for the requested company will be notified (they will receive an email and a XMPP message (see below)). * `requestedCompanyAdminId`: in the case the company can not be found by the user (private company), the user must know the loginEmail of a company_admin of the company he wants to join.    He will first have to invite this company_admin by email (invite user process, see API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user][0]).    Once the company_admin will be in user's contact, he will be able to request to join company_admin's company using company_admin id.    All users having role/admin type company_admin for the requested company_admin's company will be notified (they will receive an email and a XMPP message (see below)). * `requestedCompanyLinkId`: in the case the user received a joinCompanyLink Id from a company admin (generated with [POST /api/rainbow/admin/v1.0/companies/:companyId/join-companies/links][1]), he can use it to send the join company request to the associated company.    All users having role/admin type company_admin for the company associated to the joinCompanyInvite will be notified (they will receive an email and a XMPP message (see below)).  The XMPP message company_admins receive when a user send a join company request is the following:        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"create\" id='5819ed7c9547b313509237d6' status='pending' type='received' xmlns='jabber:iq:configuration'/>     </message> ``` All company's company_admins will be able to:   * list of all join company requests received for their company with the API [GET /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests(?status=pending|accepted|declined|canceled)][2] * get a given join company request with the API [GET /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests/:joinCompanyRequestId][3] * accept a join company request using API [POST /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests/:joinCompanyRequestId/accept][4]   Once accepted, requesting user is moved from Default company to the requested company.    The following XMPP message is sent to requesting user:        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='accepted'** **type='received'** xmlns='jabber:iq:configuration'/>     </message> ```    The following XMPP message is sent to all company's company_admins (including the administrator who accepted the request if superadmin, organisation_admin or bp_admin):        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='accepted'** **type='sent'** xmlns='jabber:iq:configuration'/>     </message> ``` * decline a join company request using API [POST /api/rainbow/admin/v1.0/companies/:companyId/join-companies/requests/:joinCompanyRequestId/decline][5]   The following XMPP message is sent to requesting user:        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='declined'** **type='sent'** xmlns='jabber:iq:configuration'/>     </message> ```    The following XMPP message is sent to all company's company_admins (including the administrator who declined the request if superadmin, organisation_admin or bp_admin):        ```html <message type='management' id='122'            from='jid_user@openrainbow.com'            to='jid_company_admin@openrainbow.com'            xmlns='jabber:client'>        <joincompanyrequest action=\"update\" id='5819ed7c9547b313509237d6' **status='declined'** **type='received'** xmlns='jabber:iq:configuration'/>     </message> ```    Once the join company request has been declined, requesting user won't be able to re-sent a join company request to this company.    Company's company_admin are able to accept a declined request using accept API.  User requesting to join a company is able to:   * list all join company requests he sent, with their status, using the API [GET /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests(?status=pending|accepted|declined)][6] * get a join company request he sent, using the API [GET /api/rainbow/enduser/v1.0/users/:userId/join-companies/requests/:joinCompanyRequestId][7] * re-send a join company request notification to all company's company_admins (only by email) using API [POST /api/rainbow/enduser/v1.0/notifications/emails/invite-by-end-user/:invitationId/re-send][8]   [0]: #api-notifications_emails-enduser_InviteByEndUser [1]: /admin/#api-join_companies_links-PostJoinCompaniesLinks [2]: /admin/#api-join_company_requests-GetJoinCompanyRequests [3]: /admin/#api-join_company_requests-GetJoinCompanyRequestById [4]: /admin/#api-join_company_requests-PostAcceptJoinCompanyReq [5]: /admin/#api-join_company_requests-PostDeclineJoinCompanyReq [6]: #api-enduser_join_company-enduser_GetJoinCompanyRequests [7]: #api-enduser_join_company-enduser_GetJoinCompanyRequestById [8]: #api-enduser_notifications_emails-enduser_ResendInvite
     * @param {String} userId User unique identifier (like 5819e52ccf95fa196aa3f38a)
     * @param {module:model/SendJoinCompanyRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendJoinCompanyRequestSuccess}
     */
    this.sendJoinCompanyRequest = function(userId, body) {
      return this.sendJoinCompanyRequestWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
