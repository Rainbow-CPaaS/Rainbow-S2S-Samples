/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteSitesSuccess', 'model/GetSitesIdSuccess', 'model/GetSitesSuccess', 'model/PostSites', 'model/PostSitesSuccess', 'model/PutSites', 'model/PutSitesSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteSitesSuccess'), require('../model/GetSitesIdSuccess'), require('../model/GetSitesSuccess'), require('../model/PostSites'), require('../model/PostSitesSuccess'), require('../model/PutSites'), require('../model/PutSitesSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.SitesApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.DeleteSitesSuccess, root.RainbowAdminPortal.GetSitesIdSuccess, root.RainbowAdminPortal.GetSitesSuccess, root.RainbowAdminPortal.PostSites, root.RainbowAdminPortal.PostSitesSuccess, root.RainbowAdminPortal.PutSites, root.RainbowAdminPortal.PutSitesSuccess);
  }
}(this, function(ApiClient, DeleteSitesSuccess, GetSitesIdSuccess, GetSitesSuccess, PostSites, PostSitesSuccess, PutSites, PutSitesSuccess) {
  'use strict';

  /**
   * Sites service.
   * @module api/SitesApi
   * @version 1.82.0
   */

  /**
   * Constructs a new SitesApi. 
   * @alias module:api/SitesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Delete a site
     * This API allows administrator to delete a site for a company they administrate.       `superadmin` can delete sites for all companies existing in Rainbow.    `bp_admin` can only delete sites for companies linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only delete sites for companies linked to companies under their organisation.    `company_admin` can only delete sites for their own company.    Note : Delete will be forbidden if site is still linked to system(s)
     * @param {String} siteId Site unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSitesSuccess} and HTTP response
     */
    this.deleteSitesWithHttpInfo = function(siteId, accept) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSites");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteSites");
      }

      var pathParams = {
        'siteId': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteSitesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/sites/{siteId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a site
     * This API allows administrator to delete a site for a company they administrate.       `superadmin` can delete sites for all companies existing in Rainbow.    `bp_admin` can only delete sites for companies linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only delete sites for companies linked to companies under their organisation.    `company_admin` can only delete sites for their own company.    Note : Delete will be forbidden if site is still linked to system(s)
     * @param {String} siteId Site unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSitesSuccess}
     */
    this.deleteSites = function(siteId, accept) {
      return this.deleteSitesWithHttpInfo(siteId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all sites
     * This API allows administrator to retrieve sites they can administrate.       `superadmin` and `support` get all sites existing in Rainbow.    `bp_admin` only get sites linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` only get sites linked to companies under their organisation.    `company_admin` only get sites linked to their company.    `site_admin` only get the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/sites?format=small&limit=100&offset=0&sortField=name&sortOrder=-1
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less site details in response.    - `small`: _id, name    - `medium`: _id, name, status, companyId    - `full`: all site fields
     * @param {String} opts.name Allows to filter sites list on field name.       The filtering is case insensitive and on partial name match: all sites **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _sit_, sites with the following names are match the filter 'My site', 'Site', 'A site 1', 'Site of company', 'Sit1', 'Sit2', ...
     * @param {String} opts.companyId Allows to filter sites list on the companyIds provided in this option.
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first site to retrieve (first site if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort site list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting site list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSitesSuccess} and HTTP response
     */
    this.getSitesWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSites");
      }

      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'name': opts['name'],
        'companyId': opts['companyId'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSitesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all sites
     * This API allows administrator to retrieve sites they can administrate.       `superadmin` and `support` get all sites existing in Rainbow.    `bp_admin` only get sites linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` only get sites linked to companies under their organisation.    `company_admin` only get sites linked to their company.    `site_admin` only get the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/sites?format=small&limit=100&offset=0&sortField=name&sortOrder=-1
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less site details in response.    - `small`: _id, name    - `medium`: _id, name, status, companyId    - `full`: all site fields
     * @param {String} opts.name Allows to filter sites list on field name.       The filtering is case insensitive and on partial name match: all sites **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _sit_, sites with the following names are match the filter 'My site', 'Site', 'A site 1', 'Site of company', 'Sit1', 'Sit2', ...
     * @param {String} opts.companyId Allows to filter sites list on the companyIds provided in this option.
     * @param {Number} opts.limit Allow to specify the number of companies to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first site to retrieve (first site if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort site list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting site list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSitesSuccess}
     */
    this.getSites = function(accept, opts) {
      return this.getSitesWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a site data
     * This API allows administrator to retrieve a given site.       `superadmin` and `support` can get all sites existing in Rainbow.    `bp_admin` can only get sites linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only get sites linked to companies under their organisation.    `company_admin` can only get sites linked to their company.    `site_admin` can only get the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/sites/569d0ef3ef7816921f7e94fa
     * @param {String} siteId Site unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSitesIdSuccess} and HTTP response
     */
    this.getSitesIdWithHttpInfo = function(siteId, accept) {
      var postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSitesId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSitesId");
      }

      var pathParams = {
        'siteId': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetSitesIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/sites/{siteId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a site data
     * This API allows administrator to retrieve a given site.       `superadmin` and `support` can get all sites existing in Rainbow.    `bp_admin` can only get sites linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only get sites linked to companies under their organisation.    `company_admin` can only get sites linked to their company.    `site_admin` can only get the site they administrate.       Example: GET https://openrainbow.com/api/rainbow/admin/v1.0/sites/569d0ef3ef7816921f7e94fa
     * @param {String} siteId Site unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSitesIdSuccess}
     */
    this.getSitesId = function(siteId, accept) {
      return this.getSitesIdWithHttpInfo(siteId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a site
     * This API allows administrator to create a site for a company they administrate.       `superadmin` can create sites for all companies existing in Rainbow.    `bp_admin` can only create sites for companies linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only create sites for companies linked to companies under their organisation.    `company_admin` can only create sites for their own company.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A company in this environment can only have a single site. It has automatically the flag isCentrex = true   This flag is readonly.
     * @param {module:model/PostSites} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostSitesSuccess} and HTTP response
     */
    this.postSitesWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSites");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostSitesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/sites', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a site
     * This API allows administrator to create a site for a company they administrate.       `superadmin` can create sites for all companies existing in Rainbow.    `bp_admin` can only create sites for companies linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only create sites for companies linked to companies under their organisation.    `company_admin` can only create sites for their own company.       **Specific feature:** Sharing a system between several companies    Since 1.47.0 release, configuring companies sharing a multi-tenant system is possible.   An OXE can be multi-company.   A multi-tenant system, so called CENTREX, allows sharing a call-server between several entities. For us an entity is a company with the flag isCentrex=true.   A company in this environment can only have a single site. It has automatically the flag isCentrex = true   This flag is readonly.
     * @param {module:model/PostSites} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostSitesSuccess}
     */
    this.postSites = function(body) {
      return this.postSitesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a site
     * This API allows administrator to update a given site.       `superadmin` can update all sites existing in Rainbow.    `bp_admin` can only update sites linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only update sites linked to companies under their organisation.    `company_admin` can only update sites linked to their company.    `site_admin` can only update the site they administrate.       In a Multi-Layer organization defining a hierarchy ORGANIZATIONS/COMPANIES/SITES/SYSTEMS, only bp admin or admin of the site's organization is allowed to move the site (change companyId field of the site).    
     * @param {String} siteId Site unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutSites} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutSitesSuccess} and HTTP response
     */
    this.putSitesWithHttpInfo = function(siteId, body) {
      var postBody = body;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling putSites");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSites");
      }

      var pathParams = {
        'siteId': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PutSitesSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/sites/{siteId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a site
     * This API allows administrator to update a given site.       `superadmin` can update all sites existing in Rainbow.    `bp_admin` can only update sites linked to End Customer companies for which their bp_admin's company is the BP company.    `organization_admin` can only update sites linked to companies under their organisation.    `company_admin` can only update sites linked to their company.    `site_admin` can only update the site they administrate.       In a Multi-Layer organization defining a hierarchy ORGANIZATIONS/COMPANIES/SITES/SYSTEMS, only bp admin or admin of the site's organization is allowed to move the site (change companyId field of the site).    
     * @param {String} siteId Site unique identifier (like 569ce8c8f9336c471b98eda1)
     * @param {module:model/PutSites} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutSitesSuccess}
     */
    this.putSites = function(siteId, body) {
      return this.putSitesWithHttpInfo(siteId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
