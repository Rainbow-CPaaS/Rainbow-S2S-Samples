/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateRoom', 'model/CreateRoomSuccess', 'model/DeleteRoomSuccess', 'model/GetRoomByIdSuccess', 'model/GetRoomByJidSuccess', 'model/GetRoomsSuccess', 'model/UpdateRoom', 'model/UpdateRoomSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateRoom'), require('../model/CreateRoomSuccess'), require('../model/DeleteRoomSuccess'), require('../model/GetRoomByIdSuccess'), require('../model/GetRoomByJidSuccess'), require('../model/GetRoomsSuccess'), require('../model/UpdateRoom'), require('../model/UpdateRoomSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.RoomsApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.CreateRoom, root.RainbowEnduserPortal.CreateRoomSuccess, root.RainbowEnduserPortal.DeleteRoomSuccess, root.RainbowEnduserPortal.GetRoomByIdSuccess, root.RainbowEnduserPortal.GetRoomByJidSuccess, root.RainbowEnduserPortal.GetRoomsSuccess, root.RainbowEnduserPortal.UpdateRoom, root.RainbowEnduserPortal.UpdateRoomSuccess);
  }
}(this, function(ApiClient, CreateRoom, CreateRoomSuccess, DeleteRoomSuccess, GetRoomByIdSuccess, GetRoomByJidSuccess, GetRoomsSuccess, UpdateRoom, UpdateRoomSuccess) {
  'use strict';

  /**
   * Rooms service.
   * @module api/RoomsApi
   * @version 1.84.0
   */

  /**
   * Constructs a new RoomsApi. 
   * @alias module:api/RoomsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a room
     * Rainbow users/administrator can create/delete rooms based on multi-chat principle and change several room related data fields.    When a room is created, person that has created the room gets room administration rights. After that he can add other users with the role: `user`, `administrator` or `guest`.    Users with administration rights can: change the topic and the room visibility (public / private); add/remove room users; promote users as administrator; and delete rooms.    The room multi chat jid (MUC JID) is created server side and returned in Json response.    Creating a room is sometimes barred (403) (feature BUBBLE_COUNT)
     * @param {module:model/CreateRoom} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateRoomSuccess} and HTTP response
     */
    this.createRoomWithHttpInfo = function(body) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRoom");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateRoomSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a room
     * Rainbow users/administrator can create/delete rooms based on multi-chat principle and change several room related data fields.    When a room is created, person that has created the room gets room administration rights. After that he can add other users with the role: `user`, `administrator` or `guest`.    Users with administration rights can: change the topic and the room visibility (public / private); add/remove room users; promote users as administrator; and delete rooms.    The room multi chat jid (MUC JID) is created server side and returned in Json response.    Creating a room is sometimes barred (403) (feature BUBBLE_COUNT)
     * @param {module:model/CreateRoom} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateRoomSuccess}
     */
    this.createRoom = function(body) {
      return this.createRoomWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a room
     * This API allows to delete a room.    A message stanza is sent to room users as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's deleted display name has closed the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name='close'                  />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteRoomSuccess} and HTTP response
     */
    this.deleteRoomWithHttpInfo = function(roomId, accept) {
      var postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling deleteRoom");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteRoom");
      }

      var pathParams = {
        'roomId': roomId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeleteRoomSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a room
     * This API allows to delete a room.    A message stanza is sent to room users as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's deleted display name has closed the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name='close'                  />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteRoomSuccess}
     */
    this.deleteRoom = function(roomId, accept) {
      return this.deleteRoomWithHttpInfo(roomId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a room data from its id
     * Get a rooms data visible by the user requesting it (a private room the user is part of or a public room)   
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less room details in response. > - `small`: id, name, jid, isActive > - `medium`: id, name, jid, topic, creator, conference, guestEmails, disableNotifications, isActive > - `full`: id, name, jid, topic, creator, conference, guestEmails, customData, disableNotifications, users, activeUsersCounter, isActive If `full` format is used, the users list is limited to the first one hundred. Beyond, the number of active users is supplied. The `activeUsersCounter` represents the number of users with the status 'accepted' or 'invited'. Use /api/rainbow/enduser/v1.0/rooms/:roomId/users to Get all active users from a room with paginate options In this case, as a room can have many users (more than 100). We hide users ranked after this threshold. The activeUsersCounter represents the number of users with the status 'accepted' or 'invited'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoomByIdSuccess} and HTTP response
     */
    this.getRoomByIdWithHttpInfo = function(roomId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling getRoomById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRoomById");
      }

      var pathParams = {
        'roomId': roomId
      };
      var queryParams = {
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetRoomByIdSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a room data from its id
     * Get a rooms data visible by the user requesting it (a private room the user is part of or a public room)   
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less room details in response. > - `small`: id, name, jid, isActive > - `medium`: id, name, jid, topic, creator, conference, guestEmails, disableNotifications, isActive > - `full`: id, name, jid, topic, creator, conference, guestEmails, customData, disableNotifications, users, activeUsersCounter, isActive If `full` format is used, the users list is limited to the first one hundred. Beyond, the number of active users is supplied. The `activeUsersCounter` represents the number of users with the status 'accepted' or 'invited'. Use /api/rainbow/enduser/v1.0/rooms/:roomId/users to Get all active users from a room with paginate options In this case, as a room can have many users (more than 100). We hide users ranked after this threshold. The activeUsersCounter represents the number of users with the status 'accepted' or 'invited'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoomByIdSuccess}
     */
    this.getRoomById = function(roomId, accept, opts) {
      return this.getRoomByIdWithHttpInfo(roomId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a room data from its jid
     * Get a rooms data visible by the user requesting it (a private room the user is part of or a public room)   
     * @param {String} jid Room MUC JID (example: room1@muc.mycompany.com)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less room details in response. > - `small`: id, name, jid, isActive > - `medium`: id, name, jid, topic, creator, conference, guestEmails, disableNotifications, isActive > - `full`: id, name, jid, topic, creator, conference, guestEmails, customData, disableNotifications, users, activeUsersCounter, isActive If `full` format is used, the users list is limited to the first one hundred. Beyond, the number of active users is supplied. The `activeUsersCounter` represents the number of users with the status 'accepted' or 'invited'. Use /api/rainbow/enduser/v1.0/rooms/:roomId/users to Get all active users from a room with paginate options In this case, as a room can have many users (more than 100). We hide users ranked after this threshold. The activeUsersCounter represents the number of users with the status 'accepted' or 'invited'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoomByJidSuccess} and HTTP response
     */
    this.getRoomByJidWithHttpInfo = function(jid, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'jid' is set
      if (jid === undefined || jid === null) {
        throw new Error("Missing the required parameter 'jid' when calling getRoomByJid");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRoomByJid");
      }

      var pathParams = {
        'jid': jid
      };
      var queryParams = {
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetRoomByJidSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/jids/{jid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a room data from its jid
     * Get a rooms data visible by the user requesting it (a private room the user is part of or a public room)   
     * @param {String} jid Room MUC JID (example: room1@muc.mycompany.com)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less room details in response. > - `small`: id, name, jid, isActive > - `medium`: id, name, jid, topic, creator, conference, guestEmails, disableNotifications, isActive > - `full`: id, name, jid, topic, creator, conference, guestEmails, customData, disableNotifications, users, activeUsersCounter, isActive If `full` format is used, the users list is limited to the first one hundred. Beyond, the number of active users is supplied. The `activeUsersCounter` represents the number of users with the status 'accepted' or 'invited'. Use /api/rainbow/enduser/v1.0/rooms/:roomId/users to Get all active users from a room with paginate options In this case, as a room can have many users (more than 100). We hide users ranked after this threshold. The activeUsersCounter represents the number of users with the status 'accepted' or 'invited'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoomByJidSuccess}
     */
    this.getRoomByJid = function(jid, accept, opts) {
      return this.getRoomByJidWithHttpInfo(jid, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all rooms visible by the user requesting it
     * Display a list of short room description including: **id** - room identifier, **name** - room name   Get all rooms visible by the user requesting it (the private rooms the user is part of and the public rooms)   
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.userId user unique identifier from which to retrieve the list of rooms (like 56f42c1914e2a8a91b99e595)
     * @param {String} opts.status user's status to filter when retrieving the list of user's rooms (like 56f42c1914e2a8a91b99e595) `userId` query parameter can be any userid from Users with `superadmin` role, and only the User's id itself if not.    In this case only the rooms the user is part of are returned   
     * @param {String} opts.confId When a room hosts a conference endpoint, retrieve the one hosting the given confEndPointId (like 5980c0aaf698c541468fd1e0). `confId` query parameter used with `userId` query parameter helps filter when retrieving the list of user's rooms.**GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&confId=5980c0aaf698c541468fd1e0**
     * @param {Boolean} opts.scheduled When a room is/was used for a meeting, select rooms used for an immediate or a scheduled meeting. `scheduled` query parameter used with `userId` query parameter helps filter when retrieving the list of user's rooms.   * scheduled=false : all rooms used for an instant meeting * scheduled=true : all rooms used for a scheduled meeting  **GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&scheduled=true**
     * @param {Boolean} opts.hasConf Select all rooms used for meeting. `hasConf` query parameter used with `userId` query parameter helps filter when retrieving the list of user's rooms.   * hasConf=false : all rooms never used for a meeting * hasConf=true : all rooms used for a meeting  **GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&hasConf=true**
     * @param {Boolean} opts.isActive isActive is a flag of the room. When set to true all room users are invited to share their presence. Else they have to wait an event from XMPP server to share the presence. This flag is reset when the room is inactive for a while (basically 60 days), and set when the first user share his presence.   * isActive=false : all rooms not active yet * isActive=true : all active rooms  **GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&isActive=true**
     * @param {String} opts.format Allows to retrieve more or less room details in response. > - `small`: id, name, jid, isActive > - `medium`: id, name, jid, topic, creator, conference, guestEmails, disableNotifications, isActive > - `full`: id, name, jid, topic, creator, conference, guestEmails, customData, disableNotifications, users, activeUsersCounter, isActive If `full` format is used, the users list is limited to the first one hundred. Beyond, the number of active users is supplied. The `activeUsersCounter` represents the number of users with the status 'accepted' or 'invited'. Use /api/rainbow/enduser/v1.0/rooms/:roomId/users to Get all active users from a room with paginate options In this case, as a room can have many users (more than 100). We hide users ranked after this threshold. The activeUsersCounter represents the number of users with the status 'accepted' or 'invited'.
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoomsSuccess} and HTTP response
     */
    this.getRoomsWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRooms");
      }

      var pathParams = {
      };
      var queryParams = {
        'sortField': opts['sortField'],
        'userId': opts['userId'],
        'status': opts['status'],
        'confId': opts['confId'],
        'scheduled': opts['scheduled'],
        'hasConf': opts['hasConf'],
        'isActive': opts['isActive'],
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetRoomsSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all rooms visible by the user requesting it
     * Display a list of short room description including: **id** - room identifier, **name** - room name   Get all rooms visible by the user requesting it (the private rooms the user is part of and the public rooms)   
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.userId user unique identifier from which to retrieve the list of rooms (like 56f42c1914e2a8a91b99e595)
     * @param {String} opts.status user's status to filter when retrieving the list of user's rooms (like 56f42c1914e2a8a91b99e595) `userId` query parameter can be any userid from Users with `superadmin` role, and only the User's id itself if not.    In this case only the rooms the user is part of are returned   
     * @param {String} opts.confId When a room hosts a conference endpoint, retrieve the one hosting the given confEndPointId (like 5980c0aaf698c541468fd1e0). `confId` query parameter used with `userId` query parameter helps filter when retrieving the list of user's rooms.**GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&confId=5980c0aaf698c541468fd1e0**
     * @param {Boolean} opts.scheduled When a room is/was used for a meeting, select rooms used for an immediate or a scheduled meeting. `scheduled` query parameter used with `userId` query parameter helps filter when retrieving the list of user's rooms.   * scheduled=false : all rooms used for an instant meeting * scheduled=true : all rooms used for a scheduled meeting  **GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&scheduled=true**
     * @param {Boolean} opts.hasConf Select all rooms used for meeting. `hasConf` query parameter used with `userId` query parameter helps filter when retrieving the list of user's rooms.   * hasConf=false : all rooms never used for a meeting * hasConf=true : all rooms used for a meeting  **GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&hasConf=true**
     * @param {Boolean} opts.isActive isActive is a flag of the room. When set to true all room users are invited to share their presence. Else they have to wait an event from XMPP server to share the presence. This flag is reset when the room is inactive for a while (basically 60 days), and set when the first user share his presence.   * isActive=false : all rooms not active yet * isActive=true : all active rooms  **GET /api/rainbow/enduser/v1.0/rooms?userId=597ef13f36055b298edfaa13&isActive=true**
     * @param {String} opts.format Allows to retrieve more or less room details in response. > - `small`: id, name, jid, isActive > - `medium`: id, name, jid, topic, creator, conference, guestEmails, disableNotifications, isActive > - `full`: id, name, jid, topic, creator, conference, guestEmails, customData, disableNotifications, users, activeUsersCounter, isActive If `full` format is used, the users list is limited to the first one hundred. Beyond, the number of active users is supplied. The `activeUsersCounter` represents the number of users with the status 'accepted' or 'invited'. Use /api/rainbow/enduser/v1.0/rooms/:roomId/users to Get all active users from a room with paginate options In this case, as a room can have many users (more than 100). We hide users ranked after this threshold. The activeUsersCounter represents the number of users with the status 'accepted' or 'invited'.
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoomsSuccess}
     */
    this.getRooms = function(accept, opts) {
      return this.getRoomsWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change room data
     * This API allows to update room data.    A message stanza with the updated room data is sent to all room users. This allow clients to be notified of the up-to-date room data when they join the room:        ```html <message           from= 'a portal client connected'           to='room user jid'           id='lh2bs617'           type='management'           xmlns: 'jabber :client' >           <room>               roomid=\"mongoid of the room\"               roomjid=\"jid of the room\"               topic=\"new topic of the room\"               name=\"new name of the room\"               xmlns=\"jabber:iq:configuration\"           />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {module:model/UpdateRoom} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateRoomSuccess} and HTTP response
     */
    this.updateRoomWithHttpInfo = function(roomId, body) {
      var postBody = body;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling updateRoom");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRoom");
      }

      var pathParams = {
        'roomId': roomId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateRoomSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change room data
     * This API allows to update room data.    A message stanza with the updated room data is sent to all room users. This allow clients to be notified of the up-to-date room data when they join the room:        ```html <message           from= 'a portal client connected'           to='room user jid'           id='lh2bs617'           type='management'           xmlns: 'jabber :client' >           <room>               roomid=\"mongoid of the room\"               roomjid=\"jid of the room\"               topic=\"new topic of the room\"               name=\"new name of the room\"               xmlns=\"jabber:iq:configuration\"           />    </message> ``` 
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {module:model/UpdateRoom} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateRoomSuccess}
     */
    this.updateRoom = function(roomId, body) {
      return this.updateRoomWithHttpInfo(roomId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
