/**
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * OpenAPI spec version: 1.104.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-beta2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RainbowAuthenticationPortal);
  }
}(this, function(expect, RainbowAuthenticationPortal) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RainbowAuthenticationPortal.GetJwtSuccess();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetJwtSuccess', function() {
    it('should create an instance of GetJwtSuccess', function() {
      // uncomment below and update the code to test GetJwtSuccess
      //var instance = new RainbowAuthenticationPortal.GetJwtSuccess();
      //expect(instance).to.be.a(RainbowAuthenticationPortal.GetJwtSuccess);
    });

    it('should have the property data (base name: "data")', function() {
      // uncomment below and update the code to test the property data
      //var instance = new RainbowAuthenticationPortal.GetJwtSuccess();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumbers (base name: "phoneNumbers")', function() {
      // uncomment below and update the code to test the property phoneNumbers
      //var instance = new RainbowAuthenticationPortal.GetJwtSuccess();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new RainbowAuthenticationPortal.GetJwtSuccess();
      //expect(instance).to.be();
    });

    it('should have the property loggedInApplication (base name: "loggedInApplication")', function() {
      // uncomment below and update the code to test the property loggedInApplication
      //var instance = new RainbowAuthenticationPortal.GetJwtSuccess();
      //expect(instance).to.be();
    });

    it('should have the property loggedInUser (base name: "loggedInUser")', function() {
      // uncomment below and update the code to test the property loggedInUser
      //var instance = new RainbowAuthenticationPortal.GetJwtSuccess();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instance = new RainbowAuthenticationPortal.GetJwtSuccess();
      //expect(instance).to.be();
    });

  });

}));
