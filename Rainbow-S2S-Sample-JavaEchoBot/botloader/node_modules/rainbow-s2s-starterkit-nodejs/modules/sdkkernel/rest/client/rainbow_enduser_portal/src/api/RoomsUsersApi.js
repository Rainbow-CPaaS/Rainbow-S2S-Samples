/**
 * Rainbow Enduser portal
 * # Rainbow end user portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow End user portal. This portal is dedicated to end user features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.84.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddUserToRoom', 'model/AddUserToRoomSuccess', 'model/GetRoomActiveUsersSuccess', 'model/GetUserRoomDataSuccess', 'model/RemoveUserFromRoomSuccess', 'model/UpdateUserData', 'model/UpdateUserDataSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddUserToRoom'), require('../model/AddUserToRoomSuccess'), require('../model/GetRoomActiveUsersSuccess'), require('../model/GetUserRoomDataSuccess'), require('../model/RemoveUserFromRoomSuccess'), require('../model/UpdateUserData'), require('../model/UpdateUserDataSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowEnduserPortal) {
      root.RainbowEnduserPortal = {};
    }
    root.RainbowEnduserPortal.RoomsUsersApi = factory(root.RainbowEnduserPortal.ApiClient, root.RainbowEnduserPortal.AddUserToRoom, root.RainbowEnduserPortal.AddUserToRoomSuccess, root.RainbowEnduserPortal.GetRoomActiveUsersSuccess, root.RainbowEnduserPortal.GetUserRoomDataSuccess, root.RainbowEnduserPortal.RemoveUserFromRoomSuccess, root.RainbowEnduserPortal.UpdateUserData, root.RainbowEnduserPortal.UpdateUserDataSuccess);
  }
}(this, function(ApiClient, AddUserToRoom, AddUserToRoomSuccess, GetRoomActiveUsersSuccess, GetUserRoomDataSuccess, RemoveUserFromRoomSuccess, UpdateUserData, UpdateUserDataSuccess) {
  'use strict';

  /**
   * RoomsUsers service.
   * @module api/RoomsUsersApi
   * @version 1.84.0
   */

  /**
   * Constructs a new RoomsUsersApi. 
   * @alias module:api/RoomsUsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a user
     * If the logged in user is not register into the wanted room, and if he hasn't a 'moderator' privilege, a (403) forbidden error is sent.    Creating a user with the privilege 'moderator' is sometimes barred (feature BUBBLE_PROMOTE_MEMBER)    If the user to add is already registered (declared in the room and `status` is not `deleted`), a (409) conflict error is sent.    If not the user is either created or updated with `status` being `invited`.
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {module:model/AddUserToRoom} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddUserToRoomSuccess} and HTTP response
     */
    this.addUserToRoomWithHttpInfo = function(roomId, body) {
      var postBody = body;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling addUserToRoom");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addUserToRoom");
      }

      var pathParams = {
        'roomId': roomId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AddUserToRoomSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a user
     * If the logged in user is not register into the wanted room, and if he hasn't a 'moderator' privilege, a (403) forbidden error is sent.    Creating a user with the privilege 'moderator' is sometimes barred (feature BUBBLE_PROMOTE_MEMBER)    If the user to add is already registered (declared in the room and `status` is not `deleted`), a (409) conflict error is sent.    If not the user is either created or updated with `status` being `invited`.
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {module:model/AddUserToRoom} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddUserToRoomSuccess}
     */
    this.addUserToRoom = function(roomId, body) {
      return this.addUserToRoomWithHttpInfo(roomId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all active users from a room
     * get active users from a room. A user is considered as 'active' when his status is 'invited' or 'accepted' Example: GET /api/rainbow/enduser/v1.0/rooms/5841475f9f4ceb902756326e/users?format=full&sortField=lastName
     * @param {String} roomId - room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less user details in response, besides specifics data about room users like (privilege, status and additionDate)    - `small`: userId loginEmail displayName jid_im    - `medium`: userId loginEmail displayName jid_im status additionDate privilege firstName lastName companyId companyName    - `full`: userId loginEmail displayName jid_im status additionDate privilege firstName lastName nickName title jobTitle emails country language timezone companyId companyName roles adminType
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.privilege Allows to filter users list on the privilege type provided in this option.
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoomActiveUsersSuccess} and HTTP response
     */
    this.getRoomActiveUsersWithHttpInfo = function(roomId, accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling getRoomActiveUsers");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRoomActiveUsers");
      }

      var pathParams = {
        'roomId': roomId
      };
      var queryParams = {
        'format': opts['format'],
        'sortField': opts['sortField'],
        'privilege': opts['privilege'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetRoomActiveUsersSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all active users from a room
     * get active users from a room. A user is considered as 'active' when his status is 'invited' or 'accepted' Example: GET /api/rainbow/enduser/v1.0/rooms/5841475f9f4ceb902756326e/users?format=full&sortField=lastName
     * @param {String} roomId - room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less user details in response, besides specifics data about room users like (privilege, status and additionDate)    - `small`: userId loginEmail displayName jid_im    - `medium`: userId loginEmail displayName jid_im status additionDate privilege firstName lastName companyId companyName    - `full`: userId loginEmail displayName jid_im status additionDate privilege firstName lastName nickName title jobTitle emails country language timezone companyId companyName roles adminType
     * @param {String} opts.sortField Sort items list based on the given field
     * @param {String} opts.privilege Allows to filter users list on the privilege type provided in this option.
     * @param {Number} opts.limit Allow to specify the number of items to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first item to retrieve (first item if not specified). Warning: if offset > total, no results are returned.
     * @param {Number} opts.sortOrder Specify order when sorting items list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoomActiveUsersSuccess}
     */
    this.getRoomActiveUsers = function(roomId, accept, opts) {
      return this.getRoomActiveUsersWithHttpInfo(roomId, accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user room data
     * If the logged in user is not register into the wanted room , a forbidden error is sent.
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} userId User unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetUserRoomDataSuccess} and HTTP response
     */
    this.getUserRoomDataWithHttpInfo = function(roomId, userId, accept) {
      var postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling getUserRoomData");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserRoomData");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUserRoomData");
      }

      var pathParams = {
        'roomId': roomId,
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUserRoomDataSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/users/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user room data
     * If the logged in user is not register into the wanted room , a forbidden error is sent.
     * @param {String} roomId Room unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {String} userId User unique identifier
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetUserRoomDataSuccess}
     */
    this.getUserRoomData = function(roomId, userId, accept) {
      return this.getUserRoomDataWithHttpInfo(roomId, userId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a user from a room
     * If the logged in user is not registered (declared in the room and `status` is not `deleted`) into the wanted room, and if he hasn't a 'moderator' privilege, a (403) forbidden error is sent.   If the user to update is not registered, a (404) conflict error is sent.   A registered user can delete itself resulting in having it's `status` being `deleted`. A moderator user can delete itself resulting in having it's `status` being `deleted`, but only if another moderator exist to take on. A moderator user can delete another user resulting in deleting the user from the room (not simply `status` being `deleted`).
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)    A message stanza with the new status is sent to all room users.        ```html <message           from= 'a portal client connected'           to='room user jid'           id='lh2bs617'           type='management'           xmlns: 'jabber :client' >           <room               roomid : mongoid of the room               roomjid: jid of the room               userjid : jid of the modified user               status : new status of the modified user           />    </message> ```    A message stanza is sent to room users as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's deleted display name has left the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name: 'leave'                 jid: 'deleted user's jid' />    </message> ``` 
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemoveUserFromRoomSuccess} and HTTP response
     */
    this.removeUserFromRoomWithHttpInfo = function(roomId, userId, accept) {
      var postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling removeUserFromRoom");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUserFromRoom");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling removeUserFromRoom");
      }

      var pathParams = {
        'roomId': roomId,
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RemoveUserFromRoomSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/users/{userId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a user from a room
     * If the logged in user is not registered (declared in the room and `status` is not `deleted`) into the wanted room, and if he hasn't a 'moderator' privilege, a (403) forbidden error is sent.   If the user to update is not registered, a (404) conflict error is sent.   A registered user can delete itself resulting in having it's `status` being `deleted`. A moderator user can delete itself resulting in having it's `status` being `deleted`, but only if another moderator exist to take on. A moderator user can delete another user resulting in deleting the user from the room (not simply `status` being `deleted`).
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)    A message stanza with the new status is sent to all room users.        ```html <message           from= 'a portal client connected'           to='room user jid'           id='lh2bs617'           type='management'           xmlns: 'jabber :client' >           <room               roomid : mongoid of the room               roomjid: jid of the room               userjid : jid of the modified user               status : new status of the modified user           />    </message> ```    A message stanza is sent to room users as a private room message. This allow clients to display notifications:        ```html <message           from='room jid'           to='room jid/user's nic'>            <x body  user's deleted display name has left the bubble </body&gt            <x event xmlns='jabber:iq:configuration'                 name: 'leave'                 jid: 'deleted user's jid' />    </message> ``` 
     * @param {String} accept application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemoveUserFromRoomSuccess}
     */
    this.removeUserFromRoom = function(roomId, userId, accept) {
      return this.removeUserFromRoomWithHttpInfo(roomId, userId, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change a user data
     * If the logged in user is not registered (declared in the room and `status` is not `deleted`) into the wanted room, and if he hasn't a 'moderator' privilege, a (403) forbidden error is sent.   If the user to update is not registered, a (404) conflict error is sent.   If the body parameter is missed, a (400) bad request error is sent.   If the body parameter is set to 'empty string', the default privilege 'user' is set.   The logged in user can't update himself. As a result, a 'moderator' can't be downgraded to 'user'.    Promoting a user with the privilege 'moderator' is sometimes barred (403) (feature BUBBLE_PROMOTE_MEMBER)
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/UpdateUserData} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateUserDataSuccess} and HTTP response
     */
    this.updateUserDataWithHttpInfo = function(roomId, userId, body) {
      var postBody = body;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling updateUserData");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserData");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUserData");
      }

      var pathParams = {
        'roomId': roomId,
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateUserDataSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/enduser/v1.0/rooms/{roomId}/users/{userId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change a user data
     * If the logged in user is not registered (declared in the room and `status` is not `deleted`) into the wanted room, and if he hasn't a 'moderator' privilege, a (403) forbidden error is sent.   If the user to update is not registered, a (404) conflict error is sent.   If the body parameter is missed, a (400) bad request error is sent.   If the body parameter is set to 'empty string', the default privilege 'user' is set.   The logged in user can't update himself. As a result, a 'moderator' can't be downgraded to 'user'.    Promoting a user with the privilege 'moderator' is sometimes barred (403) (feature BUBBLE_PROMOTE_MEMBER)
     * @param {String} roomId Room unique identifier (like 56f3f51a76e0bf767ed45325)
     * @param {String} userId User unique identifier (like 56f42c1914e2a8a91b99e595)
     * @param {module:model/UpdateUserData} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateUserDataSuccess}
     */
    this.updateUserData = function(roomId, userId, body) {
      return this.updateUserDataWithHttpInfo(roomId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
