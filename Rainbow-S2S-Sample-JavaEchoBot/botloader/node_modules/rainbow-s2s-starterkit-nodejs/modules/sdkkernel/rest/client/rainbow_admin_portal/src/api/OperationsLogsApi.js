/**
 * Rainbow admin portal
 * # Rainbow administrator portal API guide  ## Preamble  ### Introduction  This guide describes list of API services that are provided by OT Rainbow management portal system. Services are used to manage OT Rainbow system entities  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP requests GET, DELETE, POST, UPDATE are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.82.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.1.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetOperationLogSuccess'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetOperationLogSuccess'));
  } else {
    // Browser globals (root is window)
    if (!root.RainbowAdminPortal) {
      root.RainbowAdminPortal = {};
    }
    root.RainbowAdminPortal.OperationsLogsApi = factory(root.RainbowAdminPortal.ApiClient, root.RainbowAdminPortal.GetOperationLogSuccess);
  }
}(this, function(ApiClient, GetOperationLogSuccess) {
  'use strict';

  /**
   * OperationsLogs service.
   * @module api/OperationsLogsApi
   * @version 1.82.0
   */

  /**
   * Constructs a new OperationsLogsApi. 
   * @alias module:api/OperationsLogsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get operation logs
     * This API can be used to list operation logs.       When operations are done by an admin on subscription or profile (for now), an operation log is stored with the details regarding the operation.    Each operation log details:    - which resource has been updated (type and unique identifier),    - who performed the operation (userId, loginEmail, companyId, companyName),    - when the operation has been performed (operationDate),    - what is the type of operation (operationType: create/update/delete),    - how were the data before the operation (previousData),    - how are the data after the operation (newData).    A context regarding the resource for which the operation has been performed is also stored (resourceContext). At least the companyId is stored, allowing to filter on the companies for which the operation has been carried out.       The operation logs can be filtered based on several fields. By default, operation logs are sorted by descending operationDate (from the youngest to the oldest).    Examples:    - All operations for all the company manageable by the logged in administrator (format small): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations    - All operations done on subscription resource for all the company manageable by the logged in administrator (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription    - All operations done on subscription resource from 2017-10-01 for all the company manageable by the logged in administrator (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription&fromDate=2017-10-01    - All operations done on subscription resource between 2017-10-15 12:00:00 and 2017-10-15 12:30:00 for all the company manageable by the logged in administrator (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription&fromDate=2017-10-15 12:00:00toDate=2017-10-15 12:30:00    - All operations done on subscription resource for company 59bbbda83c43dba62752b48e from 2017-10-01 (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription&fromDate=2017-10-01&resourceContextCompanyId=59bbbda83c43dba62752b48e
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less operation log details in response.    - `small`: id operationDate operationType resourceType resourceId    - `medium`: id operationDate operationType resourceType resourceId doneBy resourceContext    - `full`: all log fields (id operationDate operationType operationMessage resourceType resourceId doneBy resourceContext previousData newData)
     * @param {Number} opts.limit Allow to specify the number of operation logs to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first operation log to retrieve (first operation log if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort operation logs list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting operation log list.
     * @param {Date} opts.fromDate Allows to filter operation logs from provided date (ISO 8601 format).
     * @param {Date} opts.toDate Allows to filter operation logs until provided date (ISO 8601 format).
     * @param {String} opts.resourceContextCompanyId Allows to filter operation logs on field resourceContext.companyId.    This allows to retrieve logs for a given company on which the operation has been performed (by default, if this filter is not provided, all the logs regarding all companies the administrator has right to manage are returned).    Only companies manageable by the administrator can be provided in the filter. If a company not manageable by the admin is provided, this one is excluded from the filter (i.e. no logs regarding this company will be returned, as the administrator has no rights to manage this company).
     * @param {String} opts.resourceContextCompanyName Allows to filter operation logs on field resourceContext.companyName.       This allows to search logs based on target company name. The filtering is case insensitive and on partial name match: all companies **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _comp_, companies with the following names are match the filter 'My company', 'Company', 'A comp 1', 'Comp of comps', ...    Filter applies on companies manageable by the administrator.
     * @param {String} opts.resourceContextUserId Allows to filter operation logs on field resourceContext.userId.    This allows to retrieve logs for a given user on which the operation has been performed.    For now, only usable for resourceType=`profile`.
     * @param {String} opts.doneByCompanyId Allows to filter operation logs on field doneBy.companyId.    This allows to retrieve logs of operations performed by administrators of a given company.
     * @param {String} opts.operationType Allows to filter operation logs on field operationType.    This allows to retrieve logs for the requested operation type.
     * @param {String} opts.resourceType Allows to filter operation logs on field resourceType.    This allows to retrieve logs for the requested resource type.
     * @param {String} opts.resourceId Allows to filter operation logs on field resourceId.    This allows to retrieve logs for operations performed on the requested resource.    Note: as profiles does not have an id, resourceId of operation logs with resourceType=profile is the userId of the user owning the profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOperationLogSuccess} and HTTP response
     */
    this.getOperationLogWithHttpInfo = function(accept, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOperationLog");
      }

      var pathParams = {
      };
      var queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'resourceContextCompanyId': opts['resourceContextCompanyId'],
        'resourceContextCompanyName': opts['resourceContextCompanyName'],
        'resourceContextUserId': opts['resourceContextUserId'],
        'doneByCompanyId': opts['doneByCompanyId'],
        'operationType': opts['operationType'],
        'resourceType': opts['resourceType'],
        'resourceId': opts['resourceId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'accept': accept
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetOperationLogSuccess;
      return this.apiClient.callApi(
        '/api/rainbow/admin/v1.0/logs/operations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get operation logs
     * This API can be used to list operation logs.       When operations are done by an admin on subscription or profile (for now), an operation log is stored with the details regarding the operation.    Each operation log details:    - which resource has been updated (type and unique identifier),    - who performed the operation (userId, loginEmail, companyId, companyName),    - when the operation has been performed (operationDate),    - what is the type of operation (operationType: create/update/delete),    - how were the data before the operation (previousData),    - how are the data after the operation (newData).    A context regarding the resource for which the operation has been performed is also stored (resourceContext). At least the companyId is stored, allowing to filter on the companies for which the operation has been carried out.       The operation logs can be filtered based on several fields. By default, operation logs are sorted by descending operationDate (from the youngest to the oldest).    Examples:    - All operations for all the company manageable by the logged in administrator (format small): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations    - All operations done on subscription resource for all the company manageable by the logged in administrator (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription    - All operations done on subscription resource from 2017-10-01 for all the company manageable by the logged in administrator (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription&fromDate=2017-10-01    - All operations done on subscription resource between 2017-10-15 12:00:00 and 2017-10-15 12:30:00 for all the company manageable by the logged in administrator (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription&fromDate=2017-10-15 12:00:00toDate=2017-10-15 12:30:00    - All operations done on subscription resource for company 59bbbda83c43dba62752b48e from 2017-10-01 (format full): GET https://openrainbow.com/api/rainbow/admin/v1.0/logs/operations?format=full&resourceType=subscription&fromDate=2017-10-01&resourceContextCompanyId=59bbbda83c43dba62752b48e
     * @param {String} accept application/json
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Allows to retrieve more or less operation log details in response.    - `small`: id operationDate operationType resourceType resourceId    - `medium`: id operationDate operationType resourceType resourceId doneBy resourceContext    - `full`: all log fields (id operationDate operationType operationMessage resourceType resourceId doneBy resourceContext previousData newData)
     * @param {Number} opts.limit Allow to specify the number of operation logs to retrieve.
     * @param {Number} opts.offset Allow to specify the position of first operation log to retrieve (first operation log if not specified). Warning: if offset > total, no results are returned.
     * @param {String} opts.sortField Sort operation logs list based on the given field.
     * @param {Number} opts.sortOrder Specify order when sorting operation log list.
     * @param {Date} opts.fromDate Allows to filter operation logs from provided date (ISO 8601 format).
     * @param {Date} opts.toDate Allows to filter operation logs until provided date (ISO 8601 format).
     * @param {String} opts.resourceContextCompanyId Allows to filter operation logs on field resourceContext.companyId.    This allows to retrieve logs for a given company on which the operation has been performed (by default, if this filter is not provided, all the logs regarding all companies the administrator has right to manage are returned).    Only companies manageable by the administrator can be provided in the filter. If a company not manageable by the admin is provided, this one is excluded from the filter (i.e. no logs regarding this company will be returned, as the administrator has no rights to manage this company).
     * @param {String} opts.resourceContextCompanyName Allows to filter operation logs on field resourceContext.companyName.       This allows to search logs based on target company name. The filtering is case insensitive and on partial name match: all companies **containing** the provided name value will be returned (whatever the position of the match).    Ex: if filtering is done on _comp_, companies with the following names are match the filter 'My company', 'Company', 'A comp 1', 'Comp of comps', ...    Filter applies on companies manageable by the administrator.
     * @param {String} opts.resourceContextUserId Allows to filter operation logs on field resourceContext.userId.    This allows to retrieve logs for a given user on which the operation has been performed.    For now, only usable for resourceType=`profile`.
     * @param {String} opts.doneByCompanyId Allows to filter operation logs on field doneBy.companyId.    This allows to retrieve logs of operations performed by administrators of a given company.
     * @param {String} opts.operationType Allows to filter operation logs on field operationType.    This allows to retrieve logs for the requested operation type.
     * @param {String} opts.resourceType Allows to filter operation logs on field resourceType.    This allows to retrieve logs for the requested resource type.
     * @param {String} opts.resourceId Allows to filter operation logs on field resourceId.    This allows to retrieve logs for operations performed on the requested resource.    Note: as profiles does not have an id, resourceId of operation logs with resourceType=profile is the userId of the user owning the profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOperationLogSuccess}
     */
    this.getOperationLog = function(accept, opts) {
      return this.getOperationLogWithHttpInfo(accept, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
