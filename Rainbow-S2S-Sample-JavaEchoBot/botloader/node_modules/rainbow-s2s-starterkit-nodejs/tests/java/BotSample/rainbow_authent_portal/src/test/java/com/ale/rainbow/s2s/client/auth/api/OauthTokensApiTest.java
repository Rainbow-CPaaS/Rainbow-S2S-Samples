/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.api;

import com.ale.rainbow.s2s.client.auth.ApiException;
import java.math.BigDecimal;
import com.ale.rainbow.s2s.client.auth.models.DeleteOAuthTokenSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetOAuthTokenByIdSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetOAuthTokenSuccess;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OauthTokensApi
 */
@Ignore
public class OauthTokensApiTest {

    private final OauthTokensApi api = new OauthTokensApi();

    
    /**
     * Delete an OAuth token
     *
     * This API allows users to revoke OAuth token they have previously granted for applications. &lt;br/&gt; &lt;br/&gt; Once an OAuth token is revoked, the application for which this token has been issued will no longer be able to use Rainbow APIs in the name of the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOAuthTokenTest() throws ApiException {
        String tokenId = null;
        String accept = null;
        DeleteOAuthTokenSuccess response = api.deleteOAuthToken(tokenId, accept);

        // TODO: test validations
    }
    
    /**
     * Get all OAuth token
     *
     * This API allows users to list all OAuth tokens they have generated. &lt;br/&gt; &lt;br/&gt; An OAuth token is generated when an application logs a user using OAuth 2.0 protocol. An OAuth token gives the possibility for the application to use Rainbow APIs in the name of the user (delegation).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOAuthTokenTest() throws ApiException {
        String accept = null;
        String format = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String sortField = null;
        BigDecimal sortOrder = null;
        GetOAuthTokenSuccess response = api.getOAuthToken(accept, format, limit, offset, sortField, sortOrder);

        // TODO: test validations
    }
    
    /**
     * Get an OAuth token
     *
     * This API allows users to get an OAuth token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOAuthTokenByIdTest() throws ApiException {
        String tokenId = null;
        String accept = null;
        GetOAuthTokenByIdSuccess response = api.getOAuthTokenById(tokenId, accept);

        // TODO: test validations
    }
    
}
