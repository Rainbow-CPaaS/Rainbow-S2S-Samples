/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.api;

import com.ale.rainbow.s2s.client.auth.ApiCallback;
import com.ale.rainbow.s2s.client.auth.ApiClient;
import com.ale.rainbow.s2s.client.auth.ApiException;
import com.ale.rainbow.s2s.client.auth.ApiResponse;
import com.ale.rainbow.s2s.client.auth.Configuration;
import com.ale.rainbow.s2s.client.auth.Pair;
import com.ale.rainbow.s2s.client.auth.ProgressRequestBody;
import com.ale.rainbow.s2s.client.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ale.rainbow.s2s.client.auth.models.GetApiRainbowAuthenticationV10ValidatorSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetBasicLoginSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetLogoutSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetRenewSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getApiRainbowAuthenticationV10Validator
     * @param accept application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiRainbowAuthenticationV10ValidatorCall(String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/validator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiRainbowAuthenticationV10ValidatorValidateBeforeCall(String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getApiRainbowAuthenticationV10Validator(Async)");
        }
        

        okhttp3.Call localVarCall = getApiRainbowAuthenticationV10ValidatorCall(accept, _callback);
        return localVarCall;

    }

    /**
     * Validate user JWT
     * This API allows to get a validation status on a token.
     * @param accept application/json (required)
     * @return GetApiRainbowAuthenticationV10ValidatorSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetApiRainbowAuthenticationV10ValidatorSuccess getApiRainbowAuthenticationV10Validator(String accept) throws ApiException {
        ApiResponse<GetApiRainbowAuthenticationV10ValidatorSuccess> localVarResp = getApiRainbowAuthenticationV10ValidatorWithHttpInfo(accept);
        return localVarResp.getData();
    }

    /**
     * Validate user JWT
     * This API allows to get a validation status on a token.
     * @param accept application/json (required)
     * @return ApiResponse&lt;GetApiRainbowAuthenticationV10ValidatorSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetApiRainbowAuthenticationV10ValidatorSuccess> getApiRainbowAuthenticationV10ValidatorWithHttpInfo(String accept) throws ApiException {
        okhttp3.Call localVarCall = getApiRainbowAuthenticationV10ValidatorValidateBeforeCall(accept, null);
        Type localVarReturnType = new TypeToken<GetApiRainbowAuthenticationV10ValidatorSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate user JWT (asynchronously)
     * This API allows to get a validation status on a token.
     * @param accept application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiRainbowAuthenticationV10ValidatorAsync(String accept, final ApiCallback<GetApiRainbowAuthenticationV10ValidatorSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiRainbowAuthenticationV10ValidatorValidateBeforeCall(accept, _callback);
        Type localVarReturnType = new TypeToken<GetApiRainbowAuthenticationV10ValidatorSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBasicLogin
     * @param xRainbowAppAuth Basic &lt;base64encode(appId:sha256(appSecretuserPassword))&gt; (concatenation of appSecret and userPassword, hashed with sha256) (required)
     * @param accept application/json (required)
     * @param xRainbowClient the app used (optional)
     * @param xRainbowClientVersion 1.10.7 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBasicLoginCall(String xRainbowAppAuth, String accept, String xRainbowClient, String xRainbowClientVersion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRainbowAppAuth != null) {
            localVarHeaderParams.put("x-rainbow-app-auth", localVarApiClient.parameterToString(xRainbowAppAuth));
        }

        if (xRainbowClient != null) {
            localVarHeaderParams.put("x-rainbow-client", localVarApiClient.parameterToString(xRainbowClient));
        }

        if (xRainbowClientVersion != null) {
            localVarHeaderParams.put("x-rainbow-client-version", localVarApiClient.parameterToString(xRainbowClientVersion));
        }

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasicLoginValidateBeforeCall(String xRainbowAppAuth, String accept, String xRainbowClient, String xRainbowClientVersion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xRainbowAppAuth' is set
        if (xRainbowAppAuth == null) {
            throw new ApiException("Missing the required parameter 'xRainbowAppAuth' when calling getBasicLogin(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getBasicLogin(Async)");
        }
        

        okhttp3.Call localVarCall = getBasicLoginCall(xRainbowAppAuth, accept, xRainbowClient, xRainbowClientVersion, _callback);
        return localVarCall;

    }

    /**
     * Login user
     * This API allows Rainbow users to login. &lt;br/&gt; &lt;br/&gt; Application is also authenticated during the user login. &lt;br/&gt; &lt;br/&gt; If login is successful, the API returns a &lt;b&gt;JSON Web Token&lt;/b&gt; (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;) which has to be provided by clients for all Rainbow APIs requiring user authentication: &lt;ul&gt;     &lt;li&gt;The JWT is valid only for a given time period.&lt;/li&gt;     &lt;li&gt;The JWT can be renewed a few times using API &lt;a href&#x3D;\&quot;#api-authentication-GetRenew\&quot;&gt;GET /api/rainbow/authentication/v1.0/renew&lt;/a&gt;.&lt;/li&gt;     &lt;li&gt;The maximum number of renew is given in the JWT payload, as well as the current number of time the token has been renewed (see below).&lt;/li&gt;     &lt;li&gt;Once the JWT expired, or if the maximum of token renew has been reached, user must login again using this API.&lt;/li&gt; &lt;/ul&gt; The JWT returned contains the following data in payload: &lt;pre&gt;&lt;code class&#x3D;\&quot;language-json\&quot;&gt;{       \&quot;countRenewed\&quot;: 0,  // Number of times the token has been renewed       \&quot;maxTokenRenew\&quot;: 5,  // Number of times the token can be renewed       \&quot;user\&quot;: {           \&quot;id\&quot;: \&quot;572756967bfbca0d0e09a6b4\&quot;,  // Logged in user id           \&quot;loginEmail\&quot;: \&quot;user@company.com\&quot;  // Logged in user loginEmail       },       \&quot;app\&quot;: {           \&quot;id\&quot;: \&quot;598983029db9b5b14693a6f0\&quot;,  // Application id used for the authentication           \&quot;name\&quot;: \&quot;My App\&quot;  // Application name       },       \&quot;iat\&quot;: 1463588327,  // (Issued At) Time at which the JWT was issued       \&quot;exp\&quot;: 2183588327  // (Expiration Time) Expiration time after which the JWT won&#39;t be accepted }&lt;/code&gt;&lt;/pre&gt; &lt;br/&gt; &lt;br/&gt; If login / password combination is wrong, an error 401 is return. &lt;br/&gt; If appId / appSecret combination is wrong, an error 401 is return. &lt;br/&gt;The following login protection is implemented: &lt;ul&gt;     &lt;li&gt;After a given number of login failure (5 by default), the user account is &lt;b&gt;locked&lt;/b&gt; for a given time period (60 min by default).&lt;/li&gt;     &lt;li&gt;As long as the maximum number of login failure has not been reached, a 401 error with errorDetailsCode &lt;code&gt;401500&lt;/code&gt; is returned.&lt;/li&gt;     &lt;li&gt;Once the maximum number of login attempts has been reached, a 401 error with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; is returned: the user account is locked for the given time period.&lt;/li&gt;     &lt;li&gt;While the user account is locked, the same response with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; will be returned for each new login attempt for this user account     (even if a good login / password combination is provided). If the login / password combination is wrong, the locked time period restarts from this new wrong attempt.&lt;/li&gt;     &lt;li&gt;Once the locked time period is over, a login with the good credentials will be allowed.&lt;/li&gt;     &lt;li&gt;While the account is locked, the user can reset his password. In that case, his account will be unlocked and he will be able to login with his new password.&lt;/li&gt;     &lt;li&gt;While the account is locked, a superadmin / support / admin (organisation or company level) user can set a new password for this account. In that case, this account will be unlocked     and the user will be able to login with this new password.&lt;/li&gt; &lt;/ul&gt; &lt;dl&gt;     &lt;dt&gt;Warning&lt;/dt&gt;     &lt;dd&gt;login url is case sensitive (lowercase). For example, /Login or /LOGIN won&#39;t work.&lt;/dd&gt;     &lt;dd&gt;login will be forbidden for a certain delay if too much consecutive wrong password errors occurs, after this user has to request a password change or just wait (see implementation details above).&lt;/dd&gt; &lt;/dl&gt; &lt;br/&gt;
     * @param xRainbowAppAuth Basic &lt;base64encode(appId:sha256(appSecretuserPassword))&gt; (concatenation of appSecret and userPassword, hashed with sha256) (required)
     * @param accept application/json (required)
     * @param xRainbowClient the app used (optional)
     * @param xRainbowClientVersion 1.10.7 (optional)
     * @return GetBasicLoginSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetBasicLoginSuccess getBasicLogin(String xRainbowAppAuth, String accept, String xRainbowClient, String xRainbowClientVersion) throws ApiException {
        ApiResponse<GetBasicLoginSuccess> localVarResp = getBasicLoginWithHttpInfo(xRainbowAppAuth, accept, xRainbowClient, xRainbowClientVersion);
        return localVarResp.getData();
    }

    /**
     * Login user
     * This API allows Rainbow users to login. &lt;br/&gt; &lt;br/&gt; Application is also authenticated during the user login. &lt;br/&gt; &lt;br/&gt; If login is successful, the API returns a &lt;b&gt;JSON Web Token&lt;/b&gt; (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;) which has to be provided by clients for all Rainbow APIs requiring user authentication: &lt;ul&gt;     &lt;li&gt;The JWT is valid only for a given time period.&lt;/li&gt;     &lt;li&gt;The JWT can be renewed a few times using API &lt;a href&#x3D;\&quot;#api-authentication-GetRenew\&quot;&gt;GET /api/rainbow/authentication/v1.0/renew&lt;/a&gt;.&lt;/li&gt;     &lt;li&gt;The maximum number of renew is given in the JWT payload, as well as the current number of time the token has been renewed (see below).&lt;/li&gt;     &lt;li&gt;Once the JWT expired, or if the maximum of token renew has been reached, user must login again using this API.&lt;/li&gt; &lt;/ul&gt; The JWT returned contains the following data in payload: &lt;pre&gt;&lt;code class&#x3D;\&quot;language-json\&quot;&gt;{       \&quot;countRenewed\&quot;: 0,  // Number of times the token has been renewed       \&quot;maxTokenRenew\&quot;: 5,  // Number of times the token can be renewed       \&quot;user\&quot;: {           \&quot;id\&quot;: \&quot;572756967bfbca0d0e09a6b4\&quot;,  // Logged in user id           \&quot;loginEmail\&quot;: \&quot;user@company.com\&quot;  // Logged in user loginEmail       },       \&quot;app\&quot;: {           \&quot;id\&quot;: \&quot;598983029db9b5b14693a6f0\&quot;,  // Application id used for the authentication           \&quot;name\&quot;: \&quot;My App\&quot;  // Application name       },       \&quot;iat\&quot;: 1463588327,  // (Issued At) Time at which the JWT was issued       \&quot;exp\&quot;: 2183588327  // (Expiration Time) Expiration time after which the JWT won&#39;t be accepted }&lt;/code&gt;&lt;/pre&gt; &lt;br/&gt; &lt;br/&gt; If login / password combination is wrong, an error 401 is return. &lt;br/&gt; If appId / appSecret combination is wrong, an error 401 is return. &lt;br/&gt;The following login protection is implemented: &lt;ul&gt;     &lt;li&gt;After a given number of login failure (5 by default), the user account is &lt;b&gt;locked&lt;/b&gt; for a given time period (60 min by default).&lt;/li&gt;     &lt;li&gt;As long as the maximum number of login failure has not been reached, a 401 error with errorDetailsCode &lt;code&gt;401500&lt;/code&gt; is returned.&lt;/li&gt;     &lt;li&gt;Once the maximum number of login attempts has been reached, a 401 error with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; is returned: the user account is locked for the given time period.&lt;/li&gt;     &lt;li&gt;While the user account is locked, the same response with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; will be returned for each new login attempt for this user account     (even if a good login / password combination is provided). If the login / password combination is wrong, the locked time period restarts from this new wrong attempt.&lt;/li&gt;     &lt;li&gt;Once the locked time period is over, a login with the good credentials will be allowed.&lt;/li&gt;     &lt;li&gt;While the account is locked, the user can reset his password. In that case, his account will be unlocked and he will be able to login with his new password.&lt;/li&gt;     &lt;li&gt;While the account is locked, a superadmin / support / admin (organisation or company level) user can set a new password for this account. In that case, this account will be unlocked     and the user will be able to login with this new password.&lt;/li&gt; &lt;/ul&gt; &lt;dl&gt;     &lt;dt&gt;Warning&lt;/dt&gt;     &lt;dd&gt;login url is case sensitive (lowercase). For example, /Login or /LOGIN won&#39;t work.&lt;/dd&gt;     &lt;dd&gt;login will be forbidden for a certain delay if too much consecutive wrong password errors occurs, after this user has to request a password change or just wait (see implementation details above).&lt;/dd&gt; &lt;/dl&gt; &lt;br/&gt;
     * @param xRainbowAppAuth Basic &lt;base64encode(appId:sha256(appSecretuserPassword))&gt; (concatenation of appSecret and userPassword, hashed with sha256) (required)
     * @param accept application/json (required)
     * @param xRainbowClient the app used (optional)
     * @param xRainbowClientVersion 1.10.7 (optional)
     * @return ApiResponse&lt;GetBasicLoginSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBasicLoginSuccess> getBasicLoginWithHttpInfo(String xRainbowAppAuth, String accept, String xRainbowClient, String xRainbowClientVersion) throws ApiException {
        okhttp3.Call localVarCall = getBasicLoginValidateBeforeCall(xRainbowAppAuth, accept, xRainbowClient, xRainbowClientVersion, null);
        Type localVarReturnType = new TypeToken<GetBasicLoginSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Login user (asynchronously)
     * This API allows Rainbow users to login. &lt;br/&gt; &lt;br/&gt; Application is also authenticated during the user login. &lt;br/&gt; &lt;br/&gt; If login is successful, the API returns a &lt;b&gt;JSON Web Token&lt;/b&gt; (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;) which has to be provided by clients for all Rainbow APIs requiring user authentication: &lt;ul&gt;     &lt;li&gt;The JWT is valid only for a given time period.&lt;/li&gt;     &lt;li&gt;The JWT can be renewed a few times using API &lt;a href&#x3D;\&quot;#api-authentication-GetRenew\&quot;&gt;GET /api/rainbow/authentication/v1.0/renew&lt;/a&gt;.&lt;/li&gt;     &lt;li&gt;The maximum number of renew is given in the JWT payload, as well as the current number of time the token has been renewed (see below).&lt;/li&gt;     &lt;li&gt;Once the JWT expired, or if the maximum of token renew has been reached, user must login again using this API.&lt;/li&gt; &lt;/ul&gt; The JWT returned contains the following data in payload: &lt;pre&gt;&lt;code class&#x3D;\&quot;language-json\&quot;&gt;{       \&quot;countRenewed\&quot;: 0,  // Number of times the token has been renewed       \&quot;maxTokenRenew\&quot;: 5,  // Number of times the token can be renewed       \&quot;user\&quot;: {           \&quot;id\&quot;: \&quot;572756967bfbca0d0e09a6b4\&quot;,  // Logged in user id           \&quot;loginEmail\&quot;: \&quot;user@company.com\&quot;  // Logged in user loginEmail       },       \&quot;app\&quot;: {           \&quot;id\&quot;: \&quot;598983029db9b5b14693a6f0\&quot;,  // Application id used for the authentication           \&quot;name\&quot;: \&quot;My App\&quot;  // Application name       },       \&quot;iat\&quot;: 1463588327,  // (Issued At) Time at which the JWT was issued       \&quot;exp\&quot;: 2183588327  // (Expiration Time) Expiration time after which the JWT won&#39;t be accepted }&lt;/code&gt;&lt;/pre&gt; &lt;br/&gt; &lt;br/&gt; If login / password combination is wrong, an error 401 is return. &lt;br/&gt; If appId / appSecret combination is wrong, an error 401 is return. &lt;br/&gt;The following login protection is implemented: &lt;ul&gt;     &lt;li&gt;After a given number of login failure (5 by default), the user account is &lt;b&gt;locked&lt;/b&gt; for a given time period (60 min by default).&lt;/li&gt;     &lt;li&gt;As long as the maximum number of login failure has not been reached, a 401 error with errorDetailsCode &lt;code&gt;401500&lt;/code&gt; is returned.&lt;/li&gt;     &lt;li&gt;Once the maximum number of login attempts has been reached, a 401 error with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; is returned: the user account is locked for the given time period.&lt;/li&gt;     &lt;li&gt;While the user account is locked, the same response with errorDetailsCode &lt;code&gt;401501&lt;/code&gt; will be returned for each new login attempt for this user account     (even if a good login / password combination is provided). If the login / password combination is wrong, the locked time period restarts from this new wrong attempt.&lt;/li&gt;     &lt;li&gt;Once the locked time period is over, a login with the good credentials will be allowed.&lt;/li&gt;     &lt;li&gt;While the account is locked, the user can reset his password. In that case, his account will be unlocked and he will be able to login with his new password.&lt;/li&gt;     &lt;li&gt;While the account is locked, a superadmin / support / admin (organisation or company level) user can set a new password for this account. In that case, this account will be unlocked     and the user will be able to login with this new password.&lt;/li&gt; &lt;/ul&gt; &lt;dl&gt;     &lt;dt&gt;Warning&lt;/dt&gt;     &lt;dd&gt;login url is case sensitive (lowercase). For example, /Login or /LOGIN won&#39;t work.&lt;/dd&gt;     &lt;dd&gt;login will be forbidden for a certain delay if too much consecutive wrong password errors occurs, after this user has to request a password change or just wait (see implementation details above).&lt;/dd&gt; &lt;/dl&gt; &lt;br/&gt;
     * @param xRainbowAppAuth Basic &lt;base64encode(appId:sha256(appSecretuserPassword))&gt; (concatenation of appSecret and userPassword, hashed with sha256) (required)
     * @param accept application/json (required)
     * @param xRainbowClient the app used (optional)
     * @param xRainbowClientVersion 1.10.7 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBasicLoginAsync(String xRainbowAppAuth, String accept, String xRainbowClient, String xRainbowClientVersion, final ApiCallback<GetBasicLoginSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasicLoginValidateBeforeCall(xRainbowAppAuth, accept, xRainbowClient, xRainbowClientVersion, _callback);
        Type localVarReturnType = new TypeToken<GetBasicLoginSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLogout
     * @param accept application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogoutCall(String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogoutValidateBeforeCall(String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getLogout(Async)");
        }
        

        okhttp3.Call localVarCall = getLogoutCall(accept, _callback);
        return localVarCall;

    }

    /**
     * Logout user
     * 
     * @param accept application/json (required)
     * @return GetLogoutSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetLogoutSuccess getLogout(String accept) throws ApiException {
        ApiResponse<GetLogoutSuccess> localVarResp = getLogoutWithHttpInfo(accept);
        return localVarResp.getData();
    }

    /**
     * Logout user
     * 
     * @param accept application/json (required)
     * @return ApiResponse&lt;GetLogoutSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLogoutSuccess> getLogoutWithHttpInfo(String accept) throws ApiException {
        okhttp3.Call localVarCall = getLogoutValidateBeforeCall(accept, null);
        Type localVarReturnType = new TypeToken<GetLogoutSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logout user (asynchronously)
     * 
     * @param accept application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogoutAsync(String accept, final ApiCallback<GetLogoutSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogoutValidateBeforeCall(accept, _callback);
        Type localVarReturnType = new TypeToken<GetLogoutSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRenew
     * @param accept application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenewCall(String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/renew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRenewValidateBeforeCall(String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getRenew(Async)");
        }
        

        okhttp3.Call localVarCall = getRenewCall(accept, _callback);
        return localVarCall;

    }

    /**
     * Renew user JWT
     * This API allows Rainbow users to renew their JSON Web Token (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;), thus extending the expiration date of their current JWT. &lt;br/&gt; &lt;br/&gt; This API requires user to be authenticated with a valid non expired JWT. &lt;br/&gt; If so, a new JWT is returned, with the expiration date starting from now. &lt;br/&gt; &lt;br/&gt; &lt;b&gt;Warning:&lt;/b&gt; The JWT can only be renewed a given number of times, after this user has to login again to get a new token using API &lt;a href&#x3D;\&quot;#api-authentication-GetLogin\&quot;&gt;GET /api/rainbow/authentication/v1.0/login&lt;/a&gt;. &lt;br/&gt; The maximum number of renew is given in the JWT, as well as the current number of time the token has been renewed.
     * @param accept application/json (required)
     * @return GetRenewSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetRenewSuccess getRenew(String accept) throws ApiException {
        ApiResponse<GetRenewSuccess> localVarResp = getRenewWithHttpInfo(accept);
        return localVarResp.getData();
    }

    /**
     * Renew user JWT
     * This API allows Rainbow users to renew their JSON Web Token (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;), thus extending the expiration date of their current JWT. &lt;br/&gt; &lt;br/&gt; This API requires user to be authenticated with a valid non expired JWT. &lt;br/&gt; If so, a new JWT is returned, with the expiration date starting from now. &lt;br/&gt; &lt;br/&gt; &lt;b&gt;Warning:&lt;/b&gt; The JWT can only be renewed a given number of times, after this user has to login again to get a new token using API &lt;a href&#x3D;\&quot;#api-authentication-GetLogin\&quot;&gt;GET /api/rainbow/authentication/v1.0/login&lt;/a&gt;. &lt;br/&gt; The maximum number of renew is given in the JWT, as well as the current number of time the token has been renewed.
     * @param accept application/json (required)
     * @return ApiResponse&lt;GetRenewSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRenewSuccess> getRenewWithHttpInfo(String accept) throws ApiException {
        okhttp3.Call localVarCall = getRenewValidateBeforeCall(accept, null);
        Type localVarReturnType = new TypeToken<GetRenewSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renew user JWT (asynchronously)
     * This API allows Rainbow users to renew their JSON Web Token (&lt;abbr title&#x3D;\&quot;JSON Web Token\&quot;&gt;JWT&lt;/abbr&gt;), thus extending the expiration date of their current JWT. &lt;br/&gt; &lt;br/&gt; This API requires user to be authenticated with a valid non expired JWT. &lt;br/&gt; If so, a new JWT is returned, with the expiration date starting from now. &lt;br/&gt; &lt;br/&gt; &lt;b&gt;Warning:&lt;/b&gt; The JWT can only be renewed a given number of times, after this user has to login again to get a new token using API &lt;a href&#x3D;\&quot;#api-authentication-GetLogin\&quot;&gt;GET /api/rainbow/authentication/v1.0/login&lt;/a&gt;. &lt;br/&gt; The maximum number of renew is given in the JWT, as well as the current number of time the token has been renewed.
     * @param accept application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenewAsync(String accept, final ApiCallback<GetRenewSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRenewValidateBeforeCall(accept, _callback);
        Type localVarReturnType = new TypeToken<GetRenewSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
