/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.api;

import com.ale.rainbow.s2s.client.auth.ApiCallback;
import com.ale.rainbow.s2s.client.auth.ApiClient;
import com.ale.rainbow.s2s.client.auth.ApiException;
import com.ale.rainbow.s2s.client.auth.ApiResponse;
import com.ale.rainbow.s2s.client.auth.Configuration;
import com.ale.rainbow.s2s.client.auth.Pair;
import com.ale.rainbow.s2s.client.auth.ProgressRequestBody;
import com.ale.rainbow.s2s.client.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ale.rainbow.s2s.client.auth.models.GetSamlAssertionConfigurationSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetSamlAssertionSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetSamlLoginSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetSamlLogoutSuccess;
import com.ale.rainbow.s2s.client.auth.models.PostSamlAssertion;
import com.ale.rainbow.s2s.client.auth.models.PostSamlAssertionSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SamlAuthenticationApi {
    private ApiClient localVarApiClient;

    public SamlAuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SamlAuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getSamlAssertion
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlAssertionCall(String companyId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/saml/{companyId}/assert"
            .replaceAll("\\{" + "companyId" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/unknown"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSamlAssertionValidateBeforeCall(String companyId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSamlAssertion(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getSamlAssertion(Async)");
        }
        

        okhttp3.Call localVarCall = getSamlAssertionCall(companyId, accept, _callback);
        return localVarCall;

    }

    /**
     * IDP logout response
     * This API allows IDP server to respond to SAML logout request or ask for SAML logout.
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getSamlAssertion(String companyId, String accept) throws ApiException {
        getSamlAssertionWithHttpInfo(companyId, accept);
    }

    /**
     * IDP logout response
     * This API allows IDP server to respond to SAML logout request or ask for SAML logout.
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSamlAssertionWithHttpInfo(String companyId, String accept) throws ApiException {
        okhttp3.Call localVarCall = getSamlAssertionValidateBeforeCall(companyId, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * IDP logout response (asynchronously)
     * This API allows IDP server to respond to SAML logout request or ask for SAML logout.
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlAssertionAsync(String companyId, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSamlAssertionValidateBeforeCall(companyId, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSamlAssertionConfiguration
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlAssertionConfigurationCall(String companyId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/saml/{companyId}/metadata.xml"
            .replaceAll("\\{" + "companyId" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSamlAssertionConfigurationValidateBeforeCall(String companyId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSamlAssertionConfiguration(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getSamlAssertionConfiguration(Async)");
        }
        

        okhttp3.Call localVarCall = getSamlAssertionConfigurationCall(companyId, accept, _callback);
        return localVarCall;

    }

    /**
     * Get assertion configuration for a company
     * This API allows an IDP server to retrieve ASSERTION configuration to callback Rainbow SP after an SAML authentication request
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @return GetSamlAssertionConfigurationSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetSamlAssertionConfigurationSuccess getSamlAssertionConfiguration(String companyId, String accept) throws ApiException {
        ApiResponse<GetSamlAssertionConfigurationSuccess> localVarResp = getSamlAssertionConfigurationWithHttpInfo(companyId, accept);
        return localVarResp.getData();
    }

    /**
     * Get assertion configuration for a company
     * This API allows an IDP server to retrieve ASSERTION configuration to callback Rainbow SP after an SAML authentication request
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @return ApiResponse&lt;GetSamlAssertionConfigurationSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSamlAssertionConfigurationSuccess> getSamlAssertionConfigurationWithHttpInfo(String companyId, String accept) throws ApiException {
        okhttp3.Call localVarCall = getSamlAssertionConfigurationValidateBeforeCall(companyId, accept, null);
        Type localVarReturnType = new TypeToken<GetSamlAssertionConfigurationSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get assertion configuration for a company (asynchronously)
     * This API allows an IDP server to retrieve ASSERTION configuration to callback Rainbow SP after an SAML authentication request
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param accept application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlAssertionConfigurationAsync(String companyId, String accept, final ApiCallback<GetSamlAssertionConfigurationSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSamlAssertionConfigurationValidateBeforeCall(companyId, accept, _callback);
        Type localVarReturnType = new TypeToken<GetSamlAssertionConfigurationSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSamlLogin
     * @param companyId User company identifier: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @param challenge challenge for application authentication: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unvailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlLoginCall(String companyId, String challenge, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/saml/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (challenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("challenge", challenge));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/unknown"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSamlLoginValidateBeforeCall(String companyId, String challenge, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSamlLogin(Async)");
        }
        
        // verify the required parameter 'challenge' is set
        if (challenge == null) {
            throw new ApiException("Missing the required parameter 'challenge' when calling getSamlLogin(Async)");
        }
        

        okhttp3.Call localVarCall = getSamlLoginCall(companyId, challenge, _callback);
        return localVarCall;

    }

    /**
     * Initiate an SAML authentication
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @param companyId User company identifier: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @param challenge challenge for application authentication: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unvailable </td><td>  -  </td></tr>
     </table>
     */
    public void getSamlLogin(String companyId, String challenge) throws ApiException {
        getSamlLoginWithHttpInfo(companyId, challenge);
    }

    /**
     * Initiate an SAML authentication
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @param companyId User company identifier: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @param challenge challenge for application authentication: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unvailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSamlLoginWithHttpInfo(String companyId, String challenge) throws ApiException {
        okhttp3.Call localVarCall = getSamlLoginValidateBeforeCall(companyId, challenge, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Initiate an SAML authentication (asynchronously)
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @param companyId User company identifier: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @param challenge challenge for application authentication: this value can be retrieve using GET /api/rainbow/authentication/v1.0/urls?uid&#x3D;user1@company.com (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unvailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlLoginAsync(String companyId, String challenge, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSamlLoginValidateBeforeCall(companyId, challenge, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSamlLogout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlLogoutCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/saml/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/unknown"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSamlLogoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSamlLogoutCall(_callback);
        return localVarCall;

    }

    /**
     * Close SAML session
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void getSamlLogout() throws ApiException {
        getSamlLogoutWithHttpInfo();
    }

    /**
     * Close SAML session
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSamlLogoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSamlLogoutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Close SAML session (asynchronously)
     * This API allows Rainbow users to login using SAML authentication if this type of authentication is provided by their company.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSamlLogoutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSamlLogoutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSamlAssertion
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSamlAssertionCall(String companyId, PostSamlAssertion body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/saml/{companyId}/assert"
            .replaceAll("\\{" + "companyId" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSamlAssertionValidateBeforeCall(String companyId, PostSamlAssertion body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling postSamlAssertion(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postSamlAssertion(Async)");
        }
        

        okhttp3.Call localVarCall = postSamlAssertionCall(companyId, body, _callback);
        return localVarCall;

    }

    /**
     * IDP authentication response
     * This API allows IDP server to provide the identity of a user which have performed an SAML authentication (If the user suceeded in the authentication process). This identity provided by the IDP will be used to retrieve the associated Rainbow user.
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param body  (required)
     * @return PostSamlAssertionSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public PostSamlAssertionSuccess postSamlAssertion(String companyId, PostSamlAssertion body) throws ApiException {
        ApiResponse<PostSamlAssertionSuccess> localVarResp = postSamlAssertionWithHttpInfo(companyId, body);
        return localVarResp.getData();
    }

    /**
     * IDP authentication response
     * This API allows IDP server to provide the identity of a user which have performed an SAML authentication (If the user suceeded in the authentication process). This identity provided by the IDP will be used to retrieve the associated Rainbow user.
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param body  (required)
     * @return ApiResponse&lt;PostSamlAssertionSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostSamlAssertionSuccess> postSamlAssertionWithHttpInfo(String companyId, PostSamlAssertion body) throws ApiException {
        okhttp3.Call localVarCall = postSamlAssertionValidateBeforeCall(companyId, body, null);
        Type localVarReturnType = new TypeToken<PostSamlAssertionSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IDP authentication response (asynchronously)
     * This API allows IDP server to provide the identity of a user which have performed an SAML authentication (If the user suceeded in the authentication process). This identity provided by the IDP will be used to retrieve the associated Rainbow user.
     * @param companyId Company unique identifier (like 569ce8c8f9336c471b98eda1) (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSamlAssertionAsync(String companyId, PostSamlAssertion body, final ApiCallback<PostSamlAssertionSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSamlAssertionValidateBeforeCall(companyId, body, _callback);
        Type localVarReturnType = new TypeToken<PostSamlAssertionSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
