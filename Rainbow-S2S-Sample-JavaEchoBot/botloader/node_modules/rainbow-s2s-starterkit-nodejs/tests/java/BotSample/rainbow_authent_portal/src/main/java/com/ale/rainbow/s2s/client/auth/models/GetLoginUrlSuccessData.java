/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * GetLoginUrlSuccessData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-13T18:40:41.602485+01:00[Europe/Paris]")
public class GetLoginUrlSuccessData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "authorizationEndpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_DISCOVERY_URL = "discoveryUrl";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_URL)
  private String discoveryUrl;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_JWKS_URI = "jwksUri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  private String jwksUri;

  public static final String SERIALIZED_NAME_LOGIN_URL = "loginUrl";
  @SerializedName(SERIALIZED_NAME_LOGIN_URL)
  private String loginUrl;

  public static final String SERIALIZED_NAME_LOGOUT_URL = "logoutUrl";
  @SerializedName(SERIALIZED_NAME_LOGOUT_URL)
  private String logoutUrl;

  public static final String SERIALIZED_NAME_ONLY_USE_IMPLICIT_FLOW = "onlyUseImplicitFlow";
  @SerializedName(SERIALIZED_NAME_ONLY_USE_IMPLICIT_FLOW)
  private Boolean onlyUseImplicitFlow;

  /**
   * Authentication type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    RAINBOW("RAINBOW"),
    
    SAML("SAML"),
    
    OIDC("OIDC");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;


  public GetLoginUrlSuccessData authorizationEndpoint(String authorizationEndpoint) {
    
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

   /**
   * OIDC provider&#39;s authorization endpoint &lt;br/&gt; Only returned if &#x60;type&#x60; is &#x60;OIDC&#x60;.
   * @return authorizationEndpoint
  **/
  @ApiModelProperty(required = true, value = "OIDC provider's authorization endpoint <br/> Only returned if `type` is `OIDC`.")

  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }


  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public GetLoginUrlSuccessData clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * client_id used for Rainbow application in OIDC provider &lt;br/&gt; Only returned if &#x60;type&#x60; is &#x60;OIDC&#x60;.
   * @return clientId
  **/
  @ApiModelProperty(required = true, value = "client_id used for Rainbow application in OIDC provider <br/> Only returned if `type` is `OIDC`.")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public GetLoginUrlSuccessData discoveryUrl(String discoveryUrl) {
    
    this.discoveryUrl = discoveryUrl;
    return this;
  }

   /**
   * OIDC provider&#39;s discoveryUrl &lt;br/&gt; Only returned if &#x60;type&#x60; is &#x60;OIDC&#x60;.
   * @return discoveryUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OIDC provider's discoveryUrl <br/> Only returned if `type` is `OIDC`.")

  public String getDiscoveryUrl() {
    return discoveryUrl;
  }


  public void setDiscoveryUrl(String discoveryUrl) {
    this.discoveryUrl = discoveryUrl;
  }


  public GetLoginUrlSuccessData issuer(String issuer) {
    
    this.issuer = issuer;
    return this;
  }

   /**
   * OIDC provider&#39;s Issuer Identifier &lt;br/&gt; Only returned if &#x60;type&#x60; is &#x60;OIDC&#x60;.
   * @return issuer
  **/
  @ApiModelProperty(required = true, value = "OIDC provider's Issuer Identifier <br/> Only returned if `type` is `OIDC`.")

  public String getIssuer() {
    return issuer;
  }


  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public GetLoginUrlSuccessData jwksUri(String jwksUri) {
    
    this.jwksUri = jwksUri;
    return this;
  }

   /**
   * OIDC provider&#39;s jwks_uri &lt;br/&gt; Only returned if &#x60;type&#x60; is &#x60;OIDC&#x60;. &lt;br/&gt; This setting is used to retrieve the OIDC provider&#39;s signing key(s) in order to validate the id_token&#39;s signature.
   * @return jwksUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OIDC provider's jwks_uri <br/> Only returned if `type` is `OIDC`. <br/> This setting is used to retrieve the OIDC provider's signing key(s) in order to validate the id_token's signature.")

  public String getJwksUri() {
    return jwksUri;
  }


  public void setJwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
  }


  public GetLoginUrlSuccessData loginUrl(String loginUrl) {
    
    this.loginUrl = loginUrl;
    return this;
  }

   /**
   * URL to use to perform a login. &lt;br/&gt; Not returned if authentication type is OIDC with &#x60;onlyUseImplicitFlow&#x60;&#x3D;true
   * @return loginUrl
  **/
  @ApiModelProperty(required = true, value = "URL to use to perform a login. <br/> Not returned if authentication type is OIDC with `onlyUseImplicitFlow`=true")

  public String getLoginUrl() {
    return loginUrl;
  }


  public void setLoginUrl(String loginUrl) {
    this.loginUrl = loginUrl;
  }


  public GetLoginUrlSuccessData logoutUrl(String logoutUrl) {
    
    this.logoutUrl = logoutUrl;
    return this;
  }

   /**
   * URL to use to perform a logout.
   * @return logoutUrl
  **/
  @ApiModelProperty(required = true, value = "URL to use to perform a logout.")

  public String getLogoutUrl() {
    return logoutUrl;
  }


  public void setLogoutUrl(String logoutUrl) {
    this.logoutUrl = logoutUrl;
  }


  public GetLoginUrlSuccessData onlyUseImplicitFlow(Boolean onlyUseImplicitFlow) {
    
    this.onlyUseImplicitFlow = onlyUseImplicitFlow;
    return this;
  }

   /**
   * Indicates if configuration allows to use only OIDC implicit flow. &lt;br/&gt; Only returned if &#x60;type&#x60; is &#x60;OIDC&#x60;. &lt;br/&gt; If onlyUseImplicitFlow is set to true, &#x60;loginUrl&#x60; is not returned. &lt;br/&gt;&lt;br/&gt; Implicit flow can be used instead of authorization code grant implemented by Rainbow APIs, but in that case implicit flow has to be implemented by the client. The id_token retrieved by the client using implicit flow can then be used to get a Rainbow token using API GET /api/rainbow/authentication/v1.0/oidc-client/jwt.
   * @return onlyUseImplicitFlow
  **/
  @ApiModelProperty(required = true, value = "Indicates if configuration allows to use only OIDC implicit flow. <br/> Only returned if `type` is `OIDC`. <br/> If onlyUseImplicitFlow is set to true, `loginUrl` is not returned. <br/><br/> Implicit flow can be used instead of authorization code grant implemented by Rainbow APIs, but in that case implicit flow has to be implemented by the client. The id_token retrieved by the client using implicit flow can then be used to get a Rainbow token using API GET /api/rainbow/authentication/v1.0/oidc-client/jwt.")

  public Boolean getOnlyUseImplicitFlow() {
    return onlyUseImplicitFlow;
  }


  public void setOnlyUseImplicitFlow(Boolean onlyUseImplicitFlow) {
    this.onlyUseImplicitFlow = onlyUseImplicitFlow;
  }


  public GetLoginUrlSuccessData type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Authentication type.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Authentication type.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetLoginUrlSuccessData getLoginUrlSuccessData = (GetLoginUrlSuccessData) o;
    return Objects.equals(this.authorizationEndpoint, getLoginUrlSuccessData.authorizationEndpoint) &&
        Objects.equals(this.clientId, getLoginUrlSuccessData.clientId) &&
        Objects.equals(this.discoveryUrl, getLoginUrlSuccessData.discoveryUrl) &&
        Objects.equals(this.issuer, getLoginUrlSuccessData.issuer) &&
        Objects.equals(this.jwksUri, getLoginUrlSuccessData.jwksUri) &&
        Objects.equals(this.loginUrl, getLoginUrlSuccessData.loginUrl) &&
        Objects.equals(this.logoutUrl, getLoginUrlSuccessData.logoutUrl) &&
        Objects.equals(this.onlyUseImplicitFlow, getLoginUrlSuccessData.onlyUseImplicitFlow) &&
        Objects.equals(this.type, getLoginUrlSuccessData.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEndpoint, clientId, discoveryUrl, issuer, jwksUri, loginUrl, logoutUrl, onlyUseImplicitFlow, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetLoginUrlSuccessData {\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    discoveryUrl: ").append(toIndentedString(discoveryUrl)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("    loginUrl: ").append(toIndentedString(loginUrl)).append("\n");
    sb.append("    logoutUrl: ").append(toIndentedString(logoutUrl)).append("\n");
    sb.append("    onlyUseImplicitFlow: ").append(toIndentedString(onlyUseImplicitFlow)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

