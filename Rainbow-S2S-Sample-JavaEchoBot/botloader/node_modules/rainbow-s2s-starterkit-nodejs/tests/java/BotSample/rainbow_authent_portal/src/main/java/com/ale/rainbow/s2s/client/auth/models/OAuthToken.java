/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * OAuthToken
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-13T18:40:41.602485+01:00[Europe/Paris]")
public class OAuthToken implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  /**
   * Desired grant type to use for token endpoint. &lt;br/&gt; Must be set to: - &lt;strong&gt;authorization_code&lt;/strong&gt; to exchange an authorization code against an access token   (details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.3\&quot;&gt;OAuth 2.0 RFC, section 4.1.3&lt;/a&gt;), - &lt;strong&gt;refresh_token&lt;/strong&gt; to refresh an access token using the refresh token   (details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-6\&quot;&gt;OAuth 2.0 RFC, section 6&lt;/a&gt;).
   */
  @JsonAdapter(GrantTypeEnum.Adapter.class)
  public enum GrantTypeEnum {
    _AUTHORIZATION_CODE("{authorization_code"),
    
    REFRESH_TOKEN_("refresh_token}");

    private String value;

    GrantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypeEnum fromValue(String value) {
      for (GrantTypeEnum b : GrantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grant_type";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private GrantTypeEnum grantType;

  public static final String SERIALIZED_NAME_REDIRECT_URI = "redirect_uri";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URI)
  private String redirectUri;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refresh_token";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;


  public OAuthToken code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The authorization code sent by Rainbow authentication server from the GET /api/rainbow/authentication/v1.0/oauth/authorize endpoint. &lt;br/&gt; &lt;b&gt;Mandatory&lt;/b&gt; to exchange an authorization code against an access token. &lt;br/&gt; Note that once it has been used, the authorization code is revoked. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.3\&quot;&gt;OAuth 2.0 RFC, section 4.1.3&lt;/a&gt;.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The authorization code sent by Rainbow authentication server from the GET /api/rainbow/authentication/v1.0/oauth/authorize endpoint. <br/> <b>Mandatory</b> to exchange an authorization code against an access token. <br/> Note that once it has been used, the authorization code is revoked. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1.3\">OAuth 2.0 RFC, section 4.1.3</a>.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public OAuthToken grantType(GrantTypeEnum grantType) {
    
    this.grantType = grantType;
    return this;
  }

   /**
   * Desired grant type to use for token endpoint. &lt;br/&gt; Must be set to: - &lt;strong&gt;authorization_code&lt;/strong&gt; to exchange an authorization code against an access token   (details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.3\&quot;&gt;OAuth 2.0 RFC, section 4.1.3&lt;/a&gt;), - &lt;strong&gt;refresh_token&lt;/strong&gt; to refresh an access token using the refresh token   (details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-6\&quot;&gt;OAuth 2.0 RFC, section 6&lt;/a&gt;).
   * @return grantType
  **/
  @ApiModelProperty(required = true, value = "Desired grant type to use for token endpoint. <br/> Must be set to: - <strong>authorization_code</strong> to exchange an authorization code against an access token   (details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1.3\">OAuth 2.0 RFC, section 4.1.3</a>), - <strong>refresh_token</strong> to refresh an access token using the refresh token   (details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">OAuth 2.0 RFC, section 6</a>).")

  public GrantTypeEnum getGrantType() {
    return grantType;
  }


  public void setGrantType(GrantTypeEnum grantType) {
    this.grantType = grantType;
  }


  public OAuthToken redirectUri(String redirectUri) {
    
    this.redirectUri = redirectUri;
    return this;
  }

   /**
   * The redirect_uri used to retrieve the authorization code sent by Rainbow authentication server from the GET /api/rainbow/authentication/v1.0/oauth/authorize endpoint. &lt;br/&gt; &lt;b&gt;Mandatory&lt;/b&gt; to exchange an authorization code against an access token. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-4.1.3\&quot;&gt;OAuth 2.0 RFC, section 4.1.3&lt;/a&gt;.
   * @return redirectUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The redirect_uri used to retrieve the authorization code sent by Rainbow authentication server from the GET /api/rainbow/authentication/v1.0/oauth/authorize endpoint. <br/> <b>Mandatory</b> to exchange an authorization code against an access token. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1.3\">OAuth 2.0 RFC, section 4.1.3</a>.")

  public String getRedirectUri() {
    return redirectUri;
  }


  public void setRedirectUri(String redirectUri) {
    this.redirectUri = redirectUri;
  }


  public OAuthToken refreshToken(String refreshToken) {
    
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * The refresh token sent by Rainbow authentication server from the GET /api/rainbow/authentication/v1.0/oauth/authorize endpoint of from a previous refresh token performed using this POST /api/rainbow/authentication/v1.0/oauth/token endpoint. &lt;br/&gt; &lt;b&gt;Mandatory&lt;/b&gt; to refresh an access token. &lt;br/&gt; The provided refresh_token must not be expired. If the refresh token is expired, the application has to redo the whole OAuth authorization code flow. &lt;br/&gt; Note that once it has been used to refresh an access token, the refresh_token is revoked. The new refresh token returned in the response with the access token replaces the previous one. &lt;br/&gt; &lt;br/&gt; For more information, details are available in the &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc6749#section-6\&quot;&gt;OAuth 2.0 RFC, section 6&lt;/a&gt;.
   * @return refreshToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The refresh token sent by Rainbow authentication server from the GET /api/rainbow/authentication/v1.0/oauth/authorize endpoint of from a previous refresh token performed using this POST /api/rainbow/authentication/v1.0/oauth/token endpoint. <br/> <b>Mandatory</b> to refresh an access token. <br/> The provided refresh_token must not be expired. If the refresh token is expired, the application has to redo the whole OAuth authorization code flow. <br/> Note that once it has been used to refresh an access token, the refresh_token is revoked. The new refresh token returned in the response with the access token replaces the previous one. <br/> <br/> For more information, details are available in the <a href=\"https://tools.ietf.org/html/rfc6749#section-6\">OAuth 2.0 RFC, section 6</a>.")

  public String getRefreshToken() {
    return refreshToken;
  }


  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthToken oauthToken = (OAuthToken) o;
    return Objects.equals(this.code, oauthToken.code) &&
        Objects.equals(this.grantType, oauthToken.grantType) &&
        Objects.equals(this.redirectUri, oauthToken.redirectUri) &&
        Objects.equals(this.refreshToken, oauthToken.refreshToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, grantType, redirectUri, refreshToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthToken {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    redirectUri: ").append(toIndentedString(redirectUri)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

