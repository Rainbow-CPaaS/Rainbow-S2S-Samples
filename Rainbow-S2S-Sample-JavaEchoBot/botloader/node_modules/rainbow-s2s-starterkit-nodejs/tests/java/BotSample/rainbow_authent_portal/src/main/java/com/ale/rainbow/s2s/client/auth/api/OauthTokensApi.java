/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.api;

import com.ale.rainbow.s2s.client.auth.ApiCallback;
import com.ale.rainbow.s2s.client.auth.ApiClient;
import com.ale.rainbow.s2s.client.auth.ApiException;
import com.ale.rainbow.s2s.client.auth.ApiResponse;
import com.ale.rainbow.s2s.client.auth.Configuration;
import com.ale.rainbow.s2s.client.auth.Pair;
import com.ale.rainbow.s2s.client.auth.ProgressRequestBody;
import com.ale.rainbow.s2s.client.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.ale.rainbow.s2s.client.auth.models.DeleteOAuthTokenSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetOAuthTokenByIdSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetOAuthTokenSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OauthTokensApi {
    private ApiClient localVarApiClient;

    public OauthTokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OauthTokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteOAuthToken
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOAuthTokenCall(String tokenId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/oauth/tokens/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOAuthTokenValidateBeforeCall(String tokenId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling deleteOAuthToken(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteOAuthToken(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOAuthTokenCall(tokenId, accept, _callback);
        return localVarCall;

    }

    /**
     * Delete an OAuth token
     * This API allows users to revoke OAuth token they have previously granted for applications. &lt;br/&gt; &lt;br/&gt; Once an OAuth token is revoked, the application for which this token has been issued will no longer be able to use Rainbow APIs in the name of the user.
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @return DeleteOAuthTokenSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteOAuthTokenSuccess deleteOAuthToken(String tokenId, String accept) throws ApiException {
        ApiResponse<DeleteOAuthTokenSuccess> localVarResp = deleteOAuthTokenWithHttpInfo(tokenId, accept);
        return localVarResp.getData();
    }

    /**
     * Delete an OAuth token
     * This API allows users to revoke OAuth token they have previously granted for applications. &lt;br/&gt; &lt;br/&gt; Once an OAuth token is revoked, the application for which this token has been issued will no longer be able to use Rainbow APIs in the name of the user.
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @return ApiResponse&lt;DeleteOAuthTokenSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteOAuthTokenSuccess> deleteOAuthTokenWithHttpInfo(String tokenId, String accept) throws ApiException {
        okhttp3.Call localVarCall = deleteOAuthTokenValidateBeforeCall(tokenId, accept, null);
        Type localVarReturnType = new TypeToken<DeleteOAuthTokenSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an OAuth token (asynchronously)
     * This API allows users to revoke OAuth token they have previously granted for applications. &lt;br/&gt; &lt;br/&gt; Once an OAuth token is revoked, the application for which this token has been issued will no longer be able to use Rainbow APIs in the name of the user.
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOAuthTokenAsync(String tokenId, String accept, final ApiCallback<DeleteOAuthTokenSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOAuthTokenValidateBeforeCall(tokenId, accept, _callback);
        Type localVarReturnType = new TypeToken<DeleteOAuthTokenSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOAuthToken
     * @param accept application/json (required)
     * @param format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to small)
     * @param limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0d)
     * @param offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param sortField Sort OAuth tokens list based on the given field. (optional, default to &quot;appName&quot;)
     * @param sortOrder Specify order when sorting OAuth tokens list. (optional, default to 1.0d)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuthTokenCall(String accept, String format, BigDecimal limit, BigDecimal offset, String sortField, BigDecimal sortOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/oauth/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuthTokenValidateBeforeCall(String accept, String format, BigDecimal limit, BigDecimal offset, String sortField, BigDecimal sortOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getOAuthToken(Async)");
        }
        

        okhttp3.Call localVarCall = getOAuthTokenCall(accept, format, limit, offset, sortField, sortOrder, _callback);
        return localVarCall;

    }

    /**
     * Get all OAuth token
     * This API allows users to list all OAuth tokens they have generated. &lt;br/&gt; &lt;br/&gt; An OAuth token is generated when an application logs a user using OAuth 2.0 protocol. An OAuth token gives the possibility for the application to use Rainbow APIs in the name of the user (delegation).
     * @param accept application/json (required)
     * @param format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to small)
     * @param limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0d)
     * @param offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param sortField Sort OAuth tokens list based on the given field. (optional, default to &quot;appName&quot;)
     * @param sortOrder Specify order when sorting OAuth tokens list. (optional, default to 1.0d)
     * @return GetOAuthTokenSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetOAuthTokenSuccess getOAuthToken(String accept, String format, BigDecimal limit, BigDecimal offset, String sortField, BigDecimal sortOrder) throws ApiException {
        ApiResponse<GetOAuthTokenSuccess> localVarResp = getOAuthTokenWithHttpInfo(accept, format, limit, offset, sortField, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Get all OAuth token
     * This API allows users to list all OAuth tokens they have generated. &lt;br/&gt; &lt;br/&gt; An OAuth token is generated when an application logs a user using OAuth 2.0 protocol. An OAuth token gives the possibility for the application to use Rainbow APIs in the name of the user (delegation).
     * @param accept application/json (required)
     * @param format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to small)
     * @param limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0d)
     * @param offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param sortField Sort OAuth tokens list based on the given field. (optional, default to &quot;appName&quot;)
     * @param sortOrder Specify order when sorting OAuth tokens list. (optional, default to 1.0d)
     * @return ApiResponse&lt;GetOAuthTokenSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOAuthTokenSuccess> getOAuthTokenWithHttpInfo(String accept, String format, BigDecimal limit, BigDecimal offset, String sortField, BigDecimal sortOrder) throws ApiException {
        okhttp3.Call localVarCall = getOAuthTokenValidateBeforeCall(accept, format, limit, offset, sortField, sortOrder, null);
        Type localVarReturnType = new TypeToken<GetOAuthTokenSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all OAuth token (asynchronously)
     * This API allows users to list all OAuth tokens they have generated. &lt;br/&gt; &lt;br/&gt; An OAuth token is generated when an application logs a user using OAuth 2.0 protocol. An OAuth token gives the possibility for the application to use Rainbow APIs in the name of the user (delegation).
     * @param accept application/json (required)
     * @param format Allows to retrieve more or less OAuth token details in response. &lt;br/&gt; - &#x60;small&#x60;: id, appId, appName, userId &lt;br/&gt; - &#x60;medium&#x60;: id, appId, appName, userId, scope, creationDate, accessTokenIssuedAt, refreshTokenExpiresAt &lt;br/&gt; - &#x60;full&#x60;: all OAuth token fields (optional, default to small)
     * @param limit Allow to specify the number of OAuth tokens to retrieve. (optional, default to 100.0d)
     * @param offset Allow to specify the position of first OAuth token to retrieve (first OAuth token if not specified). Warning: if offset &gt; total, no results are returned. (optional)
     * @param sortField Sort OAuth tokens list based on the given field. (optional, default to &quot;appName&quot;)
     * @param sortOrder Specify order when sorting OAuth tokens list. (optional, default to 1.0d)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuthTokenAsync(String accept, String format, BigDecimal limit, BigDecimal offset, String sortField, BigDecimal sortOrder, final ApiCallback<GetOAuthTokenSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuthTokenValidateBeforeCall(accept, format, limit, offset, sortField, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<GetOAuthTokenSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOAuthTokenById
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuthTokenByIdCall(String tokenId, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/authentication/v1.0/oauth/tokens/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuthTokenByIdValidateBeforeCall(String tokenId, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getOAuthTokenById(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getOAuthTokenById(Async)");
        }
        

        okhttp3.Call localVarCall = getOAuthTokenByIdCall(tokenId, accept, _callback);
        return localVarCall;

    }

    /**
     * Get an OAuth token
     * This API allows users to get an OAuth token.
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @return GetOAuthTokenByIdSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetOAuthTokenByIdSuccess getOAuthTokenById(String tokenId, String accept) throws ApiException {
        ApiResponse<GetOAuthTokenByIdSuccess> localVarResp = getOAuthTokenByIdWithHttpInfo(tokenId, accept);
        return localVarResp.getData();
    }

    /**
     * Get an OAuth token
     * This API allows users to get an OAuth token.
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @return ApiResponse&lt;GetOAuthTokenByIdSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOAuthTokenByIdSuccess> getOAuthTokenByIdWithHttpInfo(String tokenId, String accept) throws ApiException {
        okhttp3.Call localVarCall = getOAuthTokenByIdValidateBeforeCall(tokenId, accept, null);
        Type localVarReturnType = new TypeToken<GetOAuthTokenByIdSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an OAuth token (asynchronously)
     * This API allows users to get an OAuth token.
     * @param tokenId OAuth token unique identifier (like 5c6c32532204570d233816d2) (required)
     * @param accept application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuthTokenByIdAsync(String tokenId, String accept, final ApiCallback<GetOAuthTokenByIdSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuthTokenByIdValidateBeforeCall(tokenId, accept, _callback);
        Type localVarReturnType = new TypeToken<GetOAuthTokenByIdSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
