/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.api;

import com.ale.rainbow.s2s.client.auth.ApiException;
import com.ale.rainbow.s2s.client.auth.models.DeleteMetricsSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetApiRainbowAuthenticationV10AboutSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetApiRainbowPingSuccess;
import com.ale.rainbow.s2s.client.auth.models.GetMetricsSuccess;
import com.ale.rainbow.s2s.client.auth.models.PutApiRainbowLogsLevels;
import com.ale.rainbow.s2s.client.auth.models.PutApiRainbowLogsLevelsSuccess;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommonApi
 */
@Ignore
public class CommonApiTest {

    private final CommonApi api = new CommonApi();

    
    /**
     * Clear performance metrics
     *
     * Clear metrics
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMetricsTest() throws ApiException {
        String accept = null;
        DeleteMetricsSuccess response = api.deleteMetrics(accept);

        // TODO: test validations
    }
    
    /**
     * About authentication portal
     *
     * Get portal information (module name, version)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiRainbowAuthenticationV10AboutTest() throws ApiException {
        String accept = null;
        GetApiRainbowAuthenticationV10AboutSuccess response = api.getApiRainbowAuthenticationV10About(accept);

        // TODO: test validations
    }
    
    /**
     * Get authentication portal status report
     *
     * This API allows to check authentication portal status. &lt;br/&gt; &lt;br/&gt; If no database connection is available, an error 503 Service Unavailable is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiRainbowPingTest() throws ApiException {
        String accept = null;
        GetApiRainbowPingSuccess response = api.getApiRainbowPing(accept);

        // TODO: test validations
    }
    
    /**
     * Get performance metrics
     *
     * Get portal performance metrics&lt;br/&gt; &lt;br/&gt; It allows to show Node specific metrics like: &lt;ul&gt;     &lt;li&gt;processCpuTotal&lt;/li&gt;     &lt;li&gt;processStartTime&lt;/li&gt;     &lt;li&gt;osMemoryHeap&lt;/li&gt;     &lt;li&gt;processOpenFileDescriptors&lt;/li&gt;     &lt;li&gt;processMaxFileDescriptors&lt;/li&gt;     &lt;li&gt;eventLoopLag&lt;/li&gt;     &lt;li&gt;processHandles&lt;/li&gt;     &lt;li&gt;processRequests&lt;/li&gt;     &lt;li&gt;heapSizeAndUsed&lt;/li&gt;     &lt;li&gt;heapSpacesSizeAndUsed&lt;/li&gt;     &lt;li&gt;version&lt;/li&gt; &lt;/ul&gt; Node metrics probes are launched every 10 seconds.&lt;br/&gt;&lt;br/&gt;  A first custom metric is available to probe portal Rest API performance (an histogram of response time)&lt;br/&gt; &lt;br/&gt; When &#39;content-type&#39; header field is set to &#39;application/json&#39;, the result is in JSON format. For other cases the result is in text format.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetricsTest() throws ApiException {
        String accept = null;
        GetMetricsSuccess response = api.getMetrics(accept);

        // TODO: test validations
    }
    
    /**
     * Change log level
     *
     * Allow to change the log level of the portal. The requested log level is applied to the requested transports (console, file, syslog, ...)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putApiRainbowLogsLevelsTest() throws ApiException {
        PutApiRainbowLogsLevels body = null;
        PutApiRainbowLogsLevelsSuccess response = api.putApiRainbowLogsLevels(body);

        // TODO: test validations
    }
    
}
