/*
 * Rainbow authentication portal
 * # Rainbow authentication portal API guide  ## Preamble  [Download Postman collection][0]  ### Introduction  This guide describes list of API services that are provided by OT Rainbow authentication portal system. Services are used to manage OT Rainbow authentication.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages.   HTTP request GET is used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according stateless model, without transport conservation between them.   JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, par example, “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.    [0]: AuthenticationPortalServer_postman.json
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.auth.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
import java.io.Serializable;

/**
 * DeleteOAuthTokenSuccessData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-13T18:40:41.602485+01:00[Europe/Paris]")
public class DeleteOAuthTokenSuccessData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_EXPIRES_AT = "accessTokenExpiresAt";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_EXPIRES_AT)
  private OffsetDateTime accessTokenExpiresAt;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_ISSUED_AT = "accessTokenIssuedAt";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_ISSUED_AT)
  private OffsetDateTime accessTokenIssuedAt;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES_AT = "refreshTokenExpiresAt";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES_AT)
  private OffsetDateTime refreshTokenExpiresAt;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_ISSUED_AT = "refreshTokenIssuedAt";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_ISSUED_AT)
  private OffsetDateTime refreshTokenIssuedAt;

  /**
   * Scope granted to the application.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    _ALL_("{all}");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;


  public DeleteOAuthTokenSuccessData accessTokenExpiresAt(OffsetDateTime accessTokenExpiresAt) {
    
    this.accessTokenExpiresAt = accessTokenExpiresAt;
    return this;
  }

   /**
   * Date when the access token expires.
   * @return accessTokenExpiresAt
  **/
  @ApiModelProperty(required = true, value = "Date when the access token expires.")

  public OffsetDateTime getAccessTokenExpiresAt() {
    return accessTokenExpiresAt;
  }


  public void setAccessTokenExpiresAt(OffsetDateTime accessTokenExpiresAt) {
    this.accessTokenExpiresAt = accessTokenExpiresAt;
  }


  public DeleteOAuthTokenSuccessData accessTokenIssuedAt(OffsetDateTime accessTokenIssuedAt) {
    
    this.accessTokenIssuedAt = accessTokenIssuedAt;
    return this;
  }

   /**
   * Date of the last access token generation. Access token is requested by the application and has a short expiration time, therefore it can be considered as an indicator of the application activity for the user/application associated to this OAuth token.
   * @return accessTokenIssuedAt
  **/
  @ApiModelProperty(required = true, value = "Date of the last access token generation. Access token is requested by the application and has a short expiration time, therefore it can be considered as an indicator of the application activity for the user/application associated to this OAuth token.")

  public OffsetDateTime getAccessTokenIssuedAt() {
    return accessTokenIssuedAt;
  }


  public void setAccessTokenIssuedAt(OffsetDateTime accessTokenIssuedAt) {
    this.accessTokenIssuedAt = accessTokenIssuedAt;
  }


  public DeleteOAuthTokenSuccessData appId(String appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * Unique identifier of the Application for which the OAuth token has been generated.
   * @return appId
  **/
  @ApiModelProperty(required = true, value = "Unique identifier of the Application for which the OAuth token has been generated.")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }


  public DeleteOAuthTokenSuccessData appName(String appName) {
    
    this.appName = appName;
    return this;
  }

   /**
   * Name of the Application for which the OAuth token has been generated.
   * @return appName
  **/
  @ApiModelProperty(required = true, value = "Name of the Application for which the OAuth token has been generated.")

  public String getAppName() {
    return appName;
  }


  public void setAppName(String appName) {
    this.appName = appName;
  }


  public DeleteOAuthTokenSuccessData creationDate(OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Date when the OAuth token has been created. &lt;br/&gt; Corresponds to the first time the user gave his consent so that the application can use Rainbow APIs in his name (delegation).
   * @return creationDate
  **/
  @ApiModelProperty(required = true, value = "Date when the OAuth token has been created. <br/> Corresponds to the first time the user gave his consent so that the application can use Rainbow APIs in his name (delegation).")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public DeleteOAuthTokenSuccessData id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * OAuth token unique identifier.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "OAuth token unique identifier.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public DeleteOAuthTokenSuccessData refreshTokenExpiresAt(OffsetDateTime refreshTokenExpiresAt) {
    
    this.refreshTokenExpiresAt = refreshTokenExpiresAt;
    return this;
  }

   /**
   * Date when the refresh token expires.
   * @return refreshTokenExpiresAt
  **/
  @ApiModelProperty(required = true, value = "Date when the refresh token expires.")

  public OffsetDateTime getRefreshTokenExpiresAt() {
    return refreshTokenExpiresAt;
  }


  public void setRefreshTokenExpiresAt(OffsetDateTime refreshTokenExpiresAt) {
    this.refreshTokenExpiresAt = refreshTokenExpiresAt;
  }


  public DeleteOAuthTokenSuccessData refreshTokenIssuedAt(OffsetDateTime refreshTokenIssuedAt) {
    
    this.refreshTokenIssuedAt = refreshTokenIssuedAt;
    return this;
  }

   /**
   * Date of the last refresh token generation.
   * @return refreshTokenIssuedAt
  **/
  @ApiModelProperty(required = true, value = "Date of the last refresh token generation.")

  public OffsetDateTime getRefreshTokenIssuedAt() {
    return refreshTokenIssuedAt;
  }


  public void setRefreshTokenIssuedAt(OffsetDateTime refreshTokenIssuedAt) {
    this.refreshTokenIssuedAt = refreshTokenIssuedAt;
  }


  public DeleteOAuthTokenSuccessData scope(ScopeEnum scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * Scope granted to the application.
   * @return scope
  **/
  @ApiModelProperty(required = true, value = "Scope granted to the application.")

  public ScopeEnum getScope() {
    return scope;
  }


  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public DeleteOAuthTokenSuccessData userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Unique identifier of the user for which the OAuth token has been generated.
   * @return userId
  **/
  @ApiModelProperty(required = true, value = "Unique identifier of the user for which the OAuth token has been generated.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteOAuthTokenSuccessData deleteOAuthTokenSuccessData = (DeleteOAuthTokenSuccessData) o;
    return Objects.equals(this.accessTokenExpiresAt, deleteOAuthTokenSuccessData.accessTokenExpiresAt) &&
        Objects.equals(this.accessTokenIssuedAt, deleteOAuthTokenSuccessData.accessTokenIssuedAt) &&
        Objects.equals(this.appId, deleteOAuthTokenSuccessData.appId) &&
        Objects.equals(this.appName, deleteOAuthTokenSuccessData.appName) &&
        Objects.equals(this.creationDate, deleteOAuthTokenSuccessData.creationDate) &&
        Objects.equals(this.id, deleteOAuthTokenSuccessData.id) &&
        Objects.equals(this.refreshTokenExpiresAt, deleteOAuthTokenSuccessData.refreshTokenExpiresAt) &&
        Objects.equals(this.refreshTokenIssuedAt, deleteOAuthTokenSuccessData.refreshTokenIssuedAt) &&
        Objects.equals(this.scope, deleteOAuthTokenSuccessData.scope) &&
        Objects.equals(this.userId, deleteOAuthTokenSuccessData.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenExpiresAt, accessTokenIssuedAt, appId, appName, creationDate, id, refreshTokenExpiresAt, refreshTokenIssuedAt, scope, userId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteOAuthTokenSuccessData {\n");
    sb.append("    accessTokenExpiresAt: ").append(toIndentedString(accessTokenExpiresAt)).append("\n");
    sb.append("    accessTokenIssuedAt: ").append(toIndentedString(accessTokenIssuedAt)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    refreshTokenExpiresAt: ").append(toIndentedString(refreshTokenExpiresAt)).append("\n");
    sb.append("    refreshTokenIssuedAt: ").append(toIndentedString(refreshTokenIssuedAt)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

