/*
 * S2S api
 * # Rainbow S2S API guide  ## Preamble  ### Introduction  This guide describes a list of API services that are provided by the OT Rainbow S2S portal. This portal is dedicated to S2S features, providing a full REST API for Rainbow features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP verbs GET, DELETE, POST, PUT, etc. are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according to the stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, e.g. “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.s2s.api;

import com.ale.rainbow.s2s.client.s2s.ApiException;
import com.ale.rainbow.s2s.client.s2s.models.DeleteAllResponse;
import com.ale.rainbow.s2s.client.s2s.models.Message;
import com.ale.rainbow.s2s.client.s2s.models.MessageCreate;
import com.ale.rainbow.s2s.client.s2s.models.MessageCreateResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageApi
 */
@Ignore
public class MessageApiTest {

    private final MessageApi api = new MessageApi();

    
    /**
     * Send a new message
     *
     * Send a new message to a recipient identified by a conversation Id. **Caution**: prior to sending a message to a room, you will have to &#39;join&#39; it
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messageCreateTest() throws ApiException {
        String cnxId = null;
        String cvId = null;
        MessageCreate messageCreate = null;
        MessageCreateResponse response = api.messageCreate(cnxId, cvId, messageCreate);

        // TODO: test validations
    }
    
    /**
     * Delete all conversation messages
     *
     * Delete all conversation messages
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messageDeleteAllTest() throws ApiException {
        String cnxId = null;
        String cvId = null;
        DeleteAllResponse response = api.messageDeleteAll(cnxId, cvId);

        // TODO: test validations
    }
    
    /**
     * List the messages of a conversation
     *
     * Paginated list the messages of a conversation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messageIndexTest() throws ApiException {
        String cnxId = null;
        String cvId = null;
        List<Message> response = api.messageIndex(cnxId, cvId);

        // TODO: test validations
    }
    
    /**
     * Send a read receipt
     *
     * Send a message read receipt
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messageReadReceiptTest() throws ApiException {
        String cnxId = null;
        String cvId = null;
        String id = null;
        api.messageReadReceipt(cnxId, cvId, id);

        // TODO: test validations
    }
    
    /**
     * Send a received receipt
     *
     * Send a message received receipt
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messageReceivedReceiptTest() throws ApiException {
        String cnxId = null;
        String cvId = null;
        String id = null;
        api.messageReceivedReceipt(cnxId, cvId, id);

        // TODO: test validations
    }
    
}
