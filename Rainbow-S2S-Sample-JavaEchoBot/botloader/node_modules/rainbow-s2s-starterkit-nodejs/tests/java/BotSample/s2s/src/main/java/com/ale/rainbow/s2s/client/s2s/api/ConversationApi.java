/*
 * S2S api
 * # Rainbow S2S API guide  ## Preamble  ### Introduction  This guide describes a list of API services that are provided by the OT Rainbow S2S portal. This portal is dedicated to S2S features, providing a full REST API for Rainbow features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP verbs GET, DELETE, POST, PUT, etc. are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according to the stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, e.g. “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.s2s.api;

import com.ale.rainbow.s2s.client.s2s.ApiCallback;
import com.ale.rainbow.s2s.client.s2s.ApiClient;
import com.ale.rainbow.s2s.client.s2s.ApiException;
import com.ale.rainbow.s2s.client.s2s.ApiResponse;
import com.ale.rainbow.s2s.client.s2s.Configuration;
import com.ale.rainbow.s2s.client.s2s.Pair;
import com.ale.rainbow.s2s.client.s2s.ProgressRequestBody;
import com.ale.rainbow.s2s.client.s2s.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ale.rainbow.s2s.client.s2s.models.Conversation;
import com.ale.rainbow.s2s.client.s2s.models.ConversationCreate;
import com.ale.rainbow.s2s.client.s2s.models.Conversations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationApi {
    private ApiClient localVarApiClient;

    public ConversationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for conversationChatstate
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param state Chatstate value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationChatstateCall(String cnxId, String cvId, String state, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{cvId}/chatstate/{state}"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "cvId" + "\\}", localVarApiClient.escapeString(cvId.toString()))
            .replaceAll("\\{" + "state" + "\\}", localVarApiClient.escapeString(state.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationChatstateValidateBeforeCall(String cnxId, String cvId, String state, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling conversationChatstate(Async)");
        }
        
        // verify the required parameter 'cvId' is set
        if (cvId == null) {
            throw new ApiException("Missing the required parameter 'cvId' when calling conversationChatstate(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling conversationChatstate(Async)");
        }
        

        okhttp3.Call localVarCall = conversationChatstateCall(cnxId, cvId, state, _callback);
        return localVarCall;

    }

    /**
     * Send a chat state
     * Send a conversation state
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param state Chatstate value (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void conversationChatstate(String cnxId, String cvId, String state) throws ApiException {
        conversationChatstateWithHttpInfo(cnxId, cvId, state);
    }

    /**
     * Send a chat state
     * Send a conversation state
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param state Chatstate value (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> conversationChatstateWithHttpInfo(String cnxId, String cvId, String state) throws ApiException {
        okhttp3.Call localVarCall = conversationChatstateValidateBeforeCall(cnxId, cvId, state, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send a chat state (asynchronously)
     * Send a conversation state
     * @param cnxId Connection id (required)
     * @param cvId Conversation id (required)
     * @param state Chatstate value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationChatstateAsync(String cnxId, String cvId, String state, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationChatstateValidateBeforeCall(cnxId, cvId, state, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversationCreate
     * @param cnxId Connection id (required)
     * @param conversationCreate Conversation data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationCreateCall(String cnxId, ConversationCreate conversationCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = conversationCreate;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationCreateValidateBeforeCall(String cnxId, ConversationCreate conversationCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling conversationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = conversationCreateCall(cnxId, conversationCreate, _callback);
        return localVarCall;

    }

    /**
     * Create a conversation
     * Create a conversation
     * @param cnxId Connection id (required)
     * @param conversationCreate Conversation data (optional)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Conversation conversationCreate(String cnxId, ConversationCreate conversationCreate) throws ApiException {
        ApiResponse<Conversation> localVarResp = conversationCreateWithHttpInfo(cnxId, conversationCreate);
        return localVarResp.getData();
    }

    /**
     * Create a conversation
     * Create a conversation
     * @param cnxId Connection id (required)
     * @param conversationCreate Conversation data (optional)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> conversationCreateWithHttpInfo(String cnxId, ConversationCreate conversationCreate) throws ApiException {
        okhttp3.Call localVarCall = conversationCreateValidateBeforeCall(cnxId, conversationCreate, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a conversation (asynchronously)
     * Create a conversation
     * @param cnxId Connection id (required)
     * @param conversationCreate Conversation data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationCreateAsync(String cnxId, ConversationCreate conversationCreate, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationCreateValidateBeforeCall(cnxId, conversationCreate, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversationDelete
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationDeleteCall(String cnxId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{id}"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationDeleteValidateBeforeCall(String cnxId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling conversationDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conversationDelete(Async)");
        }
        

        okhttp3.Call localVarCall = conversationDeleteCall(cnxId, id, _callback);
        return localVarCall;

    }

    /**
     * Delete a conversation
     * Delete a conversation
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void conversationDelete(String cnxId, String id) throws ApiException {
        conversationDeleteWithHttpInfo(cnxId, id);
    }

    /**
     * Delete a conversation
     * Delete a conversation
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> conversationDeleteWithHttpInfo(String cnxId, String id) throws ApiException {
        okhttp3.Call localVarCall = conversationDeleteValidateBeforeCall(cnxId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a conversation (asynchronously)
     * Delete a conversation
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationDeleteAsync(String cnxId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationDeleteValidateBeforeCall(cnxId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversationIndex
     * @param cnxId Connection id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationIndexCall(String cnxId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationIndexValidateBeforeCall(String cnxId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling conversationIndex(Async)");
        }
        

        okhttp3.Call localVarCall = conversationIndexCall(cnxId, _callback);
        return localVarCall;

    }

    /**
     * Get all conversations
     * Get all conversations
     * @param cnxId Connection id (required)
     * @return Conversations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Conversations conversationIndex(String cnxId) throws ApiException {
        ApiResponse<Conversations> localVarResp = conversationIndexWithHttpInfo(cnxId);
        return localVarResp.getData();
    }

    /**
     * Get all conversations
     * Get all conversations
     * @param cnxId Connection id (required)
     * @return ApiResponse&lt;Conversations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversations> conversationIndexWithHttpInfo(String cnxId) throws ApiException {
        okhttp3.Call localVarCall = conversationIndexValidateBeforeCall(cnxId, null);
        Type localVarReturnType = new TypeToken<Conversations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all conversations (asynchronously)
     * Get all conversations
     * @param cnxId Connection id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationIndexAsync(String cnxId, final ApiCallback<Conversations> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationIndexValidateBeforeCall(cnxId, _callback);
        Type localVarReturnType = new TypeToken<Conversations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversationShow
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationShowCall(String cnxId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rainbow/ucs/v1.0/connections/{cnxId}/conversations/{id}"
            .replaceAll("\\{" + "cnxId" + "\\}", localVarApiClient.escapeString(cnxId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationShowValidateBeforeCall(String cnxId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cnxId' is set
        if (cnxId == null) {
            throw new ApiException("Missing the required parameter 'cnxId' when calling conversationShow(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conversationShow(Async)");
        }
        

        okhttp3.Call localVarCall = conversationShowCall(cnxId, id, _callback);
        return localVarCall;

    }

    /**
     * Get a conversation
     * Get a conversation
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Conversation conversationShow(String cnxId, String id) throws ApiException {
        ApiResponse<Conversation> localVarResp = conversationShowWithHttpInfo(cnxId, id);
        return localVarResp.getData();
    }

    /**
     * Get a conversation
     * Get a conversation
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> conversationShowWithHttpInfo(String cnxId, String id) throws ApiException {
        okhttp3.Call localVarCall = conversationShowValidateBeforeCall(cnxId, id, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a conversation (asynchronously)
     * Get a conversation
     * @param cnxId Connection id (required)
     * @param id Conversation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationShowAsync(String cnxId, String id, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationShowValidateBeforeCall(cnxId, id, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
