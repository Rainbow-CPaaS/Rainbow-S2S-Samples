"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const bath_1 = require("bath");
const cookie = require("cookie");
const qs_1 = require("qs");
/**
 * Class that handles routing
 *
 * @export
 * @class OpenAPIRouter
 */
class OpenAPIRouter {
    /**
     * Creates an instance of OpenAPIRouter
     *
     * @param opts - constructor options
     * @param {Document} opts.definition - the OpenAPI definition, file path or Document object
     * @param {string} opts.apiRoot - the root URI of the api. all paths are matched relative to apiRoot
     * @memberof OpenAPIRouter
     */
    constructor(opts) {
        this.definition = opts.definition;
        this.apiRoot = opts.apiRoot || '/';
    }
    /**
     * Matches a request to an API operation (router)
     *
     * @param {Request} req
     * @returns {Operation}
     * @memberof OpenAPIRouter
     */
    matchOperation(req) {
        // normalize request for matching
        req = this.normalizeRequest(req);
        // get relative path
        const normalizedPath = this.normalizePath(req.path);
        // get all operations matching request method in a flat array
        const operations = _.filter(this.getOperations(), ({ method }) => method === req.method);
        // first check for an exact match for path
        const exactMatch = _.find(operations, ({ path }) => path === normalizedPath);
        if (exactMatch) {
            return exactMatch;
        }
        // then check for matches using path templating
        return _.find(operations, ({ path }) => {
            // convert openapi path template to a regex pattern i.e. /{id}/ becomes /[^/]+/
            const pathPattern = `^${path.replace(/\{.*?\}/g, '[^/]+')}$`;
            return Boolean(normalizedPath.match(new RegExp(pathPattern, 'g')));
        });
    }
    /**
     * Flattens operations into a simple array of Operation objects easy to work with
     *
     * @returns {Operation[]}
     * @memberof OpenAPIRouter
     */
    getOperations() {
        const paths = _.get(this.definition, 'paths', {});
        return _.chain(paths)
            .entries()
            .flatMap(([path, pathBaseObject]) => {
            const methods = _.pick(pathBaseObject, ['get', 'put', 'post', 'delete', 'options', 'head', 'patch', 'trace']);
            return _.entries(methods).map(([method, operation]) => {
                const op = operation;
                return Object.assign({}, op, { path,
                    method, 
                    // add the path base object's operations to the operation's parameters
                    parameters: [
                        ...(op.parameters || []),
                        ...(pathBaseObject.parameters || []),
                    ] });
            });
        })
            .value();
    }
    /**
     * Gets a single operation based on operationId
     *
     * @param {string} operationId
     * @returns {Operation}
     * @memberof OpenAPIRouter
     */
    getOperation(operationId) {
        return _.find(this.getOperations(), { operationId });
    }
    /**
     * Normalises request:
     * - http method to lowercase
     * - path leading slash 👍
     * - path trailing slash 👎
     * - path query string 👎
     *
     * @export
     * @param {Request} req
     * @returns {Request}
     */
    normalizeRequest(req) {
        return Object.assign({}, req, { path: (req.path || '')
                .trim()
                .split('?')[0] // remove query string
                .replace(/\/+$/, '') // remove trailing slash
                .replace(/^\/*/, '/'), method: req.method.trim().toLowerCase() });
    }
    /**
     * Normalises path for matching: strips apiRoot prefix from the path.
     *
     * @export
     * @param {string} path
     * @returns {string}
     */
    normalizePath(path) {
        return path.replace(new RegExp(`^${this.apiRoot}/?`), '/');
    }
    /**
     * Parses request
     * - parse json body
     * - parse path params based on uri template
     * - parse query string
     * - parse cookies from headers
     *
     * @export
     * @param {Request} req
     * @param {string} [path]
     * @returns {ParsedRequest}
     */
    parseRequest(req, path) {
        let requestBody = req.body;
        if (req.body && typeof req.body !== 'object') {
            try {
                // attempt to parse json
                requestBody = JSON.parse(req.body.toString());
            }
            catch (_a) {
                // suppress json parsing errors
                // we will emit error if validation requires it later
            }
        }
        // parse query string from req.path + req.query
        const query = typeof req.query === 'object' ? req.query : qs_1.parse(req.path.split('?')[1]);
        // header keys are converted to lowercase, so Content-Type becomes content-type
        const headers = _.mapKeys(req.headers, (val, header) => header.toLowerCase());
        // parse cookie from headers
        const cookieHeader = headers['cookie'];
        const cookies = cookie.parse(_.flatten([cookieHeader]).join('; '));
        // normalize
        req = this.normalizeRequest(req);
        let params = {};
        if (path) {
            // get relative path
            const normalizedPath = this.normalizePath(req.path);
            // parse path params if path is given
            const pathParams = bath_1.default(path);
            params = pathParams.params(normalizedPath) || undefined;
        }
        return Object.assign({}, req, { params,
            headers,
            query,
            cookies,
            requestBody });
    }
}
exports.OpenAPIRouter = OpenAPIRouter;
//# sourceMappingURL=router.js.map