/*
 * S2S api
 * # Rainbow S2S API guide  ## Preamble  ### Introduction  This guide describes a list of API services that are provided by the OT Rainbow S2S portal. This portal is dedicated to S2S features, providing a full REST API for Rainbow features.  ### Protocol  REST interface is used for sending/receiving OT rainbow API messages. HTTP verbs GET, DELETE, POST, PUT, etc. are used. Standard HTTP responses are used to provide requested information or error status. There is no session notion in OT Rainbow system, so requests could be issued according to the stateless model, without transport conservation between them. Additional data could be provided in message body. JSON is used as a main format for data encoding in message body part. Each request is started with the following pattern /{module}/{version}/ where {module} is a portal module name to address and {version} is a version of used API, e.g. “v1.0”.  ### Security considerations  Each request should contain some credential information to authenticate itself. Standard HTTP authentication with basic/bearer modes is used. JSON Web Token mechanism is used to provide authentication information. JWT has a expire timeout that is controlled by OT Rainbow portal to prevent very long token usage. Also authentication with application token is used. The token must be provided in the request HTTP header, using a custom header: APIKey. At server side, token is verified, and if it doesn’t match, 403 Not Allowed response is sent. TLS is used as a transport protocol to support message exchanges between OT Rainbow portal and an application.  
 *
 * The version of the OpenAPI document: 1.104.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ale.rainbow.s2s.client.s2s.api;

import com.ale.rainbow.s2s.client.s2s.ApiException;
import com.ale.rainbow.s2s.client.s2s.models.Connection;
import com.ale.rainbow.s2s.client.s2s.models.ConnectionCreate;
import com.ale.rainbow.s2s.client.s2s.models.ConnectionCreateResponse;
import com.ale.rainbow.s2s.client.s2s.models.Connections;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionApi
 */
@Ignore
public class ConnectionApiTest {

    private final ConnectionApi api = new ConnectionApi();

    
    /**
     * Create a new user connection
     *
     * Create a new user connection. NOTE: If a connection with a same &#39;resource&#39; or &#39;callback_url&#39; already exists for a given user, this connection is reused. In such a case, the &#39;callback_url&#39; may be updated
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectionCreateTest() throws ApiException {
        ConnectionCreate connectionCreate = null;
        ConnectionCreateResponse response = api.connectionCreate(connectionCreate);

        // TODO: test validations
    }
    
    /**
     * Delete a connection
     *
     * Delete a connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectionDeleteTest() throws ApiException {
        String id = null;
        api.connectionDelete(id);

        // TODO: test validations
    }
    
    /**
     * List all user connections
     *
     * List all user connections
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectionIndexTest() throws ApiException {
        Connections response = api.connectionIndex();

        // TODO: test validations
    }
    
    /**
     * Get the data of a connection
     *
     * Get the data of a connection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectionShowTest() throws ApiException {
        String id = null;
        Connection response = api.connectionShow(id);

        // TODO: test validations
    }
    
}
